/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetFwSystems200Ok :  IEquatable<GetFwSystems200Ok>, IValidatableObject
    {
        /// <summary>
        /// contested string
        /// </summary>
        /// <value>contested string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContestedEnum
        {
            
            /// <summary>
            /// Enum Captured for "captured"
            /// </summary>
            [EnumMember(Value = "captured")]
            Captured,
            
            /// <summary>
            /// Enum Contested for "contested"
            /// </summary>
            [EnumMember(Value = "contested")]
            Contested,
            
            /// <summary>
            /// Enum Uncontested for "uncontested"
            /// </summary>
            [EnumMember(Value = "uncontested")]
            Uncontested,
            
            /// <summary>
            /// Enum Vulnerable for "vulnerable"
            /// </summary>
            [EnumMember(Value = "vulnerable")]
            Vulnerable
        }

        /// <summary>
        /// contested string
        /// </summary>
        /// <value>contested string</value>
        [DataMember(Name="contested", EmitDefaultValue=false)]
        public ContestedEnum? Contested { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFwSystems200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetFwSystems200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFwSystems200Ok" /> class.
        /// </summary>
        /// <param name="Contested">contested string (required).</param>
        /// <param name="OccupierFactionId">occupier_faction_id integer (required).</param>
        /// <param name="OwnerFactionId">owner_faction_id integer (required).</param>
        /// <param name="SolarSystemId">solar_system_id integer (required).</param>
        /// <param name="VictoryPoints">victory_points integer (required).</param>
        /// <param name="VictoryPointsThreshold">victory_points_threshold integer (required).</param>
        public GetFwSystems200Ok(ContestedEnum? Contested = default(ContestedEnum?), int? OccupierFactionId = default(int?), int? OwnerFactionId = default(int?), int? SolarSystemId = default(int?), int? VictoryPoints = default(int?), int? VictoryPointsThreshold = default(int?))
        {
            // to ensure "Contested" is required (not null)
            if (Contested == null)
            {
                throw new InvalidDataException("Contested is a required property for GetFwSystems200Ok and cannot be null");
            }
            else
            {
                this.Contested = Contested;
            }
            // to ensure "OccupierFactionId" is required (not null)
            if (OccupierFactionId == null)
            {
                throw new InvalidDataException("OccupierFactionId is a required property for GetFwSystems200Ok and cannot be null");
            }
            else
            {
                this.OccupierFactionId = OccupierFactionId;
            }
            // to ensure "OwnerFactionId" is required (not null)
            if (OwnerFactionId == null)
            {
                throw new InvalidDataException("OwnerFactionId is a required property for GetFwSystems200Ok and cannot be null");
            }
            else
            {
                this.OwnerFactionId = OwnerFactionId;
            }
            // to ensure "SolarSystemId" is required (not null)
            if (SolarSystemId == null)
            {
                throw new InvalidDataException("SolarSystemId is a required property for GetFwSystems200Ok and cannot be null");
            }
            else
            {
                this.SolarSystemId = SolarSystemId;
            }
            // to ensure "VictoryPoints" is required (not null)
            if (VictoryPoints == null)
            {
                throw new InvalidDataException("VictoryPoints is a required property for GetFwSystems200Ok and cannot be null");
            }
            else
            {
                this.VictoryPoints = VictoryPoints;
            }
            // to ensure "VictoryPointsThreshold" is required (not null)
            if (VictoryPointsThreshold == null)
            {
                throw new InvalidDataException("VictoryPointsThreshold is a required property for GetFwSystems200Ok and cannot be null");
            }
            else
            {
                this.VictoryPointsThreshold = VictoryPointsThreshold;
            }
        }
        

        /// <summary>
        /// occupier_faction_id integer
        /// </summary>
        /// <value>occupier_faction_id integer</value>
        [DataMember(Name="occupier_faction_id", EmitDefaultValue=false)]
        public int? OccupierFactionId { get; set; }

        /// <summary>
        /// owner_faction_id integer
        /// </summary>
        /// <value>owner_faction_id integer</value>
        [DataMember(Name="owner_faction_id", EmitDefaultValue=false)]
        public int? OwnerFactionId { get; set; }

        /// <summary>
        /// solar_system_id integer
        /// </summary>
        /// <value>solar_system_id integer</value>
        [DataMember(Name="solar_system_id", EmitDefaultValue=false)]
        public int? SolarSystemId { get; set; }

        /// <summary>
        /// victory_points integer
        /// </summary>
        /// <value>victory_points integer</value>
        [DataMember(Name="victory_points", EmitDefaultValue=false)]
        public int? VictoryPoints { get; set; }

        /// <summary>
        /// victory_points_threshold integer
        /// </summary>
        /// <value>victory_points_threshold integer</value>
        [DataMember(Name="victory_points_threshold", EmitDefaultValue=false)]
        public int? VictoryPointsThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFwSystems200Ok {\n");
            sb.Append("  Contested: ").Append(Contested).Append("\n");
            sb.Append("  OccupierFactionId: ").Append(OccupierFactionId).Append("\n");
            sb.Append("  OwnerFactionId: ").Append(OwnerFactionId).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  VictoryPoints: ").Append(VictoryPoints).Append("\n");
            sb.Append("  VictoryPointsThreshold: ").Append(VictoryPointsThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetFwSystems200Ok);
        }

        /// <summary>
        /// Returns true if GetFwSystems200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFwSystems200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFwSystems200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contested == input.Contested ||
                    (this.Contested != null &&
                    this.Contested.Equals(input.Contested))
                ) && 
                (
                    this.OccupierFactionId == input.OccupierFactionId ||
                    (this.OccupierFactionId != null &&
                    this.OccupierFactionId.Equals(input.OccupierFactionId))
                ) && 
                (
                    this.OwnerFactionId == input.OwnerFactionId ||
                    (this.OwnerFactionId != null &&
                    this.OwnerFactionId.Equals(input.OwnerFactionId))
                ) && 
                (
                    this.SolarSystemId == input.SolarSystemId ||
                    (this.SolarSystemId != null &&
                    this.SolarSystemId.Equals(input.SolarSystemId))
                ) && 
                (
                    this.VictoryPoints == input.VictoryPoints ||
                    (this.VictoryPoints != null &&
                    this.VictoryPoints.Equals(input.VictoryPoints))
                ) && 
                (
                    this.VictoryPointsThreshold == input.VictoryPointsThreshold ||
                    (this.VictoryPointsThreshold != null &&
                    this.VictoryPointsThreshold.Equals(input.VictoryPointsThreshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contested != null)
                    hashCode = hashCode * 59 + this.Contested.GetHashCode();
                if (this.OccupierFactionId != null)
                    hashCode = hashCode * 59 + this.OccupierFactionId.GetHashCode();
                if (this.OwnerFactionId != null)
                    hashCode = hashCode * 59 + this.OwnerFactionId.GetHashCode();
                if (this.SolarSystemId != null)
                    hashCode = hashCode * 59 + this.SolarSystemId.GetHashCode();
                if (this.VictoryPoints != null)
                    hashCode = hashCode * 59 + this.VictoryPoints.GetHashCode();
                if (this.VictoryPointsThreshold != null)
                    hashCode = hashCode * 59 + this.VictoryPointsThreshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
