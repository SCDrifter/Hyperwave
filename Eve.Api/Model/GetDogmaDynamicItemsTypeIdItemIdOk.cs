/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetDogmaDynamicItemsTypeIdItemIdOk :  IEquatable<GetDogmaDynamicItemsTypeIdItemIdOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDogmaDynamicItemsTypeIdItemIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetDogmaDynamicItemsTypeIdItemIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDogmaDynamicItemsTypeIdItemIdOk" /> class.
        /// </summary>
        /// <param name="CreatedBy">The ID of the character who created the item (required).</param>
        /// <param name="DogmaAttributes">dogma_attributes array (required).</param>
        /// <param name="DogmaEffects">dogma_effects array (required).</param>
        /// <param name="MutatorTypeId">The type ID of the mutator used to generate the dynamic item. (required).</param>
        /// <param name="SourceTypeId">The type ID of the source item the mutator was applied to create the dynamic item. (required).</param>
        public GetDogmaDynamicItemsTypeIdItemIdOk(int? CreatedBy = default(int?), List<GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute> DogmaAttributes = default(List<GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute>), List<GetDogmaDynamicItemsTypeIdItemIdDogmaEffect> DogmaEffects = default(List<GetDogmaDynamicItemsTypeIdItemIdDogmaEffect>), int? MutatorTypeId = default(int?), int? SourceTypeId = default(int?))
        {
            // to ensure "CreatedBy" is required (not null)
            if (CreatedBy == null)
            {
                throw new InvalidDataException("CreatedBy is a required property for GetDogmaDynamicItemsTypeIdItemIdOk and cannot be null");
            }
            else
            {
                this.CreatedBy = CreatedBy;
            }
            // to ensure "DogmaAttributes" is required (not null)
            if (DogmaAttributes == null)
            {
                throw new InvalidDataException("DogmaAttributes is a required property for GetDogmaDynamicItemsTypeIdItemIdOk and cannot be null");
            }
            else
            {
                this.DogmaAttributes = DogmaAttributes;
            }
            // to ensure "DogmaEffects" is required (not null)
            if (DogmaEffects == null)
            {
                throw new InvalidDataException("DogmaEffects is a required property for GetDogmaDynamicItemsTypeIdItemIdOk and cannot be null");
            }
            else
            {
                this.DogmaEffects = DogmaEffects;
            }
            // to ensure "MutatorTypeId" is required (not null)
            if (MutatorTypeId == null)
            {
                throw new InvalidDataException("MutatorTypeId is a required property for GetDogmaDynamicItemsTypeIdItemIdOk and cannot be null");
            }
            else
            {
                this.MutatorTypeId = MutatorTypeId;
            }
            // to ensure "SourceTypeId" is required (not null)
            if (SourceTypeId == null)
            {
                throw new InvalidDataException("SourceTypeId is a required property for GetDogmaDynamicItemsTypeIdItemIdOk and cannot be null");
            }
            else
            {
                this.SourceTypeId = SourceTypeId;
            }
        }
        
        /// <summary>
        /// The ID of the character who created the item
        /// </summary>
        /// <value>The ID of the character who created the item</value>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public int? CreatedBy { get; set; }

        /// <summary>
        /// dogma_attributes array
        /// </summary>
        /// <value>dogma_attributes array</value>
        [DataMember(Name="dogma_attributes", EmitDefaultValue=false)]
        public List<GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute> DogmaAttributes { get; set; }

        /// <summary>
        /// dogma_effects array
        /// </summary>
        /// <value>dogma_effects array</value>
        [DataMember(Name="dogma_effects", EmitDefaultValue=false)]
        public List<GetDogmaDynamicItemsTypeIdItemIdDogmaEffect> DogmaEffects { get; set; }

        /// <summary>
        /// The type ID of the mutator used to generate the dynamic item.
        /// </summary>
        /// <value>The type ID of the mutator used to generate the dynamic item.</value>
        [DataMember(Name="mutator_type_id", EmitDefaultValue=false)]
        public int? MutatorTypeId { get; set; }

        /// <summary>
        /// The type ID of the source item the mutator was applied to create the dynamic item.
        /// </summary>
        /// <value>The type ID of the source item the mutator was applied to create the dynamic item.</value>
        [DataMember(Name="source_type_id", EmitDefaultValue=false)]
        public int? SourceTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDogmaDynamicItemsTypeIdItemIdOk {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  DogmaAttributes: ").Append(DogmaAttributes).Append("\n");
            sb.Append("  DogmaEffects: ").Append(DogmaEffects).Append("\n");
            sb.Append("  MutatorTypeId: ").Append(MutatorTypeId).Append("\n");
            sb.Append("  SourceTypeId: ").Append(SourceTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDogmaDynamicItemsTypeIdItemIdOk);
        }

        /// <summary>
        /// Returns true if GetDogmaDynamicItemsTypeIdItemIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDogmaDynamicItemsTypeIdItemIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDogmaDynamicItemsTypeIdItemIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.DogmaAttributes == input.DogmaAttributes ||
                    (this.DogmaAttributes != null &&
                    this.DogmaAttributes.SequenceEqual(input.DogmaAttributes))
                ) && 
                (
                    this.DogmaEffects == input.DogmaEffects ||
                    (this.DogmaEffects != null &&
                    this.DogmaEffects.SequenceEqual(input.DogmaEffects))
                ) && 
                (
                    this.MutatorTypeId == input.MutatorTypeId ||
                    (this.MutatorTypeId != null &&
                    this.MutatorTypeId.Equals(input.MutatorTypeId))
                ) && 
                (
                    this.SourceTypeId == input.SourceTypeId ||
                    (this.SourceTypeId != null &&
                    this.SourceTypeId.Equals(input.SourceTypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.DogmaAttributes != null)
                    hashCode = hashCode * 59 + this.DogmaAttributes.GetHashCode();
                if (this.DogmaEffects != null)
                    hashCode = hashCode * 59 + this.DogmaEffects.GetHashCode();
                if (this.MutatorTypeId != null)
                    hashCode = hashCode * 59 + this.MutatorTypeId.GetHashCode();
                if (this.SourceTypeId != null)
                    hashCode = hashCode * 59 + this.SourceTypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
