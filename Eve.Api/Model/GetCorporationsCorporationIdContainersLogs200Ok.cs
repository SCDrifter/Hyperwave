/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdContainersLogs200Ok :  IEquatable<GetCorporationsCorporationIdContainersLogs200Ok>, IValidatableObject
    {
        /// <summary>
        /// action string
        /// </summary>
        /// <value>action string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Add for "add"
            /// </summary>
            [EnumMember(Value = "add")]
            Add,
            
            /// <summary>
            /// Enum Assemble for "assemble"
            /// </summary>
            [EnumMember(Value = "assemble")]
            Assemble,
            
            /// <summary>
            /// Enum Configure for "configure"
            /// </summary>
            [EnumMember(Value = "configure")]
            Configure,
            
            /// <summary>
            /// Enum Enterpassword for "enter_password"
            /// </summary>
            [EnumMember(Value = "enter_password")]
            Enterpassword,
            
            /// <summary>
            /// Enum Lock for "lock"
            /// </summary>
            [EnumMember(Value = "lock")]
            Lock,
            
            /// <summary>
            /// Enum Move for "move"
            /// </summary>
            [EnumMember(Value = "move")]
            Move,
            
            /// <summary>
            /// Enum Repackage for "repackage"
            /// </summary>
            [EnumMember(Value = "repackage")]
            Repackage,
            
            /// <summary>
            /// Enum Setname for "set_name"
            /// </summary>
            [EnumMember(Value = "set_name")]
            Setname,
            
            /// <summary>
            /// Enum Setpassword for "set_password"
            /// </summary>
            [EnumMember(Value = "set_password")]
            Setpassword,
            
            /// <summary>
            /// Enum Unlock for "unlock"
            /// </summary>
            [EnumMember(Value = "unlock")]
            Unlock
        }

        /// <summary>
        /// location_flag string
        /// </summary>
        /// <value>location_flag string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LocationFlagEnum
        {
            
            /// <summary>
            /// Enum AssetSafety for "AssetSafety"
            /// </summary>
            [EnumMember(Value = "AssetSafety")]
            AssetSafety,
            
            /// <summary>
            /// Enum AutoFit for "AutoFit"
            /// </summary>
            [EnumMember(Value = "AutoFit")]
            AutoFit,
            
            /// <summary>
            /// Enum Bonus for "Bonus"
            /// </summary>
            [EnumMember(Value = "Bonus")]
            Bonus,
            
            /// <summary>
            /// Enum Booster for "Booster"
            /// </summary>
            [EnumMember(Value = "Booster")]
            Booster,
            
            /// <summary>
            /// Enum BoosterBay for "BoosterBay"
            /// </summary>
            [EnumMember(Value = "BoosterBay")]
            BoosterBay,
            
            /// <summary>
            /// Enum Capsule for "Capsule"
            /// </summary>
            [EnumMember(Value = "Capsule")]
            Capsule,
            
            /// <summary>
            /// Enum Cargo for "Cargo"
            /// </summary>
            [EnumMember(Value = "Cargo")]
            Cargo,
            
            /// <summary>
            /// Enum CorpDeliveries for "CorpDeliveries"
            /// </summary>
            [EnumMember(Value = "CorpDeliveries")]
            CorpDeliveries,
            
            /// <summary>
            /// Enum CorpSAG1 for "CorpSAG1"
            /// </summary>
            [EnumMember(Value = "CorpSAG1")]
            CorpSAG1,
            
            /// <summary>
            /// Enum CorpSAG2 for "CorpSAG2"
            /// </summary>
            [EnumMember(Value = "CorpSAG2")]
            CorpSAG2,
            
            /// <summary>
            /// Enum CorpSAG3 for "CorpSAG3"
            /// </summary>
            [EnumMember(Value = "CorpSAG3")]
            CorpSAG3,
            
            /// <summary>
            /// Enum CorpSAG4 for "CorpSAG4"
            /// </summary>
            [EnumMember(Value = "CorpSAG4")]
            CorpSAG4,
            
            /// <summary>
            /// Enum CorpSAG5 for "CorpSAG5"
            /// </summary>
            [EnumMember(Value = "CorpSAG5")]
            CorpSAG5,
            
            /// <summary>
            /// Enum CorpSAG6 for "CorpSAG6"
            /// </summary>
            [EnumMember(Value = "CorpSAG6")]
            CorpSAG6,
            
            /// <summary>
            /// Enum CorpSAG7 for "CorpSAG7"
            /// </summary>
            [EnumMember(Value = "CorpSAG7")]
            CorpSAG7,
            
            /// <summary>
            /// Enum CrateLoot for "CrateLoot"
            /// </summary>
            [EnumMember(Value = "CrateLoot")]
            CrateLoot,
            
            /// <summary>
            /// Enum Deliveries for "Deliveries"
            /// </summary>
            [EnumMember(Value = "Deliveries")]
            Deliveries,
            
            /// <summary>
            /// Enum DroneBay for "DroneBay"
            /// </summary>
            [EnumMember(Value = "DroneBay")]
            DroneBay,
            
            /// <summary>
            /// Enum DustBattle for "DustBattle"
            /// </summary>
            [EnumMember(Value = "DustBattle")]
            DustBattle,
            
            /// <summary>
            /// Enum DustDatabank for "DustDatabank"
            /// </summary>
            [EnumMember(Value = "DustDatabank")]
            DustDatabank,
            
            /// <summary>
            /// Enum FighterBay for "FighterBay"
            /// </summary>
            [EnumMember(Value = "FighterBay")]
            FighterBay,
            
            /// <summary>
            /// Enum FighterTube0 for "FighterTube0"
            /// </summary>
            [EnumMember(Value = "FighterTube0")]
            FighterTube0,
            
            /// <summary>
            /// Enum FighterTube1 for "FighterTube1"
            /// </summary>
            [EnumMember(Value = "FighterTube1")]
            FighterTube1,
            
            /// <summary>
            /// Enum FighterTube2 for "FighterTube2"
            /// </summary>
            [EnumMember(Value = "FighterTube2")]
            FighterTube2,
            
            /// <summary>
            /// Enum FighterTube3 for "FighterTube3"
            /// </summary>
            [EnumMember(Value = "FighterTube3")]
            FighterTube3,
            
            /// <summary>
            /// Enum FighterTube4 for "FighterTube4"
            /// </summary>
            [EnumMember(Value = "FighterTube4")]
            FighterTube4,
            
            /// <summary>
            /// Enum FleetHangar for "FleetHangar"
            /// </summary>
            [EnumMember(Value = "FleetHangar")]
            FleetHangar,
            
            /// <summary>
            /// Enum Hangar for "Hangar"
            /// </summary>
            [EnumMember(Value = "Hangar")]
            Hangar,
            
            /// <summary>
            /// Enum HangarAll for "HangarAll"
            /// </summary>
            [EnumMember(Value = "HangarAll")]
            HangarAll,
            
            /// <summary>
            /// Enum HiSlot0 for "HiSlot0"
            /// </summary>
            [EnumMember(Value = "HiSlot0")]
            HiSlot0,
            
            /// <summary>
            /// Enum HiSlot1 for "HiSlot1"
            /// </summary>
            [EnumMember(Value = "HiSlot1")]
            HiSlot1,
            
            /// <summary>
            /// Enum HiSlot2 for "HiSlot2"
            /// </summary>
            [EnumMember(Value = "HiSlot2")]
            HiSlot2,
            
            /// <summary>
            /// Enum HiSlot3 for "HiSlot3"
            /// </summary>
            [EnumMember(Value = "HiSlot3")]
            HiSlot3,
            
            /// <summary>
            /// Enum HiSlot4 for "HiSlot4"
            /// </summary>
            [EnumMember(Value = "HiSlot4")]
            HiSlot4,
            
            /// <summary>
            /// Enum HiSlot5 for "HiSlot5"
            /// </summary>
            [EnumMember(Value = "HiSlot5")]
            HiSlot5,
            
            /// <summary>
            /// Enum HiSlot6 for "HiSlot6"
            /// </summary>
            [EnumMember(Value = "HiSlot6")]
            HiSlot6,
            
            /// <summary>
            /// Enum HiSlot7 for "HiSlot7"
            /// </summary>
            [EnumMember(Value = "HiSlot7")]
            HiSlot7,
            
            /// <summary>
            /// Enum HiddenModifiers for "HiddenModifiers"
            /// </summary>
            [EnumMember(Value = "HiddenModifiers")]
            HiddenModifiers,
            
            /// <summary>
            /// Enum Implant for "Implant"
            /// </summary>
            [EnumMember(Value = "Implant")]
            Implant,
            
            /// <summary>
            /// Enum Impounded for "Impounded"
            /// </summary>
            [EnumMember(Value = "Impounded")]
            Impounded,
            
            /// <summary>
            /// Enum JunkyardReprocessed for "JunkyardReprocessed"
            /// </summary>
            [EnumMember(Value = "JunkyardReprocessed")]
            JunkyardReprocessed,
            
            /// <summary>
            /// Enum JunkyardTrashed for "JunkyardTrashed"
            /// </summary>
            [EnumMember(Value = "JunkyardTrashed")]
            JunkyardTrashed,
            
            /// <summary>
            /// Enum LoSlot0 for "LoSlot0"
            /// </summary>
            [EnumMember(Value = "LoSlot0")]
            LoSlot0,
            
            /// <summary>
            /// Enum LoSlot1 for "LoSlot1"
            /// </summary>
            [EnumMember(Value = "LoSlot1")]
            LoSlot1,
            
            /// <summary>
            /// Enum LoSlot2 for "LoSlot2"
            /// </summary>
            [EnumMember(Value = "LoSlot2")]
            LoSlot2,
            
            /// <summary>
            /// Enum LoSlot3 for "LoSlot3"
            /// </summary>
            [EnumMember(Value = "LoSlot3")]
            LoSlot3,
            
            /// <summary>
            /// Enum LoSlot4 for "LoSlot4"
            /// </summary>
            [EnumMember(Value = "LoSlot4")]
            LoSlot4,
            
            /// <summary>
            /// Enum LoSlot5 for "LoSlot5"
            /// </summary>
            [EnumMember(Value = "LoSlot5")]
            LoSlot5,
            
            /// <summary>
            /// Enum LoSlot6 for "LoSlot6"
            /// </summary>
            [EnumMember(Value = "LoSlot6")]
            LoSlot6,
            
            /// <summary>
            /// Enum LoSlot7 for "LoSlot7"
            /// </summary>
            [EnumMember(Value = "LoSlot7")]
            LoSlot7,
            
            /// <summary>
            /// Enum Locked for "Locked"
            /// </summary>
            [EnumMember(Value = "Locked")]
            Locked,
            
            /// <summary>
            /// Enum MedSlot0 for "MedSlot0"
            /// </summary>
            [EnumMember(Value = "MedSlot0")]
            MedSlot0,
            
            /// <summary>
            /// Enum MedSlot1 for "MedSlot1"
            /// </summary>
            [EnumMember(Value = "MedSlot1")]
            MedSlot1,
            
            /// <summary>
            /// Enum MedSlot2 for "MedSlot2"
            /// </summary>
            [EnumMember(Value = "MedSlot2")]
            MedSlot2,
            
            /// <summary>
            /// Enum MedSlot3 for "MedSlot3"
            /// </summary>
            [EnumMember(Value = "MedSlot3")]
            MedSlot3,
            
            /// <summary>
            /// Enum MedSlot4 for "MedSlot4"
            /// </summary>
            [EnumMember(Value = "MedSlot4")]
            MedSlot4,
            
            /// <summary>
            /// Enum MedSlot5 for "MedSlot5"
            /// </summary>
            [EnumMember(Value = "MedSlot5")]
            MedSlot5,
            
            /// <summary>
            /// Enum MedSlot6 for "MedSlot6"
            /// </summary>
            [EnumMember(Value = "MedSlot6")]
            MedSlot6,
            
            /// <summary>
            /// Enum MedSlot7 for "MedSlot7"
            /// </summary>
            [EnumMember(Value = "MedSlot7")]
            MedSlot7,
            
            /// <summary>
            /// Enum OfficeFolder for "OfficeFolder"
            /// </summary>
            [EnumMember(Value = "OfficeFolder")]
            OfficeFolder,
            
            /// <summary>
            /// Enum Pilot for "Pilot"
            /// </summary>
            [EnumMember(Value = "Pilot")]
            Pilot,
            
            /// <summary>
            /// Enum PlanetSurface for "PlanetSurface"
            /// </summary>
            [EnumMember(Value = "PlanetSurface")]
            PlanetSurface,
            
            /// <summary>
            /// Enum QuafeBay for "QuafeBay"
            /// </summary>
            [EnumMember(Value = "QuafeBay")]
            QuafeBay,
            
            /// <summary>
            /// Enum Reward for "Reward"
            /// </summary>
            [EnumMember(Value = "Reward")]
            Reward,
            
            /// <summary>
            /// Enum RigSlot0 for "RigSlot0"
            /// </summary>
            [EnumMember(Value = "RigSlot0")]
            RigSlot0,
            
            /// <summary>
            /// Enum RigSlot1 for "RigSlot1"
            /// </summary>
            [EnumMember(Value = "RigSlot1")]
            RigSlot1,
            
            /// <summary>
            /// Enum RigSlot2 for "RigSlot2"
            /// </summary>
            [EnumMember(Value = "RigSlot2")]
            RigSlot2,
            
            /// <summary>
            /// Enum RigSlot3 for "RigSlot3"
            /// </summary>
            [EnumMember(Value = "RigSlot3")]
            RigSlot3,
            
            /// <summary>
            /// Enum RigSlot4 for "RigSlot4"
            /// </summary>
            [EnumMember(Value = "RigSlot4")]
            RigSlot4,
            
            /// <summary>
            /// Enum RigSlot5 for "RigSlot5"
            /// </summary>
            [EnumMember(Value = "RigSlot5")]
            RigSlot5,
            
            /// <summary>
            /// Enum RigSlot6 for "RigSlot6"
            /// </summary>
            [EnumMember(Value = "RigSlot6")]
            RigSlot6,
            
            /// <summary>
            /// Enum RigSlot7 for "RigSlot7"
            /// </summary>
            [EnumMember(Value = "RigSlot7")]
            RigSlot7,
            
            /// <summary>
            /// Enum SecondaryStorage for "SecondaryStorage"
            /// </summary>
            [EnumMember(Value = "SecondaryStorage")]
            SecondaryStorage,
            
            /// <summary>
            /// Enum ServiceSlot0 for "ServiceSlot0"
            /// </summary>
            [EnumMember(Value = "ServiceSlot0")]
            ServiceSlot0,
            
            /// <summary>
            /// Enum ServiceSlot1 for "ServiceSlot1"
            /// </summary>
            [EnumMember(Value = "ServiceSlot1")]
            ServiceSlot1,
            
            /// <summary>
            /// Enum ServiceSlot2 for "ServiceSlot2"
            /// </summary>
            [EnumMember(Value = "ServiceSlot2")]
            ServiceSlot2,
            
            /// <summary>
            /// Enum ServiceSlot3 for "ServiceSlot3"
            /// </summary>
            [EnumMember(Value = "ServiceSlot3")]
            ServiceSlot3,
            
            /// <summary>
            /// Enum ServiceSlot4 for "ServiceSlot4"
            /// </summary>
            [EnumMember(Value = "ServiceSlot4")]
            ServiceSlot4,
            
            /// <summary>
            /// Enum ServiceSlot5 for "ServiceSlot5"
            /// </summary>
            [EnumMember(Value = "ServiceSlot5")]
            ServiceSlot5,
            
            /// <summary>
            /// Enum ServiceSlot6 for "ServiceSlot6"
            /// </summary>
            [EnumMember(Value = "ServiceSlot6")]
            ServiceSlot6,
            
            /// <summary>
            /// Enum ServiceSlot7 for "ServiceSlot7"
            /// </summary>
            [EnumMember(Value = "ServiceSlot7")]
            ServiceSlot7,
            
            /// <summary>
            /// Enum ShipHangar for "ShipHangar"
            /// </summary>
            [EnumMember(Value = "ShipHangar")]
            ShipHangar,
            
            /// <summary>
            /// Enum ShipOffline for "ShipOffline"
            /// </summary>
            [EnumMember(Value = "ShipOffline")]
            ShipOffline,
            
            /// <summary>
            /// Enum Skill for "Skill"
            /// </summary>
            [EnumMember(Value = "Skill")]
            Skill,
            
            /// <summary>
            /// Enum SkillInTraining for "SkillInTraining"
            /// </summary>
            [EnumMember(Value = "SkillInTraining")]
            SkillInTraining,
            
            /// <summary>
            /// Enum SpecializedAmmoHold for "SpecializedAmmoHold"
            /// </summary>
            [EnumMember(Value = "SpecializedAmmoHold")]
            SpecializedAmmoHold,
            
            /// <summary>
            /// Enum SpecializedCommandCenterHold for "SpecializedCommandCenterHold"
            /// </summary>
            [EnumMember(Value = "SpecializedCommandCenterHold")]
            SpecializedCommandCenterHold,
            
            /// <summary>
            /// Enum SpecializedFuelBay for "SpecializedFuelBay"
            /// </summary>
            [EnumMember(Value = "SpecializedFuelBay")]
            SpecializedFuelBay,
            
            /// <summary>
            /// Enum SpecializedGasHold for "SpecializedGasHold"
            /// </summary>
            [EnumMember(Value = "SpecializedGasHold")]
            SpecializedGasHold,
            
            /// <summary>
            /// Enum SpecializedIndustrialShipHold for "SpecializedIndustrialShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedIndustrialShipHold")]
            SpecializedIndustrialShipHold,
            
            /// <summary>
            /// Enum SpecializedLargeShipHold for "SpecializedLargeShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedLargeShipHold")]
            SpecializedLargeShipHold,
            
            /// <summary>
            /// Enum SpecializedMaterialBay for "SpecializedMaterialBay"
            /// </summary>
            [EnumMember(Value = "SpecializedMaterialBay")]
            SpecializedMaterialBay,
            
            /// <summary>
            /// Enum SpecializedMediumShipHold for "SpecializedMediumShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedMediumShipHold")]
            SpecializedMediumShipHold,
            
            /// <summary>
            /// Enum SpecializedMineralHold for "SpecializedMineralHold"
            /// </summary>
            [EnumMember(Value = "SpecializedMineralHold")]
            SpecializedMineralHold,
            
            /// <summary>
            /// Enum SpecializedOreHold for "SpecializedOreHold"
            /// </summary>
            [EnumMember(Value = "SpecializedOreHold")]
            SpecializedOreHold,
            
            /// <summary>
            /// Enum SpecializedPlanetaryCommoditiesHold for "SpecializedPlanetaryCommoditiesHold"
            /// </summary>
            [EnumMember(Value = "SpecializedPlanetaryCommoditiesHold")]
            SpecializedPlanetaryCommoditiesHold,
            
            /// <summary>
            /// Enum SpecializedSalvageHold for "SpecializedSalvageHold"
            /// </summary>
            [EnumMember(Value = "SpecializedSalvageHold")]
            SpecializedSalvageHold,
            
            /// <summary>
            /// Enum SpecializedShipHold for "SpecializedShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedShipHold")]
            SpecializedShipHold,
            
            /// <summary>
            /// Enum SpecializedSmallShipHold for "SpecializedSmallShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedSmallShipHold")]
            SpecializedSmallShipHold,
            
            /// <summary>
            /// Enum StructureActive for "StructureActive"
            /// </summary>
            [EnumMember(Value = "StructureActive")]
            StructureActive,
            
            /// <summary>
            /// Enum StructureFuel for "StructureFuel"
            /// </summary>
            [EnumMember(Value = "StructureFuel")]
            StructureFuel,
            
            /// <summary>
            /// Enum StructureInactive for "StructureInactive"
            /// </summary>
            [EnumMember(Value = "StructureInactive")]
            StructureInactive,
            
            /// <summary>
            /// Enum StructureOffline for "StructureOffline"
            /// </summary>
            [EnumMember(Value = "StructureOffline")]
            StructureOffline,
            
            /// <summary>
            /// Enum SubSystemBay for "SubSystemBay"
            /// </summary>
            [EnumMember(Value = "SubSystemBay")]
            SubSystemBay,
            
            /// <summary>
            /// Enum SubSystemSlot0 for "SubSystemSlot0"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot0")]
            SubSystemSlot0,
            
            /// <summary>
            /// Enum SubSystemSlot1 for "SubSystemSlot1"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot1")]
            SubSystemSlot1,
            
            /// <summary>
            /// Enum SubSystemSlot2 for "SubSystemSlot2"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot2")]
            SubSystemSlot2,
            
            /// <summary>
            /// Enum SubSystemSlot3 for "SubSystemSlot3"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot3")]
            SubSystemSlot3,
            
            /// <summary>
            /// Enum SubSystemSlot4 for "SubSystemSlot4"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot4")]
            SubSystemSlot4,
            
            /// <summary>
            /// Enum SubSystemSlot5 for "SubSystemSlot5"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot5")]
            SubSystemSlot5,
            
            /// <summary>
            /// Enum SubSystemSlot6 for "SubSystemSlot6"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot6")]
            SubSystemSlot6,
            
            /// <summary>
            /// Enum SubSystemSlot7 for "SubSystemSlot7"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot7")]
            SubSystemSlot7,
            
            /// <summary>
            /// Enum Unlocked for "Unlocked"
            /// </summary>
            [EnumMember(Value = "Unlocked")]
            Unlocked,
            
            /// <summary>
            /// Enum Wallet for "Wallet"
            /// </summary>
            [EnumMember(Value = "Wallet")]
            Wallet,
            
            /// <summary>
            /// Enum Wardrobe for "Wardrobe"
            /// </summary>
            [EnumMember(Value = "Wardrobe")]
            Wardrobe
        }

        /// <summary>
        /// Type of password set if action is of type SetPassword or EnterPassword
        /// </summary>
        /// <value>Type of password set if action is of type SetPassword or EnterPassword</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PasswordTypeEnum
        {
            
            /// <summary>
            /// Enum Config for "config"
            /// </summary>
            [EnumMember(Value = "config")]
            Config,
            
            /// <summary>
            /// Enum General for "general"
            /// </summary>
            [EnumMember(Value = "general")]
            General
        }

        /// <summary>
        /// action string
        /// </summary>
        /// <value>action string</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// location_flag string
        /// </summary>
        /// <value>location_flag string</value>
        [DataMember(Name="location_flag", EmitDefaultValue=false)]
        public LocationFlagEnum? LocationFlag { get; set; }
        /// <summary>
        /// Type of password set if action is of type SetPassword or EnterPassword
        /// </summary>
        /// <value>Type of password set if action is of type SetPassword or EnterPassword</value>
        [DataMember(Name="password_type", EmitDefaultValue=false)]
        public PasswordTypeEnum? PasswordType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdContainersLogs200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdContainersLogs200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdContainersLogs200Ok" /> class.
        /// </summary>
        /// <param name="Action">action string (required).</param>
        /// <param name="CharacterId">ID of the character who performed the action. (required).</param>
        /// <param name="ContainerId">ID of the container (required).</param>
        /// <param name="ContainerTypeId">Type ID of the container (required).</param>
        /// <param name="LocationFlag">location_flag string (required).</param>
        /// <param name="LocationId">location_id integer (required).</param>
        /// <param name="LoggedAt">Timestamp when this log was created (required).</param>
        /// <param name="NewConfigBitmask">new_config_bitmask integer.</param>
        /// <param name="OldConfigBitmask">old_config_bitmask integer.</param>
        /// <param name="PasswordType">Type of password set if action is of type SetPassword or EnterPassword.</param>
        /// <param name="Quantity">Quantity of the item being acted upon.</param>
        /// <param name="TypeId">Type ID of the item being acted upon.</param>
        public GetCorporationsCorporationIdContainersLogs200Ok(ActionEnum? Action = default(ActionEnum?), int? CharacterId = default(int?), long? ContainerId = default(long?), int? ContainerTypeId = default(int?), LocationFlagEnum? LocationFlag = default(LocationFlagEnum?), long? LocationId = default(long?), DateTime? LoggedAt = default(DateTime?), int? NewConfigBitmask = default(int?), int? OldConfigBitmask = default(int?), PasswordTypeEnum? PasswordType = default(PasswordTypeEnum?), int? Quantity = default(int?), int? TypeId = default(int?))
        {
            // to ensure "Action" is required (not null)
            if (Action == null)
            {
                throw new InvalidDataException("Action is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.Action = Action;
            }
            // to ensure "CharacterId" is required (not null)
            if (CharacterId == null)
            {
                throw new InvalidDataException("CharacterId is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.CharacterId = CharacterId;
            }
            // to ensure "ContainerId" is required (not null)
            if (ContainerId == null)
            {
                throw new InvalidDataException("ContainerId is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.ContainerId = ContainerId;
            }
            // to ensure "ContainerTypeId" is required (not null)
            if (ContainerTypeId == null)
            {
                throw new InvalidDataException("ContainerTypeId is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.ContainerTypeId = ContainerTypeId;
            }
            // to ensure "LocationFlag" is required (not null)
            if (LocationFlag == null)
            {
                throw new InvalidDataException("LocationFlag is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.LocationFlag = LocationFlag;
            }
            // to ensure "LocationId" is required (not null)
            if (LocationId == null)
            {
                throw new InvalidDataException("LocationId is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.LocationId = LocationId;
            }
            // to ensure "LoggedAt" is required (not null)
            if (LoggedAt == null)
            {
                throw new InvalidDataException("LoggedAt is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.LoggedAt = LoggedAt;
            }
            this.NewConfigBitmask = NewConfigBitmask;
            this.OldConfigBitmask = OldConfigBitmask;
            this.PasswordType = PasswordType;
            this.Quantity = Quantity;
            this.TypeId = TypeId;
        }
        

        /// <summary>
        /// ID of the character who performed the action.
        /// </summary>
        /// <value>ID of the character who performed the action.</value>
        [DataMember(Name="character_id", EmitDefaultValue=false)]
        public int? CharacterId { get; set; }

        /// <summary>
        /// ID of the container
        /// </summary>
        /// <value>ID of the container</value>
        [DataMember(Name="container_id", EmitDefaultValue=false)]
        public long? ContainerId { get; set; }

        /// <summary>
        /// Type ID of the container
        /// </summary>
        /// <value>Type ID of the container</value>
        [DataMember(Name="container_type_id", EmitDefaultValue=false)]
        public int? ContainerTypeId { get; set; }


        /// <summary>
        /// location_id integer
        /// </summary>
        /// <value>location_id integer</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public long? LocationId { get; set; }

        /// <summary>
        /// Timestamp when this log was created
        /// </summary>
        /// <value>Timestamp when this log was created</value>
        [DataMember(Name="logged_at", EmitDefaultValue=false)]
        public DateTime? LoggedAt { get; set; }

        /// <summary>
        /// new_config_bitmask integer
        /// </summary>
        /// <value>new_config_bitmask integer</value>
        [DataMember(Name="new_config_bitmask", EmitDefaultValue=false)]
        public int? NewConfigBitmask { get; set; }

        /// <summary>
        /// old_config_bitmask integer
        /// </summary>
        /// <value>old_config_bitmask integer</value>
        [DataMember(Name="old_config_bitmask", EmitDefaultValue=false)]
        public int? OldConfigBitmask { get; set; }


        /// <summary>
        /// Quantity of the item being acted upon
        /// </summary>
        /// <value>Quantity of the item being acted upon</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Type ID of the item being acted upon
        /// </summary>
        /// <value>Type ID of the item being acted upon</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdContainersLogs200Ok {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
            sb.Append("  ContainerTypeId: ").Append(ContainerTypeId).Append("\n");
            sb.Append("  LocationFlag: ").Append(LocationFlag).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LoggedAt: ").Append(LoggedAt).Append("\n");
            sb.Append("  NewConfigBitmask: ").Append(NewConfigBitmask).Append("\n");
            sb.Append("  OldConfigBitmask: ").Append(OldConfigBitmask).Append("\n");
            sb.Append("  PasswordType: ").Append(PasswordType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdContainersLogs200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdContainersLogs200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdContainersLogs200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdContainersLogs200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.ContainerId == input.ContainerId ||
                    (this.ContainerId != null &&
                    this.ContainerId.Equals(input.ContainerId))
                ) && 
                (
                    this.ContainerTypeId == input.ContainerTypeId ||
                    (this.ContainerTypeId != null &&
                    this.ContainerTypeId.Equals(input.ContainerTypeId))
                ) && 
                (
                    this.LocationFlag == input.LocationFlag ||
                    (this.LocationFlag != null &&
                    this.LocationFlag.Equals(input.LocationFlag))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.LoggedAt == input.LoggedAt ||
                    (this.LoggedAt != null &&
                    this.LoggedAt.Equals(input.LoggedAt))
                ) && 
                (
                    this.NewConfigBitmask == input.NewConfigBitmask ||
                    (this.NewConfigBitmask != null &&
                    this.NewConfigBitmask.Equals(input.NewConfigBitmask))
                ) && 
                (
                    this.OldConfigBitmask == input.OldConfigBitmask ||
                    (this.OldConfigBitmask != null &&
                    this.OldConfigBitmask.Equals(input.OldConfigBitmask))
                ) && 
                (
                    this.PasswordType == input.PasswordType ||
                    (this.PasswordType != null &&
                    this.PasswordType.Equals(input.PasswordType))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.ContainerId != null)
                    hashCode = hashCode * 59 + this.ContainerId.GetHashCode();
                if (this.ContainerTypeId != null)
                    hashCode = hashCode * 59 + this.ContainerTypeId.GetHashCode();
                if (this.LocationFlag != null)
                    hashCode = hashCode * 59 + this.LocationFlag.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.LoggedAt != null)
                    hashCode = hashCode * 59 + this.LoggedAt.GetHashCode();
                if (this.NewConfigBitmask != null)
                    hashCode = hashCode * 59 + this.NewConfigBitmask.GetHashCode();
                if (this.OldConfigBitmask != null)
                    hashCode = hashCode * 59 + this.OldConfigBitmask.GetHashCode();
                if (this.PasswordType != null)
                    hashCode = hashCode * 59 + this.PasswordType.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
