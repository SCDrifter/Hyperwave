/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdWalletsDivisionJournal200Ok :  IEquatable<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>, IValidatableObject
    {
        /// <summary>
        /// The type of the given context_id if present
        /// </summary>
        /// <value>The type of the given context_id if present</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContextIdTypeEnum
        {
            
            /// <summary>
            /// Enum Structureid for "structure_id"
            /// </summary>
            [EnumMember(Value = "structure_id")]
            Structureid,
            
            /// <summary>
            /// Enum Stationid for "station_id"
            /// </summary>
            [EnumMember(Value = "station_id")]
            Stationid,
            
            /// <summary>
            /// Enum Markettransactionid for "market_transaction_id"
            /// </summary>
            [EnumMember(Value = "market_transaction_id")]
            Markettransactionid,
            
            /// <summary>
            /// Enum Characterid for "character_id"
            /// </summary>
            [EnumMember(Value = "character_id")]
            Characterid,
            
            /// <summary>
            /// Enum Corporationid for "corporation_id"
            /// </summary>
            [EnumMember(Value = "corporation_id")]
            Corporationid,
            
            /// <summary>
            /// Enum Allianceid for "alliance_id"
            /// </summary>
            [EnumMember(Value = "alliance_id")]
            Allianceid,
            
            /// <summary>
            /// Enum Evesystem for "eve_system"
            /// </summary>
            [EnumMember(Value = "eve_system")]
            Evesystem,
            
            /// <summary>
            /// Enum Industryjobid for "industry_job_id"
            /// </summary>
            [EnumMember(Value = "industry_job_id")]
            Industryjobid,
            
            /// <summary>
            /// Enum Contractid for "contract_id"
            /// </summary>
            [EnumMember(Value = "contract_id")]
            Contractid,
            
            /// <summary>
            /// Enum Planetid for "planet_id"
            /// </summary>
            [EnumMember(Value = "planet_id")]
            Planetid,
            
            /// <summary>
            /// Enum Systemid for "system_id"
            /// </summary>
            [EnumMember(Value = "system_id")]
            Systemid,
            
            /// <summary>
            /// Enum Typeid for "type_id"
            /// </summary>
            [EnumMember(Value = "type_id")]
            Typeid
        }

        /// <summary>
        /// \&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py\&quot;
        /// </summary>
        /// <value>\&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefTypeEnum
        {
            
            /// <summary>
            /// Enum Accelerationgatefee for "acceleration_gate_fee"
            /// </summary>
            [EnumMember(Value = "acceleration_gate_fee")]
            Accelerationgatefee,
            
            /// <summary>
            /// Enum Advertisementlistingfee for "advertisement_listing_fee"
            /// </summary>
            [EnumMember(Value = "advertisement_listing_fee")]
            Advertisementlistingfee,
            
            /// <summary>
            /// Enum Agentdonation for "agent_donation"
            /// </summary>
            [EnumMember(Value = "agent_donation")]
            Agentdonation,
            
            /// <summary>
            /// Enum Agentlocationservices for "agent_location_services"
            /// </summary>
            [EnumMember(Value = "agent_location_services")]
            Agentlocationservices,
            
            /// <summary>
            /// Enum Agentmiscellaneous for "agent_miscellaneous"
            /// </summary>
            [EnumMember(Value = "agent_miscellaneous")]
            Agentmiscellaneous,
            
            /// <summary>
            /// Enum Agentmissioncollateralpaid for "agent_mission_collateral_paid"
            /// </summary>
            [EnumMember(Value = "agent_mission_collateral_paid")]
            Agentmissioncollateralpaid,
            
            /// <summary>
            /// Enum Agentmissioncollateralrefunded for "agent_mission_collateral_refunded"
            /// </summary>
            [EnumMember(Value = "agent_mission_collateral_refunded")]
            Agentmissioncollateralrefunded,
            
            /// <summary>
            /// Enum Agentmissionreward for "agent_mission_reward"
            /// </summary>
            [EnumMember(Value = "agent_mission_reward")]
            Agentmissionreward,
            
            /// <summary>
            /// Enum Agentmissionrewardcorporationtax for "agent_mission_reward_corporation_tax"
            /// </summary>
            [EnumMember(Value = "agent_mission_reward_corporation_tax")]
            Agentmissionrewardcorporationtax,
            
            /// <summary>
            /// Enum Agentmissiontimebonusreward for "agent_mission_time_bonus_reward"
            /// </summary>
            [EnumMember(Value = "agent_mission_time_bonus_reward")]
            Agentmissiontimebonusreward,
            
            /// <summary>
            /// Enum Agentmissiontimebonusrewardcorporationtax for "agent_mission_time_bonus_reward_corporation_tax"
            /// </summary>
            [EnumMember(Value = "agent_mission_time_bonus_reward_corporation_tax")]
            Agentmissiontimebonusrewardcorporationtax,
            
            /// <summary>
            /// Enum Agentsecurityservices for "agent_security_services"
            /// </summary>
            [EnumMember(Value = "agent_security_services")]
            Agentsecurityservices,
            
            /// <summary>
            /// Enum Agentservicesrendered for "agent_services_rendered"
            /// </summary>
            [EnumMember(Value = "agent_services_rendered")]
            Agentservicesrendered,
            
            /// <summary>
            /// Enum Agentspreward for "agents_preward"
            /// </summary>
            [EnumMember(Value = "agents_preward")]
            Agentspreward,
            
            /// <summary>
            /// Enum Alliancemaintainancefee for "alliance_maintainance_fee"
            /// </summary>
            [EnumMember(Value = "alliance_maintainance_fee")]
            Alliancemaintainancefee,
            
            /// <summary>
            /// Enum Allianceregistrationfee for "alliance_registration_fee"
            /// </summary>
            [EnumMember(Value = "alliance_registration_fee")]
            Allianceregistrationfee,
            
            /// <summary>
            /// Enum Assetsafetyrecoverytax for "asset_safety_recovery_tax"
            /// </summary>
            [EnumMember(Value = "asset_safety_recovery_tax")]
            Assetsafetyrecoverytax,
            
            /// <summary>
            /// Enum Bounty for "bounty"
            /// </summary>
            [EnumMember(Value = "bounty")]
            Bounty,
            
            /// <summary>
            /// Enum Bountyprize for "bounty_prize"
            /// </summary>
            [EnumMember(Value = "bounty_prize")]
            Bountyprize,
            
            /// <summary>
            /// Enum Bountyprizecorporationtax for "bounty_prize_corporation_tax"
            /// </summary>
            [EnumMember(Value = "bounty_prize_corporation_tax")]
            Bountyprizecorporationtax,
            
            /// <summary>
            /// Enum Bountyprizes for "bounty_prizes"
            /// </summary>
            [EnumMember(Value = "bounty_prizes")]
            Bountyprizes,
            
            /// <summary>
            /// Enum Bountyreimbursement for "bounty_reimbursement"
            /// </summary>
            [EnumMember(Value = "bounty_reimbursement")]
            Bountyreimbursement,
            
            /// <summary>
            /// Enum Bountysurcharge for "bounty_surcharge"
            /// </summary>
            [EnumMember(Value = "bounty_surcharge")]
            Bountysurcharge,
            
            /// <summary>
            /// Enum Brokersfee for "brokers_fee"
            /// </summary>
            [EnumMember(Value = "brokers_fee")]
            Brokersfee,
            
            /// <summary>
            /// Enum Cloneactivation for "clone_activation"
            /// </summary>
            [EnumMember(Value = "clone_activation")]
            Cloneactivation,
            
            /// <summary>
            /// Enum Clonetransfer for "clone_transfer"
            /// </summary>
            [EnumMember(Value = "clone_transfer")]
            Clonetransfer,
            
            /// <summary>
            /// Enum Contrabandfine for "contraband_fine"
            /// </summary>
            [EnumMember(Value = "contraband_fine")]
            Contrabandfine,
            
            /// <summary>
            /// Enum Contractauctionbid for "contract_auction_bid"
            /// </summary>
            [EnumMember(Value = "contract_auction_bid")]
            Contractauctionbid,
            
            /// <summary>
            /// Enum Contractauctionbidcorp for "contract_auction_bid_corp"
            /// </summary>
            [EnumMember(Value = "contract_auction_bid_corp")]
            Contractauctionbidcorp,
            
            /// <summary>
            /// Enum Contractauctionbidrefund for "contract_auction_bid_refund"
            /// </summary>
            [EnumMember(Value = "contract_auction_bid_refund")]
            Contractauctionbidrefund,
            
            /// <summary>
            /// Enum Contractauctionsold for "contract_auction_sold"
            /// </summary>
            [EnumMember(Value = "contract_auction_sold")]
            Contractauctionsold,
            
            /// <summary>
            /// Enum Contractbrokersfee for "contract_brokers_fee"
            /// </summary>
            [EnumMember(Value = "contract_brokers_fee")]
            Contractbrokersfee,
            
            /// <summary>
            /// Enum Contractbrokersfeecorp for "contract_brokers_fee_corp"
            /// </summary>
            [EnumMember(Value = "contract_brokers_fee_corp")]
            Contractbrokersfeecorp,
            
            /// <summary>
            /// Enum Contractcollateral for "contract_collateral"
            /// </summary>
            [EnumMember(Value = "contract_collateral")]
            Contractcollateral,
            
            /// <summary>
            /// Enum Contractcollateraldepositedcorp for "contract_collateral_deposited_corp"
            /// </summary>
            [EnumMember(Value = "contract_collateral_deposited_corp")]
            Contractcollateraldepositedcorp,
            
            /// <summary>
            /// Enum Contractcollateralpayout for "contract_collateral_payout"
            /// </summary>
            [EnumMember(Value = "contract_collateral_payout")]
            Contractcollateralpayout,
            
            /// <summary>
            /// Enum Contractcollateralrefund for "contract_collateral_refund"
            /// </summary>
            [EnumMember(Value = "contract_collateral_refund")]
            Contractcollateralrefund,
            
            /// <summary>
            /// Enum Contractdeposit for "contract_deposit"
            /// </summary>
            [EnumMember(Value = "contract_deposit")]
            Contractdeposit,
            
            /// <summary>
            /// Enum Contractdepositcorp for "contract_deposit_corp"
            /// </summary>
            [EnumMember(Value = "contract_deposit_corp")]
            Contractdepositcorp,
            
            /// <summary>
            /// Enum Contractdepositrefund for "contract_deposit_refund"
            /// </summary>
            [EnumMember(Value = "contract_deposit_refund")]
            Contractdepositrefund,
            
            /// <summary>
            /// Enum Contractdepositsalestax for "contract_deposit_sales_tax"
            /// </summary>
            [EnumMember(Value = "contract_deposit_sales_tax")]
            Contractdepositsalestax,
            
            /// <summary>
            /// Enum Contractprice for "contract_price"
            /// </summary>
            [EnumMember(Value = "contract_price")]
            Contractprice,
            
            /// <summary>
            /// Enum Contractpricepaymentcorp for "contract_price_payment_corp"
            /// </summary>
            [EnumMember(Value = "contract_price_payment_corp")]
            Contractpricepaymentcorp,
            
            /// <summary>
            /// Enum Contractreversal for "contract_reversal"
            /// </summary>
            [EnumMember(Value = "contract_reversal")]
            Contractreversal,
            
            /// <summary>
            /// Enum Contractreward for "contract_reward"
            /// </summary>
            [EnumMember(Value = "contract_reward")]
            Contractreward,
            
            /// <summary>
            /// Enum Contractrewarddeposited for "contract_reward_deposited"
            /// </summary>
            [EnumMember(Value = "contract_reward_deposited")]
            Contractrewarddeposited,
            
            /// <summary>
            /// Enum Contractrewarddepositedcorp for "contract_reward_deposited_corp"
            /// </summary>
            [EnumMember(Value = "contract_reward_deposited_corp")]
            Contractrewarddepositedcorp,
            
            /// <summary>
            /// Enum Contractrewardrefund for "contract_reward_refund"
            /// </summary>
            [EnumMember(Value = "contract_reward_refund")]
            Contractrewardrefund,
            
            /// <summary>
            /// Enum Contractsalestax for "contract_sales_tax"
            /// </summary>
            [EnumMember(Value = "contract_sales_tax")]
            Contractsalestax,
            
            /// <summary>
            /// Enum Copying for "copying"
            /// </summary>
            [EnumMember(Value = "copying")]
            Copying,
            
            /// <summary>
            /// Enum Corporaterewardpayout for "corporate_reward_payout"
            /// </summary>
            [EnumMember(Value = "corporate_reward_payout")]
            Corporaterewardpayout,
            
            /// <summary>
            /// Enum Corporaterewardtax for "corporate_reward_tax"
            /// </summary>
            [EnumMember(Value = "corporate_reward_tax")]
            Corporaterewardtax,
            
            /// <summary>
            /// Enum Corporationaccountwithdrawal for "corporation_account_withdrawal"
            /// </summary>
            [EnumMember(Value = "corporation_account_withdrawal")]
            Corporationaccountwithdrawal,
            
            /// <summary>
            /// Enum Corporationbulkpayment for "corporation_bulk_payment"
            /// </summary>
            [EnumMember(Value = "corporation_bulk_payment")]
            Corporationbulkpayment,
            
            /// <summary>
            /// Enum Corporationdividendpayment for "corporation_dividend_payment"
            /// </summary>
            [EnumMember(Value = "corporation_dividend_payment")]
            Corporationdividendpayment,
            
            /// <summary>
            /// Enum Corporationliquidation for "corporation_liquidation"
            /// </summary>
            [EnumMember(Value = "corporation_liquidation")]
            Corporationliquidation,
            
            /// <summary>
            /// Enum Corporationlogochangecost for "corporation_logo_change_cost"
            /// </summary>
            [EnumMember(Value = "corporation_logo_change_cost")]
            Corporationlogochangecost,
            
            /// <summary>
            /// Enum Corporationpayment for "corporation_payment"
            /// </summary>
            [EnumMember(Value = "corporation_payment")]
            Corporationpayment,
            
            /// <summary>
            /// Enum Corporationregistrationfee for "corporation_registration_fee"
            /// </summary>
            [EnumMember(Value = "corporation_registration_fee")]
            Corporationregistrationfee,
            
            /// <summary>
            /// Enum Couriermissionescrow for "courier_mission_escrow"
            /// </summary>
            [EnumMember(Value = "courier_mission_escrow")]
            Couriermissionescrow,
            
            /// <summary>
            /// Enum Cspa for "cspa"
            /// </summary>
            [EnumMember(Value = "cspa")]
            Cspa,
            
            /// <summary>
            /// Enum Cspaofflinerefund for "cspaofflinerefund"
            /// </summary>
            [EnumMember(Value = "cspaofflinerefund")]
            Cspaofflinerefund,
            
            /// <summary>
            /// Enum Datacorefee for "datacore_fee"
            /// </summary>
            [EnumMember(Value = "datacore_fee")]
            Datacorefee,
            
            /// <summary>
            /// Enum Dnamodificationfee for "dna_modification_fee"
            /// </summary>
            [EnumMember(Value = "dna_modification_fee")]
            Dnamodificationfee,
            
            /// <summary>
            /// Enum Dockingfee for "docking_fee"
            /// </summary>
            [EnumMember(Value = "docking_fee")]
            Dockingfee,
            
            /// <summary>
            /// Enum Duelwagerescrow for "duel_wager_escrow"
            /// </summary>
            [EnumMember(Value = "duel_wager_escrow")]
            Duelwagerescrow,
            
            /// <summary>
            /// Enum Duelwagerpayment for "duel_wager_payment"
            /// </summary>
            [EnumMember(Value = "duel_wager_payment")]
            Duelwagerpayment,
            
            /// <summary>
            /// Enum Duelwagerrefund for "duel_wager_refund"
            /// </summary>
            [EnumMember(Value = "duel_wager_refund")]
            Duelwagerrefund,
            
            /// <summary>
            /// Enum Factoryslotrentalfee for "factory_slot_rental_fee"
            /// </summary>
            [EnumMember(Value = "factory_slot_rental_fee")]
            Factoryslotrentalfee,
            
            /// <summary>
            /// Enum Gmcashtransfer for "gm_cash_transfer"
            /// </summary>
            [EnumMember(Value = "gm_cash_transfer")]
            Gmcashtransfer,
            
            /// <summary>
            /// Enum Industryjobtax for "industry_job_tax"
            /// </summary>
            [EnumMember(Value = "industry_job_tax")]
            Industryjobtax,
            
            /// <summary>
            /// Enum Infrastructurehubmaintenance for "infrastructure_hub_maintenance"
            /// </summary>
            [EnumMember(Value = "infrastructure_hub_maintenance")]
            Infrastructurehubmaintenance,
            
            /// <summary>
            /// Enum Inheritance for "inheritance"
            /// </summary>
            [EnumMember(Value = "inheritance")]
            Inheritance,
            
            /// <summary>
            /// Enum Insurance for "insurance"
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance,
            
            /// <summary>
            /// Enum Jumpcloneactivationfee for "jump_clone_activation_fee"
            /// </summary>
            [EnumMember(Value = "jump_clone_activation_fee")]
            Jumpcloneactivationfee,
            
            /// <summary>
            /// Enum Jumpcloneinstallationfee for "jump_clone_installation_fee"
            /// </summary>
            [EnumMember(Value = "jump_clone_installation_fee")]
            Jumpcloneinstallationfee,
            
            /// <summary>
            /// Enum Killrightfee for "kill_right_fee"
            /// </summary>
            [EnumMember(Value = "kill_right_fee")]
            Killrightfee,
            
            /// <summary>
            /// Enum Lpstore for "lp_store"
            /// </summary>
            [EnumMember(Value = "lp_store")]
            Lpstore,
            
            /// <summary>
            /// Enum Manufacturing for "manufacturing"
            /// </summary>
            [EnumMember(Value = "manufacturing")]
            Manufacturing,
            
            /// <summary>
            /// Enum Marketescrow for "market_escrow"
            /// </summary>
            [EnumMember(Value = "market_escrow")]
            Marketescrow,
            
            /// <summary>
            /// Enum Marketfinepaid for "market_fine_paid"
            /// </summary>
            [EnumMember(Value = "market_fine_paid")]
            Marketfinepaid,
            
            /// <summary>
            /// Enum Markettransaction for "market_transaction"
            /// </summary>
            [EnumMember(Value = "market_transaction")]
            Markettransaction,
            
            /// <summary>
            /// Enum Medalcreation for "medal_creation"
            /// </summary>
            [EnumMember(Value = "medal_creation")]
            Medalcreation,
            
            /// <summary>
            /// Enum Medalissued for "medal_issued"
            /// </summary>
            [EnumMember(Value = "medal_issued")]
            Medalissued,
            
            /// <summary>
            /// Enum Missioncompletion for "mission_completion"
            /// </summary>
            [EnumMember(Value = "mission_completion")]
            Missioncompletion,
            
            /// <summary>
            /// Enum Missioncost for "mission_cost"
            /// </summary>
            [EnumMember(Value = "mission_cost")]
            Missioncost,
            
            /// <summary>
            /// Enum Missionexpiration for "mission_expiration"
            /// </summary>
            [EnumMember(Value = "mission_expiration")]
            Missionexpiration,
            
            /// <summary>
            /// Enum Missionreward for "mission_reward"
            /// </summary>
            [EnumMember(Value = "mission_reward")]
            Missionreward,
            
            /// <summary>
            /// Enum Officerentalfee for "office_rental_fee"
            /// </summary>
            [EnumMember(Value = "office_rental_fee")]
            Officerentalfee,
            
            /// <summary>
            /// Enum Operationbonus for "operation_bonus"
            /// </summary>
            [EnumMember(Value = "operation_bonus")]
            Operationbonus,
            
            /// <summary>
            /// Enum Opportunityreward for "opportunity_reward"
            /// </summary>
            [EnumMember(Value = "opportunity_reward")]
            Opportunityreward,
            
            /// <summary>
            /// Enum Planetaryconstruction for "planetary_construction"
            /// </summary>
            [EnumMember(Value = "planetary_construction")]
            Planetaryconstruction,
            
            /// <summary>
            /// Enum Planetaryexporttax for "planetary_export_tax"
            /// </summary>
            [EnumMember(Value = "planetary_export_tax")]
            Planetaryexporttax,
            
            /// <summary>
            /// Enum Planetaryimporttax for "planetary_import_tax"
            /// </summary>
            [EnumMember(Value = "planetary_import_tax")]
            Planetaryimporttax,
            
            /// <summary>
            /// Enum Playerdonation for "player_donation"
            /// </summary>
            [EnumMember(Value = "player_donation")]
            Playerdonation,
            
            /// <summary>
            /// Enum Playertrading for "player_trading"
            /// </summary>
            [EnumMember(Value = "player_trading")]
            Playertrading,
            
            /// <summary>
            /// Enum Projectdiscoveryreward for "project_discovery_reward"
            /// </summary>
            [EnumMember(Value = "project_discovery_reward")]
            Projectdiscoveryreward,
            
            /// <summary>
            /// Enum Projectdiscoverytax for "project_discovery_tax"
            /// </summary>
            [EnumMember(Value = "project_discovery_tax")]
            Projectdiscoverytax,
            
            /// <summary>
            /// Enum Reaction for "reaction"
            /// </summary>
            [EnumMember(Value = "reaction")]
            Reaction,
            
            /// <summary>
            /// Enum Releaseofimpoundedproperty for "release_of_impounded_property"
            /// </summary>
            [EnumMember(Value = "release_of_impounded_property")]
            Releaseofimpoundedproperty,
            
            /// <summary>
            /// Enum Repairbill for "repair_bill"
            /// </summary>
            [EnumMember(Value = "repair_bill")]
            Repairbill,
            
            /// <summary>
            /// Enum Reprocessingtax for "reprocessing_tax"
            /// </summary>
            [EnumMember(Value = "reprocessing_tax")]
            Reprocessingtax,
            
            /// <summary>
            /// Enum Researchingmaterialproductivity for "researching_material_productivity"
            /// </summary>
            [EnumMember(Value = "researching_material_productivity")]
            Researchingmaterialproductivity,
            
            /// <summary>
            /// Enum Researchingtechnology for "researching_technology"
            /// </summary>
            [EnumMember(Value = "researching_technology")]
            Researchingtechnology,
            
            /// <summary>
            /// Enum Researchingtimeproductivity for "researching_time_productivity"
            /// </summary>
            [EnumMember(Value = "researching_time_productivity")]
            Researchingtimeproductivity,
            
            /// <summary>
            /// Enum Resourcewarsreward for "resource_wars_reward"
            /// </summary>
            [EnumMember(Value = "resource_wars_reward")]
            Resourcewarsreward,
            
            /// <summary>
            /// Enum Reverseengineering for "reverse_engineering"
            /// </summary>
            [EnumMember(Value = "reverse_engineering")]
            Reverseengineering,
            
            /// <summary>
            /// Enum Securityprocessingfee for "security_processing_fee"
            /// </summary>
            [EnumMember(Value = "security_processing_fee")]
            Securityprocessingfee,
            
            /// <summary>
            /// Enum Shares for "shares"
            /// </summary>
            [EnumMember(Value = "shares")]
            Shares,
            
            /// <summary>
            /// Enum Sovereignitybill for "sovereignity_bill"
            /// </summary>
            [EnumMember(Value = "sovereignity_bill")]
            Sovereignitybill,
            
            /// <summary>
            /// Enum Storepurchase for "store_purchase"
            /// </summary>
            [EnumMember(Value = "store_purchase")]
            Storepurchase,
            
            /// <summary>
            /// Enum Storepurchaserefund for "store_purchase_refund"
            /// </summary>
            [EnumMember(Value = "store_purchase_refund")]
            Storepurchaserefund,
            
            /// <summary>
            /// Enum Structuregatejump for "structure_gate_jump"
            /// </summary>
            [EnumMember(Value = "structure_gate_jump")]
            Structuregatejump,
            
            /// <summary>
            /// Enum Transactiontax for "transaction_tax"
            /// </summary>
            [EnumMember(Value = "transaction_tax")]
            Transactiontax,
            
            /// <summary>
            /// Enum Upkeepadjustmentfee for "upkeep_adjustment_fee"
            /// </summary>
            [EnumMember(Value = "upkeep_adjustment_fee")]
            Upkeepadjustmentfee,
            
            /// <summary>
            /// Enum Warallycontract for "war_ally_contract"
            /// </summary>
            [EnumMember(Value = "war_ally_contract")]
            Warallycontract,
            
            /// <summary>
            /// Enum Warfee for "war_fee"
            /// </summary>
            [EnumMember(Value = "war_fee")]
            Warfee,
            
            /// <summary>
            /// Enum Warfeesurrender for "war_fee_surrender"
            /// </summary>
            [EnumMember(Value = "war_fee_surrender")]
            Warfeesurrender
        }

        /// <summary>
        /// The type of the given context_id if present
        /// </summary>
        /// <value>The type of the given context_id if present</value>
        [DataMember(Name="context_id_type", EmitDefaultValue=false)]
        public ContextIdTypeEnum? ContextIdType { get; set; }
        /// <summary>
        /// \&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py\&quot;
        /// </summary>
        /// <value>\&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py\&quot;</value>
        [DataMember(Name="ref_type", EmitDefaultValue=false)]
        public RefTypeEnum? RefType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdWalletsDivisionJournal200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdWalletsDivisionJournal200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdWalletsDivisionJournal200Ok" /> class.
        /// </summary>
        /// <param name="Amount">The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn.</param>
        /// <param name="Balance">Wallet balance after transaction occurred.</param>
        /// <param name="ContextId">An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id.</param>
        /// <param name="ContextIdType">The type of the given context_id if present.</param>
        /// <param name="Date">Date and time of transaction (required).</param>
        /// <param name="Description">The reason for the transaction, mirrors what is seen in the client (required).</param>
        /// <param name="FirstPartyId">The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name.</param>
        /// <param name="Id">Unique journal reference ID (required).</param>
        /// <param name="Reason">The user stated reason for the transaction. Only applies to some ref_types.</param>
        /// <param name="RefType">\&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py\&quot; (required).</param>
        /// <param name="SecondPartyId">The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name.</param>
        /// <param name="Tax">Tax amount received. Only applies to tax related transactions.</param>
        /// <param name="TaxReceiverId">The corporation ID receiving any tax paid. Only applies to tax related transactions.</param>
        public GetCorporationsCorporationIdWalletsDivisionJournal200Ok(double? Amount = default(double?), double? Balance = default(double?), long? ContextId = default(long?), ContextIdTypeEnum? ContextIdType = default(ContextIdTypeEnum?), DateTime? Date = default(DateTime?), string Description = default(string), int? FirstPartyId = default(int?), long? Id = default(long?), string Reason = default(string), RefTypeEnum? RefType = default(RefTypeEnum?), int? SecondPartyId = default(int?), double? Tax = default(double?), int? TaxReceiverId = default(int?))
        {
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for GetCorporationsCorporationIdWalletsDivisionJournal200Ok and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for GetCorporationsCorporationIdWalletsDivisionJournal200Ok and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for GetCorporationsCorporationIdWalletsDivisionJournal200Ok and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "RefType" is required (not null)
            if (RefType == null)
            {
                throw new InvalidDataException("RefType is a required property for GetCorporationsCorporationIdWalletsDivisionJournal200Ok and cannot be null");
            }
            else
            {
                this.RefType = RefType;
            }
            this.Amount = Amount;
            this.Balance = Balance;
            this.ContextId = ContextId;
            this.ContextIdType = ContextIdType;
            this.FirstPartyId = FirstPartyId;
            this.Reason = Reason;
            this.SecondPartyId = SecondPartyId;
            this.Tax = Tax;
            this.TaxReceiverId = TaxReceiverId;
        }
        
        /// <summary>
        /// The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
        /// </summary>
        /// <value>The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Wallet balance after transaction occurred
        /// </summary>
        /// <value>Wallet balance after transaction occurred</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public double? Balance { get; set; }

        /// <summary>
        /// An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
        /// </summary>
        /// <value>An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id</value>
        [DataMember(Name="context_id", EmitDefaultValue=false)]
        public long? ContextId { get; set; }


        /// <summary>
        /// Date and time of transaction
        /// </summary>
        /// <value>Date and time of transaction</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The reason for the transaction, mirrors what is seen in the client
        /// </summary>
        /// <value>The reason for the transaction, mirrors what is seen in the client</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
        /// </summary>
        /// <value>The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name</value>
        [DataMember(Name="first_party_id", EmitDefaultValue=false)]
        public int? FirstPartyId { get; set; }

        /// <summary>
        /// Unique journal reference ID
        /// </summary>
        /// <value>Unique journal reference ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The user stated reason for the transaction. Only applies to some ref_types
        /// </summary>
        /// <value>The user stated reason for the transaction. Only applies to some ref_types</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }


        /// <summary>
        /// The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
        /// </summary>
        /// <value>The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name</value>
        [DataMember(Name="second_party_id", EmitDefaultValue=false)]
        public int? SecondPartyId { get; set; }

        /// <summary>
        /// Tax amount received. Only applies to tax related transactions
        /// </summary>
        /// <value>Tax amount received. Only applies to tax related transactions</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }

        /// <summary>
        /// The corporation ID receiving any tax paid. Only applies to tax related transactions
        /// </summary>
        /// <value>The corporation ID receiving any tax paid. Only applies to tax related transactions</value>
        [DataMember(Name="tax_receiver_id", EmitDefaultValue=false)]
        public int? TaxReceiverId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdWalletsDivisionJournal200Ok {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  ContextIdType: ").Append(ContextIdType).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FirstPartyId: ").Append(FirstPartyId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RefType: ").Append(RefType).Append("\n");
            sb.Append("  SecondPartyId: ").Append(SecondPartyId).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TaxReceiverId: ").Append(TaxReceiverId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdWalletsDivisionJournal200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdWalletsDivisionJournal200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdWalletsDivisionJournal200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdWalletsDivisionJournal200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.ContextId == input.ContextId ||
                    (this.ContextId != null &&
                    this.ContextId.Equals(input.ContextId))
                ) && 
                (
                    this.ContextIdType == input.ContextIdType ||
                    (this.ContextIdType != null &&
                    this.ContextIdType.Equals(input.ContextIdType))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FirstPartyId == input.FirstPartyId ||
                    (this.FirstPartyId != null &&
                    this.FirstPartyId.Equals(input.FirstPartyId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.RefType == input.RefType ||
                    (this.RefType != null &&
                    this.RefType.Equals(input.RefType))
                ) && 
                (
                    this.SecondPartyId == input.SecondPartyId ||
                    (this.SecondPartyId != null &&
                    this.SecondPartyId.Equals(input.SecondPartyId))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.TaxReceiverId == input.TaxReceiverId ||
                    (this.TaxReceiverId != null &&
                    this.TaxReceiverId.Equals(input.TaxReceiverId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.ContextId != null)
                    hashCode = hashCode * 59 + this.ContextId.GetHashCode();
                if (this.ContextIdType != null)
                    hashCode = hashCode * 59 + this.ContextIdType.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FirstPartyId != null)
                    hashCode = hashCode * 59 + this.FirstPartyId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.RefType != null)
                    hashCode = hashCode * 59 + this.RefType.GetHashCode();
                if (this.SecondPartyId != null)
                    hashCode = hashCode * 59 + this.SecondPartyId.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.TaxReceiverId != null)
                    hashCode = hashCode * 59 + this.TaxReceiverId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
