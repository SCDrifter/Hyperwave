/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// extractor_details object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails :  IEquatable<GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails" /> class.
        /// </summary>
        /// <param name="CycleTime">in seconds.</param>
        /// <param name="HeadRadius">head_radius number.</param>
        /// <param name="Heads">heads array (required).</param>
        /// <param name="ProductTypeId">product_type_id integer.</param>
        /// <param name="QtyPerCycle">qty_per_cycle integer.</param>
        public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails(int? CycleTime = default(int?), float? HeadRadius = default(float?), List<GetCharactersCharacterIdPlanetsPlanetIdHead> Heads = default(List<GetCharactersCharacterIdPlanetsPlanetIdHead>), int? ProductTypeId = default(int?), int? QtyPerCycle = default(int?))
        {
            // to ensure "Heads" is required (not null)
            if (Heads == null)
            {
                throw new InvalidDataException("Heads is a required property for GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails and cannot be null");
            }
            else
            {
                this.Heads = Heads;
            }
            this.CycleTime = CycleTime;
            this.HeadRadius = HeadRadius;
            this.ProductTypeId = ProductTypeId;
            this.QtyPerCycle = QtyPerCycle;
        }
        
        /// <summary>
        /// in seconds
        /// </summary>
        /// <value>in seconds</value>
        [DataMember(Name="cycle_time", EmitDefaultValue=false)]
        public int? CycleTime { get; set; }

        /// <summary>
        /// head_radius number
        /// </summary>
        /// <value>head_radius number</value>
        [DataMember(Name="head_radius", EmitDefaultValue=false)]
        public float? HeadRadius { get; set; }

        /// <summary>
        /// heads array
        /// </summary>
        /// <value>heads array</value>
        [DataMember(Name="heads", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdPlanetsPlanetIdHead> Heads { get; set; }

        /// <summary>
        /// product_type_id integer
        /// </summary>
        /// <value>product_type_id integer</value>
        [DataMember(Name="product_type_id", EmitDefaultValue=false)]
        public int? ProductTypeId { get; set; }

        /// <summary>
        /// qty_per_cycle integer
        /// </summary>
        /// <value>qty_per_cycle integer</value>
        [DataMember(Name="qty_per_cycle", EmitDefaultValue=false)]
        public int? QtyPerCycle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {\n");
            sb.Append("  CycleTime: ").Append(CycleTime).Append("\n");
            sb.Append("  HeadRadius: ").Append(HeadRadius).Append("\n");
            sb.Append("  Heads: ").Append(Heads).Append("\n");
            sb.Append("  ProductTypeId: ").Append(ProductTypeId).Append("\n");
            sb.Append("  QtyPerCycle: ").Append(QtyPerCycle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CycleTime == input.CycleTime ||
                    (this.CycleTime != null &&
                    this.CycleTime.Equals(input.CycleTime))
                ) && 
                (
                    this.HeadRadius == input.HeadRadius ||
                    (this.HeadRadius != null &&
                    this.HeadRadius.Equals(input.HeadRadius))
                ) && 
                (
                    this.Heads == input.Heads ||
                    (this.Heads != null &&
                    this.Heads.SequenceEqual(input.Heads))
                ) && 
                (
                    this.ProductTypeId == input.ProductTypeId ||
                    (this.ProductTypeId != null &&
                    this.ProductTypeId.Equals(input.ProductTypeId))
                ) && 
                (
                    this.QtyPerCycle == input.QtyPerCycle ||
                    (this.QtyPerCycle != null &&
                    this.QtyPerCycle.Equals(input.QtyPerCycle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CycleTime != null)
                    hashCode = hashCode * 59 + this.CycleTime.GetHashCode();
                if (this.HeadRadius != null)
                    hashCode = hashCode * 59 + this.HeadRadius.GetHashCode();
                if (this.Heads != null)
                    hashCode = hashCode * 59 + this.Heads.GetHashCode();
                if (this.ProductTypeId != null)
                    hashCode = hashCode * 59 + this.ProductTypeId.GetHashCode();
                if (this.QtyPerCycle != null)
                    hashCode = hashCode * 59 + this.QtyPerCycle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
