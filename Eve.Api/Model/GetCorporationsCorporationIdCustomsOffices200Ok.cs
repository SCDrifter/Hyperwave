/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdCustomsOffices200Ok :  IEquatable<GetCorporationsCorporationIdCustomsOffices200Ok>, IValidatableObject
    {
        /// <summary>
        /// Access is allowed only for entities with this level of standing or better
        /// </summary>
        /// <value>Access is allowed only for entities with this level of standing or better</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StandingLevelEnum
        {
            
            /// <summary>
            /// Enum Bad for "bad"
            /// </summary>
            [EnumMember(Value = "bad")]
            Bad,
            
            /// <summary>
            /// Enum Excellent for "excellent"
            /// </summary>
            [EnumMember(Value = "excellent")]
            Excellent,
            
            /// <summary>
            /// Enum Good for "good"
            /// </summary>
            [EnumMember(Value = "good")]
            Good,
            
            /// <summary>
            /// Enum Neutral for "neutral"
            /// </summary>
            [EnumMember(Value = "neutral")]
            Neutral,
            
            /// <summary>
            /// Enum Terrible for "terrible"
            /// </summary>
            [EnumMember(Value = "terrible")]
            Terrible
        }

        /// <summary>
        /// Access is allowed only for entities with this level of standing or better
        /// </summary>
        /// <value>Access is allowed only for entities with this level of standing or better</value>
        [DataMember(Name="standing_level", EmitDefaultValue=false)]
        public StandingLevelEnum? StandingLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdCustomsOffices200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdCustomsOffices200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdCustomsOffices200Ok" /> class.
        /// </summary>
        /// <param name="AllianceTaxRate">Only present if alliance access is allowed.</param>
        /// <param name="AllowAccessWithStandings">standing_level and any standing related tax rate only present when this is true (required).</param>
        /// <param name="AllowAllianceAccess">allow_alliance_access boolean (required).</param>
        /// <param name="BadStandingTaxRate">bad_standing_tax_rate number.</param>
        /// <param name="CorporationTaxRate">corporation_tax_rate number.</param>
        /// <param name="ExcellentStandingTaxRate">Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates.</param>
        /// <param name="GoodStandingTaxRate">good_standing_tax_rate number.</param>
        /// <param name="NeutralStandingTaxRate">neutral_standing_tax_rate number.</param>
        /// <param name="OfficeId">unique ID of this customs office (required).</param>
        /// <param name="ReinforceExitEnd">reinforce_exit_end integer (required).</param>
        /// <param name="ReinforceExitStart">Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack (required).</param>
        /// <param name="StandingLevel">Access is allowed only for entities with this level of standing or better.</param>
        /// <param name="SystemId">ID of the solar system this customs office is located in (required).</param>
        /// <param name="TerribleStandingTaxRate">terrible_standing_tax_rate number.</param>
        public GetCorporationsCorporationIdCustomsOffices200Ok(float? AllianceTaxRate = default(float?), bool? AllowAccessWithStandings = default(bool?), bool? AllowAllianceAccess = default(bool?), float? BadStandingTaxRate = default(float?), float? CorporationTaxRate = default(float?), float? ExcellentStandingTaxRate = default(float?), float? GoodStandingTaxRate = default(float?), float? NeutralStandingTaxRate = default(float?), long? OfficeId = default(long?), int? ReinforceExitEnd = default(int?), int? ReinforceExitStart = default(int?), StandingLevelEnum? StandingLevel = default(StandingLevelEnum?), int? SystemId = default(int?), float? TerribleStandingTaxRate = default(float?))
        {
            // to ensure "AllowAccessWithStandings" is required (not null)
            if (AllowAccessWithStandings == null)
            {
                throw new InvalidDataException("AllowAccessWithStandings is a required property for GetCorporationsCorporationIdCustomsOffices200Ok and cannot be null");
            }
            else
            {
                this.AllowAccessWithStandings = AllowAccessWithStandings;
            }
            // to ensure "AllowAllianceAccess" is required (not null)
            if (AllowAllianceAccess == null)
            {
                throw new InvalidDataException("AllowAllianceAccess is a required property for GetCorporationsCorporationIdCustomsOffices200Ok and cannot be null");
            }
            else
            {
                this.AllowAllianceAccess = AllowAllianceAccess;
            }
            // to ensure "OfficeId" is required (not null)
            if (OfficeId == null)
            {
                throw new InvalidDataException("OfficeId is a required property for GetCorporationsCorporationIdCustomsOffices200Ok and cannot be null");
            }
            else
            {
                this.OfficeId = OfficeId;
            }
            // to ensure "ReinforceExitEnd" is required (not null)
            if (ReinforceExitEnd == null)
            {
                throw new InvalidDataException("ReinforceExitEnd is a required property for GetCorporationsCorporationIdCustomsOffices200Ok and cannot be null");
            }
            else
            {
                this.ReinforceExitEnd = ReinforceExitEnd;
            }
            // to ensure "ReinforceExitStart" is required (not null)
            if (ReinforceExitStart == null)
            {
                throw new InvalidDataException("ReinforceExitStart is a required property for GetCorporationsCorporationIdCustomsOffices200Ok and cannot be null");
            }
            else
            {
                this.ReinforceExitStart = ReinforceExitStart;
            }
            // to ensure "SystemId" is required (not null)
            if (SystemId == null)
            {
                throw new InvalidDataException("SystemId is a required property for GetCorporationsCorporationIdCustomsOffices200Ok and cannot be null");
            }
            else
            {
                this.SystemId = SystemId;
            }
            this.AllianceTaxRate = AllianceTaxRate;
            this.BadStandingTaxRate = BadStandingTaxRate;
            this.CorporationTaxRate = CorporationTaxRate;
            this.ExcellentStandingTaxRate = ExcellentStandingTaxRate;
            this.GoodStandingTaxRate = GoodStandingTaxRate;
            this.NeutralStandingTaxRate = NeutralStandingTaxRate;
            this.StandingLevel = StandingLevel;
            this.TerribleStandingTaxRate = TerribleStandingTaxRate;
        }
        
        /// <summary>
        /// Only present if alliance access is allowed
        /// </summary>
        /// <value>Only present if alliance access is allowed</value>
        [DataMember(Name="alliance_tax_rate", EmitDefaultValue=false)]
        public float? AllianceTaxRate { get; set; }

        /// <summary>
        /// standing_level and any standing related tax rate only present when this is true
        /// </summary>
        /// <value>standing_level and any standing related tax rate only present when this is true</value>
        [DataMember(Name="allow_access_with_standings", EmitDefaultValue=false)]
        public bool? AllowAccessWithStandings { get; set; }

        /// <summary>
        /// allow_alliance_access boolean
        /// </summary>
        /// <value>allow_alliance_access boolean</value>
        [DataMember(Name="allow_alliance_access", EmitDefaultValue=false)]
        public bool? AllowAllianceAccess { get; set; }

        /// <summary>
        /// bad_standing_tax_rate number
        /// </summary>
        /// <value>bad_standing_tax_rate number</value>
        [DataMember(Name="bad_standing_tax_rate", EmitDefaultValue=false)]
        public float? BadStandingTaxRate { get; set; }

        /// <summary>
        /// corporation_tax_rate number
        /// </summary>
        /// <value>corporation_tax_rate number</value>
        [DataMember(Name="corporation_tax_rate", EmitDefaultValue=false)]
        public float? CorporationTaxRate { get; set; }

        /// <summary>
        /// Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
        /// </summary>
        /// <value>Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates</value>
        [DataMember(Name="excellent_standing_tax_rate", EmitDefaultValue=false)]
        public float? ExcellentStandingTaxRate { get; set; }

        /// <summary>
        /// good_standing_tax_rate number
        /// </summary>
        /// <value>good_standing_tax_rate number</value>
        [DataMember(Name="good_standing_tax_rate", EmitDefaultValue=false)]
        public float? GoodStandingTaxRate { get; set; }

        /// <summary>
        /// neutral_standing_tax_rate number
        /// </summary>
        /// <value>neutral_standing_tax_rate number</value>
        [DataMember(Name="neutral_standing_tax_rate", EmitDefaultValue=false)]
        public float? NeutralStandingTaxRate { get; set; }

        /// <summary>
        /// unique ID of this customs office
        /// </summary>
        /// <value>unique ID of this customs office</value>
        [DataMember(Name="office_id", EmitDefaultValue=false)]
        public long? OfficeId { get; set; }

        /// <summary>
        /// reinforce_exit_end integer
        /// </summary>
        /// <value>reinforce_exit_end integer</value>
        [DataMember(Name="reinforce_exit_end", EmitDefaultValue=false)]
        public int? ReinforceExitEnd { get; set; }

        /// <summary>
        /// Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
        /// </summary>
        /// <value>Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack</value>
        [DataMember(Name="reinforce_exit_start", EmitDefaultValue=false)]
        public int? ReinforceExitStart { get; set; }


        /// <summary>
        /// ID of the solar system this customs office is located in
        /// </summary>
        /// <value>ID of the solar system this customs office is located in</value>
        [DataMember(Name="system_id", EmitDefaultValue=false)]
        public int? SystemId { get; set; }

        /// <summary>
        /// terrible_standing_tax_rate number
        /// </summary>
        /// <value>terrible_standing_tax_rate number</value>
        [DataMember(Name="terrible_standing_tax_rate", EmitDefaultValue=false)]
        public float? TerribleStandingTaxRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdCustomsOffices200Ok {\n");
            sb.Append("  AllianceTaxRate: ").Append(AllianceTaxRate).Append("\n");
            sb.Append("  AllowAccessWithStandings: ").Append(AllowAccessWithStandings).Append("\n");
            sb.Append("  AllowAllianceAccess: ").Append(AllowAllianceAccess).Append("\n");
            sb.Append("  BadStandingTaxRate: ").Append(BadStandingTaxRate).Append("\n");
            sb.Append("  CorporationTaxRate: ").Append(CorporationTaxRate).Append("\n");
            sb.Append("  ExcellentStandingTaxRate: ").Append(ExcellentStandingTaxRate).Append("\n");
            sb.Append("  GoodStandingTaxRate: ").Append(GoodStandingTaxRate).Append("\n");
            sb.Append("  NeutralStandingTaxRate: ").Append(NeutralStandingTaxRate).Append("\n");
            sb.Append("  OfficeId: ").Append(OfficeId).Append("\n");
            sb.Append("  ReinforceExitEnd: ").Append(ReinforceExitEnd).Append("\n");
            sb.Append("  ReinforceExitStart: ").Append(ReinforceExitStart).Append("\n");
            sb.Append("  StandingLevel: ").Append(StandingLevel).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  TerribleStandingTaxRate: ").Append(TerribleStandingTaxRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdCustomsOffices200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdCustomsOffices200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdCustomsOffices200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdCustomsOffices200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllianceTaxRate == input.AllianceTaxRate ||
                    (this.AllianceTaxRate != null &&
                    this.AllianceTaxRate.Equals(input.AllianceTaxRate))
                ) && 
                (
                    this.AllowAccessWithStandings == input.AllowAccessWithStandings ||
                    (this.AllowAccessWithStandings != null &&
                    this.AllowAccessWithStandings.Equals(input.AllowAccessWithStandings))
                ) && 
                (
                    this.AllowAllianceAccess == input.AllowAllianceAccess ||
                    (this.AllowAllianceAccess != null &&
                    this.AllowAllianceAccess.Equals(input.AllowAllianceAccess))
                ) && 
                (
                    this.BadStandingTaxRate == input.BadStandingTaxRate ||
                    (this.BadStandingTaxRate != null &&
                    this.BadStandingTaxRate.Equals(input.BadStandingTaxRate))
                ) && 
                (
                    this.CorporationTaxRate == input.CorporationTaxRate ||
                    (this.CorporationTaxRate != null &&
                    this.CorporationTaxRate.Equals(input.CorporationTaxRate))
                ) && 
                (
                    this.ExcellentStandingTaxRate == input.ExcellentStandingTaxRate ||
                    (this.ExcellentStandingTaxRate != null &&
                    this.ExcellentStandingTaxRate.Equals(input.ExcellentStandingTaxRate))
                ) && 
                (
                    this.GoodStandingTaxRate == input.GoodStandingTaxRate ||
                    (this.GoodStandingTaxRate != null &&
                    this.GoodStandingTaxRate.Equals(input.GoodStandingTaxRate))
                ) && 
                (
                    this.NeutralStandingTaxRate == input.NeutralStandingTaxRate ||
                    (this.NeutralStandingTaxRate != null &&
                    this.NeutralStandingTaxRate.Equals(input.NeutralStandingTaxRate))
                ) && 
                (
                    this.OfficeId == input.OfficeId ||
                    (this.OfficeId != null &&
                    this.OfficeId.Equals(input.OfficeId))
                ) && 
                (
                    this.ReinforceExitEnd == input.ReinforceExitEnd ||
                    (this.ReinforceExitEnd != null &&
                    this.ReinforceExitEnd.Equals(input.ReinforceExitEnd))
                ) && 
                (
                    this.ReinforceExitStart == input.ReinforceExitStart ||
                    (this.ReinforceExitStart != null &&
                    this.ReinforceExitStart.Equals(input.ReinforceExitStart))
                ) && 
                (
                    this.StandingLevel == input.StandingLevel ||
                    (this.StandingLevel != null &&
                    this.StandingLevel.Equals(input.StandingLevel))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.TerribleStandingTaxRate == input.TerribleStandingTaxRate ||
                    (this.TerribleStandingTaxRate != null &&
                    this.TerribleStandingTaxRate.Equals(input.TerribleStandingTaxRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllianceTaxRate != null)
                    hashCode = hashCode * 59 + this.AllianceTaxRate.GetHashCode();
                if (this.AllowAccessWithStandings != null)
                    hashCode = hashCode * 59 + this.AllowAccessWithStandings.GetHashCode();
                if (this.AllowAllianceAccess != null)
                    hashCode = hashCode * 59 + this.AllowAllianceAccess.GetHashCode();
                if (this.BadStandingTaxRate != null)
                    hashCode = hashCode * 59 + this.BadStandingTaxRate.GetHashCode();
                if (this.CorporationTaxRate != null)
                    hashCode = hashCode * 59 + this.CorporationTaxRate.GetHashCode();
                if (this.ExcellentStandingTaxRate != null)
                    hashCode = hashCode * 59 + this.ExcellentStandingTaxRate.GetHashCode();
                if (this.GoodStandingTaxRate != null)
                    hashCode = hashCode * 59 + this.GoodStandingTaxRate.GetHashCode();
                if (this.NeutralStandingTaxRate != null)
                    hashCode = hashCode * 59 + this.NeutralStandingTaxRate.GetHashCode();
                if (this.OfficeId != null)
                    hashCode = hashCode * 59 + this.OfficeId.GetHashCode();
                if (this.ReinforceExitEnd != null)
                    hashCode = hashCode * 59 + this.ReinforceExitEnd.GetHashCode();
                if (this.ReinforceExitStart != null)
                    hashCode = hashCode * 59 + this.ReinforceExitStart.GetHashCode();
                if (this.StandingLevel != null)
                    hashCode = hashCode * 59 + this.StandingLevel.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.TerribleStandingTaxRate != null)
                    hashCode = hashCode * 59 + this.TerribleStandingTaxRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReinforceExitEnd (int?) maximum
            if(this.ReinforceExitEnd > (int?)23)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReinforceExitEnd, must be a value less than or equal to 23.", new [] { "ReinforceExitEnd" });
            }

            // ReinforceExitEnd (int?) minimum
            if(this.ReinforceExitEnd < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReinforceExitEnd, must be a value greater than or equal to 0.", new [] { "ReinforceExitEnd" });
            }

            // ReinforceExitStart (int?) maximum
            if(this.ReinforceExitStart > (int?)23)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReinforceExitStart, must be a value less than or equal to 23.", new [] { "ReinforceExitStart" });
            }

            // ReinforceExitStart (int?) minimum
            if(this.ReinforceExitStart < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReinforceExitStart, must be a value greater than or equal to 0.", new [] { "ReinforceExitStart" });
            }

            yield break;
        }
    }

}
