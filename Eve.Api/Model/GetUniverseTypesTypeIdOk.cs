/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseTypesTypeIdOk :  IEquatable<GetUniverseTypesTypeIdOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseTypesTypeIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseTypesTypeIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseTypesTypeIdOk" /> class.
        /// </summary>
        /// <param name="Capacity">capacity number.</param>
        /// <param name="Description">description string (required).</param>
        /// <param name="DogmaAttributes">dogma_attributes array.</param>
        /// <param name="DogmaEffects">dogma_effects array.</param>
        /// <param name="GraphicId">graphic_id integer.</param>
        /// <param name="GroupId">group_id integer (required).</param>
        /// <param name="IconId">icon_id integer.</param>
        /// <param name="MarketGroupId">This only exists for types that can be put on the market.</param>
        /// <param name="Mass">mass number.</param>
        /// <param name="Name">name string (required).</param>
        /// <param name="PackagedVolume">packaged_volume number.</param>
        /// <param name="PortionSize">portion_size integer.</param>
        /// <param name="Published">published boolean (required).</param>
        /// <param name="Radius">radius number.</param>
        /// <param name="TypeId">type_id integer (required).</param>
        /// <param name="Volume">volume number.</param>
        public GetUniverseTypesTypeIdOk(float? Capacity = default(float?), string Description = default(string), List<GetUniverseTypesTypeIdDogmaAttribute> DogmaAttributes = default(List<GetUniverseTypesTypeIdDogmaAttribute>), List<GetUniverseTypesTypeIdDogmaEffect> DogmaEffects = default(List<GetUniverseTypesTypeIdDogmaEffect>), int? GraphicId = default(int?), int? GroupId = default(int?), int? IconId = default(int?), int? MarketGroupId = default(int?), float? Mass = default(float?), string Name = default(string), float? PackagedVolume = default(float?), int? PortionSize = default(int?), bool? Published = default(bool?), float? Radius = default(float?), int? TypeId = default(int?), float? Volume = default(float?))
        {
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for GetUniverseTypesTypeIdOk and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "GroupId" is required (not null)
            if (GroupId == null)
            {
                throw new InvalidDataException("GroupId is a required property for GetUniverseTypesTypeIdOk and cannot be null");
            }
            else
            {
                this.GroupId = GroupId;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for GetUniverseTypesTypeIdOk and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Published" is required (not null)
            if (Published == null)
            {
                throw new InvalidDataException("Published is a required property for GetUniverseTypesTypeIdOk and cannot be null");
            }
            else
            {
                this.Published = Published;
            }
            // to ensure "TypeId" is required (not null)
            if (TypeId == null)
            {
                throw new InvalidDataException("TypeId is a required property for GetUniverseTypesTypeIdOk and cannot be null");
            }
            else
            {
                this.TypeId = TypeId;
            }
            this.Capacity = Capacity;
            this.DogmaAttributes = DogmaAttributes;
            this.DogmaEffects = DogmaEffects;
            this.GraphicId = GraphicId;
            this.IconId = IconId;
            this.MarketGroupId = MarketGroupId;
            this.Mass = Mass;
            this.PackagedVolume = PackagedVolume;
            this.PortionSize = PortionSize;
            this.Radius = Radius;
            this.Volume = Volume;
        }
        
        /// <summary>
        /// capacity number
        /// </summary>
        /// <value>capacity number</value>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public float? Capacity { get; set; }

        /// <summary>
        /// description string
        /// </summary>
        /// <value>description string</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// dogma_attributes array
        /// </summary>
        /// <value>dogma_attributes array</value>
        [DataMember(Name="dogma_attributes", EmitDefaultValue=false)]
        public List<GetUniverseTypesTypeIdDogmaAttribute> DogmaAttributes { get; set; }

        /// <summary>
        /// dogma_effects array
        /// </summary>
        /// <value>dogma_effects array</value>
        [DataMember(Name="dogma_effects", EmitDefaultValue=false)]
        public List<GetUniverseTypesTypeIdDogmaEffect> DogmaEffects { get; set; }

        /// <summary>
        /// graphic_id integer
        /// </summary>
        /// <value>graphic_id integer</value>
        [DataMember(Name="graphic_id", EmitDefaultValue=false)]
        public int? GraphicId { get; set; }

        /// <summary>
        /// group_id integer
        /// </summary>
        /// <value>group_id integer</value>
        [DataMember(Name="group_id", EmitDefaultValue=false)]
        public int? GroupId { get; set; }

        /// <summary>
        /// icon_id integer
        /// </summary>
        /// <value>icon_id integer</value>
        [DataMember(Name="icon_id", EmitDefaultValue=false)]
        public int? IconId { get; set; }

        /// <summary>
        /// This only exists for types that can be put on the market
        /// </summary>
        /// <value>This only exists for types that can be put on the market</value>
        [DataMember(Name="market_group_id", EmitDefaultValue=false)]
        public int? MarketGroupId { get; set; }

        /// <summary>
        /// mass number
        /// </summary>
        /// <value>mass number</value>
        [DataMember(Name="mass", EmitDefaultValue=false)]
        public float? Mass { get; set; }

        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// packaged_volume number
        /// </summary>
        /// <value>packaged_volume number</value>
        [DataMember(Name="packaged_volume", EmitDefaultValue=false)]
        public float? PackagedVolume { get; set; }

        /// <summary>
        /// portion_size integer
        /// </summary>
        /// <value>portion_size integer</value>
        [DataMember(Name="portion_size", EmitDefaultValue=false)]
        public int? PortionSize { get; set; }

        /// <summary>
        /// published boolean
        /// </summary>
        /// <value>published boolean</value>
        [DataMember(Name="published", EmitDefaultValue=false)]
        public bool? Published { get; set; }

        /// <summary>
        /// radius number
        /// </summary>
        /// <value>radius number</value>
        [DataMember(Name="radius", EmitDefaultValue=false)]
        public float? Radius { get; set; }

        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// volume number
        /// </summary>
        /// <value>volume number</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public float? Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseTypesTypeIdOk {\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DogmaAttributes: ").Append(DogmaAttributes).Append("\n");
            sb.Append("  DogmaEffects: ").Append(DogmaEffects).Append("\n");
            sb.Append("  GraphicId: ").Append(GraphicId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  IconId: ").Append(IconId).Append("\n");
            sb.Append("  MarketGroupId: ").Append(MarketGroupId).Append("\n");
            sb.Append("  Mass: ").Append(Mass).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PackagedVolume: ").Append(PackagedVolume).Append("\n");
            sb.Append("  PortionSize: ").Append(PortionSize).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseTypesTypeIdOk);
        }

        /// <summary>
        /// Returns true if GetUniverseTypesTypeIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseTypesTypeIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseTypesTypeIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DogmaAttributes == input.DogmaAttributes ||
                    (this.DogmaAttributes != null &&
                    this.DogmaAttributes.SequenceEqual(input.DogmaAttributes))
                ) && 
                (
                    this.DogmaEffects == input.DogmaEffects ||
                    (this.DogmaEffects != null &&
                    this.DogmaEffects.SequenceEqual(input.DogmaEffects))
                ) && 
                (
                    this.GraphicId == input.GraphicId ||
                    (this.GraphicId != null &&
                    this.GraphicId.Equals(input.GraphicId))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.IconId == input.IconId ||
                    (this.IconId != null &&
                    this.IconId.Equals(input.IconId))
                ) && 
                (
                    this.MarketGroupId == input.MarketGroupId ||
                    (this.MarketGroupId != null &&
                    this.MarketGroupId.Equals(input.MarketGroupId))
                ) && 
                (
                    this.Mass == input.Mass ||
                    (this.Mass != null &&
                    this.Mass.Equals(input.Mass))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PackagedVolume == input.PackagedVolume ||
                    (this.PackagedVolume != null &&
                    this.PackagedVolume.Equals(input.PackagedVolume))
                ) && 
                (
                    this.PortionSize == input.PortionSize ||
                    (this.PortionSize != null &&
                    this.PortionSize.Equals(input.PortionSize))
                ) && 
                (
                    this.Published == input.Published ||
                    (this.Published != null &&
                    this.Published.Equals(input.Published))
                ) && 
                (
                    this.Radius == input.Radius ||
                    (this.Radius != null &&
                    this.Radius.Equals(input.Radius))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Capacity != null)
                    hashCode = hashCode * 59 + this.Capacity.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DogmaAttributes != null)
                    hashCode = hashCode * 59 + this.DogmaAttributes.GetHashCode();
                if (this.DogmaEffects != null)
                    hashCode = hashCode * 59 + this.DogmaEffects.GetHashCode();
                if (this.GraphicId != null)
                    hashCode = hashCode * 59 + this.GraphicId.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.IconId != null)
                    hashCode = hashCode * 59 + this.IconId.GetHashCode();
                if (this.MarketGroupId != null)
                    hashCode = hashCode * 59 + this.MarketGroupId.GetHashCode();
                if (this.Mass != null)
                    hashCode = hashCode * 59 + this.Mass.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PackagedVolume != null)
                    hashCode = hashCode * 59 + this.PackagedVolume.GetHashCode();
                if (this.PortionSize != null)
                    hashCode = hashCode * 59 + this.PortionSize.GetHashCode();
                if (this.Published != null)
                    hashCode = hashCode * 59 + this.Published.GetHashCode();
                if (this.Radius != null)
                    hashCode = hashCode * 59 + this.Radius.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
