/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdIndustryJobs200Ok :  IEquatable<GetCorporationsCorporationIdIndustryJobs200Ok>, IValidatableObject
    {
        /// <summary>
        /// status string
        /// </summary>
        /// <value>status string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Active for "active"
            /// </summary>
            [EnumMember(Value = "active")]
            Active,
            
            /// <summary>
            /// Enum Cancelled for "cancelled"
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled,
            
            /// <summary>
            /// Enum Delivered for "delivered"
            /// </summary>
            [EnumMember(Value = "delivered")]
            Delivered,
            
            /// <summary>
            /// Enum Paused for "paused"
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused,
            
            /// <summary>
            /// Enum Ready for "ready"
            /// </summary>
            [EnumMember(Value = "ready")]
            Ready,
            
            /// <summary>
            /// Enum Reverted for "reverted"
            /// </summary>
            [EnumMember(Value = "reverted")]
            Reverted
        }

        /// <summary>
        /// status string
        /// </summary>
        /// <value>status string</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdIndustryJobs200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdIndustryJobs200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdIndustryJobs200Ok" /> class.
        /// </summary>
        /// <param name="ActivityId">Job activity ID (required).</param>
        /// <param name="BlueprintId">blueprint_id integer (required).</param>
        /// <param name="BlueprintLocationId">Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility (required).</param>
        /// <param name="BlueprintTypeId">blueprint_type_id integer (required).</param>
        /// <param name="CompletedCharacterId">ID of the character which completed this job.</param>
        /// <param name="CompletedDate">Date and time when this job was completed.</param>
        /// <param name="Cost">The sume of job installation fee and industry facility tax.</param>
        /// <param name="Duration">Job duration in seconds (required).</param>
        /// <param name="EndDate">Date and time when this job finished (required).</param>
        /// <param name="FacilityId">ID of the facility where this job is running (required).</param>
        /// <param name="InstallerId">ID of the character which installed this job (required).</param>
        /// <param name="JobId">Unique job ID (required).</param>
        /// <param name="LicensedRuns">Number of runs blueprint is licensed for.</param>
        /// <param name="LocationId">ID of the location for the industry facility (required).</param>
        /// <param name="OutputLocationId">Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility (required).</param>
        /// <param name="PauseDate">Date and time when this job was paused (i.e. time when the facility where this job was installed went offline).</param>
        /// <param name="Probability">Chance of success for invention.</param>
        /// <param name="ProductTypeId">Type ID of product (manufactured, copied or invented).</param>
        /// <param name="Runs">Number of runs for a manufacturing job, or number of copies to make for a blueprint copy (required).</param>
        /// <param name="StartDate">Date and time when this job started (required).</param>
        /// <param name="Status">status string (required).</param>
        /// <param name="SuccessfulRuns">Number of successful runs for this job. Equal to runs unless this is an invention job.</param>
        public GetCorporationsCorporationIdIndustryJobs200Ok(int? ActivityId = default(int?), long? BlueprintId = default(long?), long? BlueprintLocationId = default(long?), int? BlueprintTypeId = default(int?), int? CompletedCharacterId = default(int?), DateTime? CompletedDate = default(DateTime?), double? Cost = default(double?), int? Duration = default(int?), DateTime? EndDate = default(DateTime?), long? FacilityId = default(long?), int? InstallerId = default(int?), int? JobId = default(int?), int? LicensedRuns = default(int?), long? LocationId = default(long?), long? OutputLocationId = default(long?), DateTime? PauseDate = default(DateTime?), float? Probability = default(float?), int? ProductTypeId = default(int?), int? Runs = default(int?), DateTime? StartDate = default(DateTime?), StatusEnum? Status = default(StatusEnum?), int? SuccessfulRuns = default(int?))
        {
            // to ensure "ActivityId" is required (not null)
            if (ActivityId == null)
            {
                throw new InvalidDataException("ActivityId is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.ActivityId = ActivityId;
            }
            // to ensure "BlueprintId" is required (not null)
            if (BlueprintId == null)
            {
                throw new InvalidDataException("BlueprintId is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.BlueprintId = BlueprintId;
            }
            // to ensure "BlueprintLocationId" is required (not null)
            if (BlueprintLocationId == null)
            {
                throw new InvalidDataException("BlueprintLocationId is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.BlueprintLocationId = BlueprintLocationId;
            }
            // to ensure "BlueprintTypeId" is required (not null)
            if (BlueprintTypeId == null)
            {
                throw new InvalidDataException("BlueprintTypeId is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.BlueprintTypeId = BlueprintTypeId;
            }
            // to ensure "Duration" is required (not null)
            if (Duration == null)
            {
                throw new InvalidDataException("Duration is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.Duration = Duration;
            }
            // to ensure "EndDate" is required (not null)
            if (EndDate == null)
            {
                throw new InvalidDataException("EndDate is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.EndDate = EndDate;
            }
            // to ensure "FacilityId" is required (not null)
            if (FacilityId == null)
            {
                throw new InvalidDataException("FacilityId is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.FacilityId = FacilityId;
            }
            // to ensure "InstallerId" is required (not null)
            if (InstallerId == null)
            {
                throw new InvalidDataException("InstallerId is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.InstallerId = InstallerId;
            }
            // to ensure "JobId" is required (not null)
            if (JobId == null)
            {
                throw new InvalidDataException("JobId is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.JobId = JobId;
            }
            // to ensure "LocationId" is required (not null)
            if (LocationId == null)
            {
                throw new InvalidDataException("LocationId is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.LocationId = LocationId;
            }
            // to ensure "OutputLocationId" is required (not null)
            if (OutputLocationId == null)
            {
                throw new InvalidDataException("OutputLocationId is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.OutputLocationId = OutputLocationId;
            }
            // to ensure "Runs" is required (not null)
            if (Runs == null)
            {
                throw new InvalidDataException("Runs is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.Runs = Runs;
            }
            // to ensure "StartDate" is required (not null)
            if (StartDate == null)
            {
                throw new InvalidDataException("StartDate is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.StartDate = StartDate;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for GetCorporationsCorporationIdIndustryJobs200Ok and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            this.CompletedCharacterId = CompletedCharacterId;
            this.CompletedDate = CompletedDate;
            this.Cost = Cost;
            this.LicensedRuns = LicensedRuns;
            this.PauseDate = PauseDate;
            this.Probability = Probability;
            this.ProductTypeId = ProductTypeId;
            this.SuccessfulRuns = SuccessfulRuns;
        }
        
        /// <summary>
        /// Job activity ID
        /// </summary>
        /// <value>Job activity ID</value>
        [DataMember(Name="activity_id", EmitDefaultValue=false)]
        public int? ActivityId { get; set; }

        /// <summary>
        /// blueprint_id integer
        /// </summary>
        /// <value>blueprint_id integer</value>
        [DataMember(Name="blueprint_id", EmitDefaultValue=false)]
        public long? BlueprintId { get; set; }

        /// <summary>
        /// Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
        /// </summary>
        /// <value>Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility</value>
        [DataMember(Name="blueprint_location_id", EmitDefaultValue=false)]
        public long? BlueprintLocationId { get; set; }

        /// <summary>
        /// blueprint_type_id integer
        /// </summary>
        /// <value>blueprint_type_id integer</value>
        [DataMember(Name="blueprint_type_id", EmitDefaultValue=false)]
        public int? BlueprintTypeId { get; set; }

        /// <summary>
        /// ID of the character which completed this job
        /// </summary>
        /// <value>ID of the character which completed this job</value>
        [DataMember(Name="completed_character_id", EmitDefaultValue=false)]
        public int? CompletedCharacterId { get; set; }

        /// <summary>
        /// Date and time when this job was completed
        /// </summary>
        /// <value>Date and time when this job was completed</value>
        [DataMember(Name="completed_date", EmitDefaultValue=false)]
        public DateTime? CompletedDate { get; set; }

        /// <summary>
        /// The sume of job installation fee and industry facility tax
        /// </summary>
        /// <value>The sume of job installation fee and industry facility tax</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Job duration in seconds
        /// </summary>
        /// <value>Job duration in seconds</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Date and time when this job finished
        /// </summary>
        /// <value>Date and time when this job finished</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// ID of the facility where this job is running
        /// </summary>
        /// <value>ID of the facility where this job is running</value>
        [DataMember(Name="facility_id", EmitDefaultValue=false)]
        public long? FacilityId { get; set; }

        /// <summary>
        /// ID of the character which installed this job
        /// </summary>
        /// <value>ID of the character which installed this job</value>
        [DataMember(Name="installer_id", EmitDefaultValue=false)]
        public int? InstallerId { get; set; }

        /// <summary>
        /// Unique job ID
        /// </summary>
        /// <value>Unique job ID</value>
        [DataMember(Name="job_id", EmitDefaultValue=false)]
        public int? JobId { get; set; }

        /// <summary>
        /// Number of runs blueprint is licensed for
        /// </summary>
        /// <value>Number of runs blueprint is licensed for</value>
        [DataMember(Name="licensed_runs", EmitDefaultValue=false)]
        public int? LicensedRuns { get; set; }

        /// <summary>
        /// ID of the location for the industry facility
        /// </summary>
        /// <value>ID of the location for the industry facility</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public long? LocationId { get; set; }

        /// <summary>
        /// Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
        /// </summary>
        /// <value>Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility</value>
        [DataMember(Name="output_location_id", EmitDefaultValue=false)]
        public long? OutputLocationId { get; set; }

        /// <summary>
        /// Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
        /// </summary>
        /// <value>Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)</value>
        [DataMember(Name="pause_date", EmitDefaultValue=false)]
        public DateTime? PauseDate { get; set; }

        /// <summary>
        /// Chance of success for invention
        /// </summary>
        /// <value>Chance of success for invention</value>
        [DataMember(Name="probability", EmitDefaultValue=false)]
        public float? Probability { get; set; }

        /// <summary>
        /// Type ID of product (manufactured, copied or invented)
        /// </summary>
        /// <value>Type ID of product (manufactured, copied or invented)</value>
        [DataMember(Name="product_type_id", EmitDefaultValue=false)]
        public int? ProductTypeId { get; set; }

        /// <summary>
        /// Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
        /// </summary>
        /// <value>Number of runs for a manufacturing job, or number of copies to make for a blueprint copy</value>
        [DataMember(Name="runs", EmitDefaultValue=false)]
        public int? Runs { get; set; }

        /// <summary>
        /// Date and time when this job started
        /// </summary>
        /// <value>Date and time when this job started</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }


        /// <summary>
        /// Number of successful runs for this job. Equal to runs unless this is an invention job
        /// </summary>
        /// <value>Number of successful runs for this job. Equal to runs unless this is an invention job</value>
        [DataMember(Name="successful_runs", EmitDefaultValue=false)]
        public int? SuccessfulRuns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdIndustryJobs200Ok {\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  BlueprintId: ").Append(BlueprintId).Append("\n");
            sb.Append("  BlueprintLocationId: ").Append(BlueprintLocationId).Append("\n");
            sb.Append("  BlueprintTypeId: ").Append(BlueprintTypeId).Append("\n");
            sb.Append("  CompletedCharacterId: ").Append(CompletedCharacterId).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FacilityId: ").Append(FacilityId).Append("\n");
            sb.Append("  InstallerId: ").Append(InstallerId).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  LicensedRuns: ").Append(LicensedRuns).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  OutputLocationId: ").Append(OutputLocationId).Append("\n");
            sb.Append("  PauseDate: ").Append(PauseDate).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  ProductTypeId: ").Append(ProductTypeId).Append("\n");
            sb.Append("  Runs: ").Append(Runs).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SuccessfulRuns: ").Append(SuccessfulRuns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdIndustryJobs200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdIndustryJobs200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdIndustryJobs200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdIndustryJobs200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityId == input.ActivityId ||
                    (this.ActivityId != null &&
                    this.ActivityId.Equals(input.ActivityId))
                ) && 
                (
                    this.BlueprintId == input.BlueprintId ||
                    (this.BlueprintId != null &&
                    this.BlueprintId.Equals(input.BlueprintId))
                ) && 
                (
                    this.BlueprintLocationId == input.BlueprintLocationId ||
                    (this.BlueprintLocationId != null &&
                    this.BlueprintLocationId.Equals(input.BlueprintLocationId))
                ) && 
                (
                    this.BlueprintTypeId == input.BlueprintTypeId ||
                    (this.BlueprintTypeId != null &&
                    this.BlueprintTypeId.Equals(input.BlueprintTypeId))
                ) && 
                (
                    this.CompletedCharacterId == input.CompletedCharacterId ||
                    (this.CompletedCharacterId != null &&
                    this.CompletedCharacterId.Equals(input.CompletedCharacterId))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.FacilityId == input.FacilityId ||
                    (this.FacilityId != null &&
                    this.FacilityId.Equals(input.FacilityId))
                ) && 
                (
                    this.InstallerId == input.InstallerId ||
                    (this.InstallerId != null &&
                    this.InstallerId.Equals(input.InstallerId))
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.LicensedRuns == input.LicensedRuns ||
                    (this.LicensedRuns != null &&
                    this.LicensedRuns.Equals(input.LicensedRuns))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.OutputLocationId == input.OutputLocationId ||
                    (this.OutputLocationId != null &&
                    this.OutputLocationId.Equals(input.OutputLocationId))
                ) && 
                (
                    this.PauseDate == input.PauseDate ||
                    (this.PauseDate != null &&
                    this.PauseDate.Equals(input.PauseDate))
                ) && 
                (
                    this.Probability == input.Probability ||
                    (this.Probability != null &&
                    this.Probability.Equals(input.Probability))
                ) && 
                (
                    this.ProductTypeId == input.ProductTypeId ||
                    (this.ProductTypeId != null &&
                    this.ProductTypeId.Equals(input.ProductTypeId))
                ) && 
                (
                    this.Runs == input.Runs ||
                    (this.Runs != null &&
                    this.Runs.Equals(input.Runs))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SuccessfulRuns == input.SuccessfulRuns ||
                    (this.SuccessfulRuns != null &&
                    this.SuccessfulRuns.Equals(input.SuccessfulRuns))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityId != null)
                    hashCode = hashCode * 59 + this.ActivityId.GetHashCode();
                if (this.BlueprintId != null)
                    hashCode = hashCode * 59 + this.BlueprintId.GetHashCode();
                if (this.BlueprintLocationId != null)
                    hashCode = hashCode * 59 + this.BlueprintLocationId.GetHashCode();
                if (this.BlueprintTypeId != null)
                    hashCode = hashCode * 59 + this.BlueprintTypeId.GetHashCode();
                if (this.CompletedCharacterId != null)
                    hashCode = hashCode * 59 + this.CompletedCharacterId.GetHashCode();
                if (this.CompletedDate != null)
                    hashCode = hashCode * 59 + this.CompletedDate.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.FacilityId != null)
                    hashCode = hashCode * 59 + this.FacilityId.GetHashCode();
                if (this.InstallerId != null)
                    hashCode = hashCode * 59 + this.InstallerId.GetHashCode();
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.LicensedRuns != null)
                    hashCode = hashCode * 59 + this.LicensedRuns.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.OutputLocationId != null)
                    hashCode = hashCode * 59 + this.OutputLocationId.GetHashCode();
                if (this.PauseDate != null)
                    hashCode = hashCode * 59 + this.PauseDate.GetHashCode();
                if (this.Probability != null)
                    hashCode = hashCode * 59 + this.Probability.GetHashCode();
                if (this.ProductTypeId != null)
                    hashCode = hashCode * 59 + this.ProductTypeId.GetHashCode();
                if (this.Runs != null)
                    hashCode = hashCode * 59 + this.Runs.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SuccessfulRuns != null)
                    hashCode = hashCode * 59 + this.SuccessfulRuns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
