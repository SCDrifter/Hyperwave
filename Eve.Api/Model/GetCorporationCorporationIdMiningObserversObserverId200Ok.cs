/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationCorporationIdMiningObserversObserverId200Ok :  IEquatable<GetCorporationCorporationIdMiningObserversObserverId200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationCorporationIdMiningObserversObserverId200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationCorporationIdMiningObserversObserverId200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationCorporationIdMiningObserversObserverId200Ok" /> class.
        /// </summary>
        /// <param name="CharacterId">The character that did the mining  (required).</param>
        /// <param name="LastUpdated">last_updated string (required).</param>
        /// <param name="Quantity">quantity integer (required).</param>
        /// <param name="RecordedCorporationId">The corporation id of the character at the time data was recorded.  (required).</param>
        /// <param name="TypeId">type_id integer (required).</param>
        public GetCorporationCorporationIdMiningObserversObserverId200Ok(int? CharacterId = default(int?), DateTime? LastUpdated = default(DateTime?), long? Quantity = default(long?), int? RecordedCorporationId = default(int?), int? TypeId = default(int?))
        {
            // to ensure "CharacterId" is required (not null)
            if (CharacterId == null)
            {
                throw new InvalidDataException("CharacterId is a required property for GetCorporationCorporationIdMiningObserversObserverId200Ok and cannot be null");
            }
            else
            {
                this.CharacterId = CharacterId;
            }
            // to ensure "LastUpdated" is required (not null)
            if (LastUpdated == null)
            {
                throw new InvalidDataException("LastUpdated is a required property for GetCorporationCorporationIdMiningObserversObserverId200Ok and cannot be null");
            }
            else
            {
                this.LastUpdated = LastUpdated;
            }
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for GetCorporationCorporationIdMiningObserversObserverId200Ok and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            // to ensure "RecordedCorporationId" is required (not null)
            if (RecordedCorporationId == null)
            {
                throw new InvalidDataException("RecordedCorporationId is a required property for GetCorporationCorporationIdMiningObserversObserverId200Ok and cannot be null");
            }
            else
            {
                this.RecordedCorporationId = RecordedCorporationId;
            }
            // to ensure "TypeId" is required (not null)
            if (TypeId == null)
            {
                throw new InvalidDataException("TypeId is a required property for GetCorporationCorporationIdMiningObserversObserverId200Ok and cannot be null");
            }
            else
            {
                this.TypeId = TypeId;
            }
        }
        
        /// <summary>
        /// The character that did the mining 
        /// </summary>
        /// <value>The character that did the mining </value>
        [DataMember(Name="character_id", EmitDefaultValue=false)]
        public int? CharacterId { get; set; }

        /// <summary>
        /// last_updated string
        /// </summary>
        /// <value>last_updated string</value>
        [DataMember(Name="last_updated", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// quantity integer
        /// </summary>
        /// <value>quantity integer</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public long? Quantity { get; set; }

        /// <summary>
        /// The corporation id of the character at the time data was recorded. 
        /// </summary>
        /// <value>The corporation id of the character at the time data was recorded. </value>
        [DataMember(Name="recorded_corporation_id", EmitDefaultValue=false)]
        public int? RecordedCorporationId { get; set; }

        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationCorporationIdMiningObserversObserverId200Ok {\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RecordedCorporationId: ").Append(RecordedCorporationId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationCorporationIdMiningObserversObserverId200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationCorporationIdMiningObserversObserverId200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationCorporationIdMiningObserversObserverId200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationCorporationIdMiningObserversObserverId200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.RecordedCorporationId == input.RecordedCorporationId ||
                    (this.RecordedCorporationId != null &&
                    this.RecordedCorporationId.Equals(input.RecordedCorporationId))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RecordedCorporationId != null)
                    hashCode = hashCode * 59 + this.RecordedCorporationId.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
