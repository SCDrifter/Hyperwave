/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdWallets200Ok :  IEquatable<GetCorporationsCorporationIdWallets200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdWallets200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdWallets200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdWallets200Ok" /> class.
        /// </summary>
        /// <param name="Balance">balance number (required).</param>
        /// <param name="Division">division integer (required).</param>
        public GetCorporationsCorporationIdWallets200Ok(double? Balance = default(double?), int? Division = default(int?))
        {
            // to ensure "Balance" is required (not null)
            if (Balance == null)
            {
                throw new InvalidDataException("Balance is a required property for GetCorporationsCorporationIdWallets200Ok and cannot be null");
            }
            else
            {
                this.Balance = Balance;
            }
            // to ensure "Division" is required (not null)
            if (Division == null)
            {
                throw new InvalidDataException("Division is a required property for GetCorporationsCorporationIdWallets200Ok and cannot be null");
            }
            else
            {
                this.Division = Division;
            }
        }
        
        /// <summary>
        /// balance number
        /// </summary>
        /// <value>balance number</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public double? Balance { get; set; }

        /// <summary>
        /// division integer
        /// </summary>
        /// <value>division integer</value>
        [DataMember(Name="division", EmitDefaultValue=false)]
        public int? Division { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdWallets200Ok {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Division: ").Append(Division).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdWallets200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdWallets200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdWallets200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdWallets200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.Division == input.Division ||
                    (this.Division != null &&
                    this.Division.Equals(input.Division))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.Division != null)
                    hashCode = hashCode * 59 + this.Division.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Division (int?) maximum
            if(this.Division > (int?)7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Division, must be a value less than or equal to 7.", new [] { "Division" });
            }

            // Division (int?) minimum
            if(this.Division < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Division, must be a value greater than or equal to 1.", new [] { "Division" });
            }

            yield break;
        }
    }

}
