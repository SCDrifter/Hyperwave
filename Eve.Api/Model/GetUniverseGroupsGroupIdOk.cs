/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseGroupsGroupIdOk :  IEquatable<GetUniverseGroupsGroupIdOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseGroupsGroupIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseGroupsGroupIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseGroupsGroupIdOk" /> class.
        /// </summary>
        /// <param name="CategoryId">category_id integer (required).</param>
        /// <param name="GroupId">group_id integer (required).</param>
        /// <param name="Name">name string (required).</param>
        /// <param name="Published">published boolean (required).</param>
        /// <param name="Types">types array (required).</param>
        public GetUniverseGroupsGroupIdOk(int? CategoryId = default(int?), int? GroupId = default(int?), string Name = default(string), bool? Published = default(bool?), List<int?> Types = default(List<int?>))
        {
            // to ensure "CategoryId" is required (not null)
            if (CategoryId == null)
            {
                throw new InvalidDataException("CategoryId is a required property for GetUniverseGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.CategoryId = CategoryId;
            }
            // to ensure "GroupId" is required (not null)
            if (GroupId == null)
            {
                throw new InvalidDataException("GroupId is a required property for GetUniverseGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.GroupId = GroupId;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for GetUniverseGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Published" is required (not null)
            if (Published == null)
            {
                throw new InvalidDataException("Published is a required property for GetUniverseGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.Published = Published;
            }
            // to ensure "Types" is required (not null)
            if (Types == null)
            {
                throw new InvalidDataException("Types is a required property for GetUniverseGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.Types = Types;
            }
        }
        
        /// <summary>
        /// category_id integer
        /// </summary>
        /// <value>category_id integer</value>
        [DataMember(Name="category_id", EmitDefaultValue=false)]
        public int? CategoryId { get; set; }

        /// <summary>
        /// group_id integer
        /// </summary>
        /// <value>group_id integer</value>
        [DataMember(Name="group_id", EmitDefaultValue=false)]
        public int? GroupId { get; set; }

        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// published boolean
        /// </summary>
        /// <value>published boolean</value>
        [DataMember(Name="published", EmitDefaultValue=false)]
        public bool? Published { get; set; }

        /// <summary>
        /// types array
        /// </summary>
        /// <value>types array</value>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<int?> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseGroupsGroupIdOk {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseGroupsGroupIdOk);
        }

        /// <summary>
        /// Returns true if GetUniverseGroupsGroupIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseGroupsGroupIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseGroupsGroupIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Published == input.Published ||
                    (this.Published != null &&
                    this.Published.Equals(input.Published))
                ) && 
                (
                    this.Types == input.Types ||
                    (this.Types != null &&
                    this.Types.SequenceEqual(input.Types))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Published != null)
                    hashCode = hashCode * 59 + this.Published.GetHashCode();
                if (this.Types != null)
                    hashCode = hashCode * 59 + this.Types.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
