/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdShareholders200Ok :  IEquatable<GetCorporationsCorporationIdShareholders200Ok>, IValidatableObject
    {
        /// <summary>
        /// shareholder_type string
        /// </summary>
        /// <value>shareholder_type string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShareholderTypeEnum
        {
            
            /// <summary>
            /// Enum Character for "character"
            /// </summary>
            [EnumMember(Value = "character")]
            Character,
            
            /// <summary>
            /// Enum Corporation for "corporation"
            /// </summary>
            [EnumMember(Value = "corporation")]
            Corporation
        }

        /// <summary>
        /// shareholder_type string
        /// </summary>
        /// <value>shareholder_type string</value>
        [DataMember(Name="shareholder_type", EmitDefaultValue=false)]
        public ShareholderTypeEnum? ShareholderType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdShareholders200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdShareholders200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdShareholders200Ok" /> class.
        /// </summary>
        /// <param name="ShareCount">share_count integer (required).</param>
        /// <param name="ShareholderId">shareholder_id integer (required).</param>
        /// <param name="ShareholderType">shareholder_type string (required).</param>
        public GetCorporationsCorporationIdShareholders200Ok(long? ShareCount = default(long?), int? ShareholderId = default(int?), ShareholderTypeEnum? ShareholderType = default(ShareholderTypeEnum?))
        {
            // to ensure "ShareCount" is required (not null)
            if (ShareCount == null)
            {
                throw new InvalidDataException("ShareCount is a required property for GetCorporationsCorporationIdShareholders200Ok and cannot be null");
            }
            else
            {
                this.ShareCount = ShareCount;
            }
            // to ensure "ShareholderId" is required (not null)
            if (ShareholderId == null)
            {
                throw new InvalidDataException("ShareholderId is a required property for GetCorporationsCorporationIdShareholders200Ok and cannot be null");
            }
            else
            {
                this.ShareholderId = ShareholderId;
            }
            // to ensure "ShareholderType" is required (not null)
            if (ShareholderType == null)
            {
                throw new InvalidDataException("ShareholderType is a required property for GetCorporationsCorporationIdShareholders200Ok and cannot be null");
            }
            else
            {
                this.ShareholderType = ShareholderType;
            }
        }
        
        /// <summary>
        /// share_count integer
        /// </summary>
        /// <value>share_count integer</value>
        [DataMember(Name="share_count", EmitDefaultValue=false)]
        public long? ShareCount { get; set; }

        /// <summary>
        /// shareholder_id integer
        /// </summary>
        /// <value>shareholder_id integer</value>
        [DataMember(Name="shareholder_id", EmitDefaultValue=false)]
        public int? ShareholderId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdShareholders200Ok {\n");
            sb.Append("  ShareCount: ").Append(ShareCount).Append("\n");
            sb.Append("  ShareholderId: ").Append(ShareholderId).Append("\n");
            sb.Append("  ShareholderType: ").Append(ShareholderType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdShareholders200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdShareholders200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdShareholders200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdShareholders200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShareCount == input.ShareCount ||
                    (this.ShareCount != null &&
                    this.ShareCount.Equals(input.ShareCount))
                ) && 
                (
                    this.ShareholderId == input.ShareholderId ||
                    (this.ShareholderId != null &&
                    this.ShareholderId.Equals(input.ShareholderId))
                ) && 
                (
                    this.ShareholderType == input.ShareholderType ||
                    (this.ShareholderType != null &&
                    this.ShareholderType.Equals(input.ShareholderType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShareCount != null)
                    hashCode = hashCode * 59 + this.ShareCount.GetHashCode();
                if (this.ShareholderId != null)
                    hashCode = hashCode * 59 + this.ShareholderId.GetHashCode();
                if (this.ShareholderType != null)
                    hashCode = hashCode * 59 + this.ShareholderType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
