/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseStarsStarIdOk :  IEquatable<GetUniverseStarsStarIdOk>, IValidatableObject
    {
        /// <summary>
        /// spectral_class string
        /// </summary>
        /// <value>spectral_class string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SpectralClassEnum
        {
            
            /// <summary>
            /// Enum K2V for "K2 V"
            /// </summary>
            [EnumMember(Value = "K2 V")]
            K2V,
            
            /// <summary>
            /// Enum K4V for "K4 V"
            /// </summary>
            [EnumMember(Value = "K4 V")]
            K4V,
            
            /// <summary>
            /// Enum G2V for "G2 V"
            /// </summary>
            [EnumMember(Value = "G2 V")]
            G2V,
            
            /// <summary>
            /// Enum G8V for "G8 V"
            /// </summary>
            [EnumMember(Value = "G8 V")]
            G8V,
            
            /// <summary>
            /// Enum M7V for "M7 V"
            /// </summary>
            [EnumMember(Value = "M7 V")]
            M7V,
            
            /// <summary>
            /// Enum K7V for "K7 V"
            /// </summary>
            [EnumMember(Value = "K7 V")]
            K7V,
            
            /// <summary>
            /// Enum M2V for "M2 V"
            /// </summary>
            [EnumMember(Value = "M2 V")]
            M2V,
            
            /// <summary>
            /// Enum K5V for "K5 V"
            /// </summary>
            [EnumMember(Value = "K5 V")]
            K5V,
            
            /// <summary>
            /// Enum M3V for "M3 V"
            /// </summary>
            [EnumMember(Value = "M3 V")]
            M3V,
            
            /// <summary>
            /// Enum G0V for "G0 V"
            /// </summary>
            [EnumMember(Value = "G0 V")]
            G0V,
            
            /// <summary>
            /// Enum G7V for "G7 V"
            /// </summary>
            [EnumMember(Value = "G7 V")]
            G7V,
            
            /// <summary>
            /// Enum G3V for "G3 V"
            /// </summary>
            [EnumMember(Value = "G3 V")]
            G3V,
            
            /// <summary>
            /// Enum F9V for "F9 V"
            /// </summary>
            [EnumMember(Value = "F9 V")]
            F9V,
            
            /// <summary>
            /// Enum G5V for "G5 V"
            /// </summary>
            [EnumMember(Value = "G5 V")]
            G5V,
            
            /// <summary>
            /// Enum F6V for "F6 V"
            /// </summary>
            [EnumMember(Value = "F6 V")]
            F6V,
            
            /// <summary>
            /// Enum K8V for "K8 V"
            /// </summary>
            [EnumMember(Value = "K8 V")]
            K8V,
            
            /// <summary>
            /// Enum K9V for "K9 V"
            /// </summary>
            [EnumMember(Value = "K9 V")]
            K9V,
            
            /// <summary>
            /// Enum K6V for "K6 V"
            /// </summary>
            [EnumMember(Value = "K6 V")]
            K6V,
            
            /// <summary>
            /// Enum G9V for "G9 V"
            /// </summary>
            [EnumMember(Value = "G9 V")]
            G9V,
            
            /// <summary>
            /// Enum G6V for "G6 V"
            /// </summary>
            [EnumMember(Value = "G6 V")]
            G6V,
            
            /// <summary>
            /// Enum G4VI for "G4 VI"
            /// </summary>
            [EnumMember(Value = "G4 VI")]
            G4VI,
            
            /// <summary>
            /// Enum G4V for "G4 V"
            /// </summary>
            [EnumMember(Value = "G4 V")]
            G4V,
            
            /// <summary>
            /// Enum F8V for "F8 V"
            /// </summary>
            [EnumMember(Value = "F8 V")]
            F8V,
            
            /// <summary>
            /// Enum F2V for "F2 V"
            /// </summary>
            [EnumMember(Value = "F2 V")]
            F2V,
            
            /// <summary>
            /// Enum F1V for "F1 V"
            /// </summary>
            [EnumMember(Value = "F1 V")]
            F1V,
            
            /// <summary>
            /// Enum K3V for "K3 V"
            /// </summary>
            [EnumMember(Value = "K3 V")]
            K3V,
            
            /// <summary>
            /// Enum F0VI for "F0 VI"
            /// </summary>
            [EnumMember(Value = "F0 VI")]
            F0VI,
            
            /// <summary>
            /// Enum G1VI for "G1 VI"
            /// </summary>
            [EnumMember(Value = "G1 VI")]
            G1VI,
            
            /// <summary>
            /// Enum G0VI for "G0 VI"
            /// </summary>
            [EnumMember(Value = "G0 VI")]
            G0VI,
            
            /// <summary>
            /// Enum K1V for "K1 V"
            /// </summary>
            [EnumMember(Value = "K1 V")]
            K1V,
            
            /// <summary>
            /// Enum M4V for "M4 V"
            /// </summary>
            [EnumMember(Value = "M4 V")]
            M4V,
            
            /// <summary>
            /// Enum M1V for "M1 V"
            /// </summary>
            [EnumMember(Value = "M1 V")]
            M1V,
            
            /// <summary>
            /// Enum M6V for "M6 V"
            /// </summary>
            [EnumMember(Value = "M6 V")]
            M6V,
            
            /// <summary>
            /// Enum M0V for "M0 V"
            /// </summary>
            [EnumMember(Value = "M0 V")]
            M0V,
            
            /// <summary>
            /// Enum K2IV for "K2 IV"
            /// </summary>
            [EnumMember(Value = "K2 IV")]
            K2IV,
            
            /// <summary>
            /// Enum G2VI for "G2 VI"
            /// </summary>
            [EnumMember(Value = "G2 VI")]
            G2VI,
            
            /// <summary>
            /// Enum K0V for "K0 V"
            /// </summary>
            [EnumMember(Value = "K0 V")]
            K0V,
            
            /// <summary>
            /// Enum K5IV for "K5 IV"
            /// </summary>
            [EnumMember(Value = "K5 IV")]
            K5IV,
            
            /// <summary>
            /// Enum F5VI for "F5 VI"
            /// </summary>
            [EnumMember(Value = "F5 VI")]
            F5VI,
            
            /// <summary>
            /// Enum G6VI for "G6 VI"
            /// </summary>
            [EnumMember(Value = "G6 VI")]
            G6VI,
            
            /// <summary>
            /// Enum F6VI for "F6 VI"
            /// </summary>
            [EnumMember(Value = "F6 VI")]
            F6VI,
            
            /// <summary>
            /// Enum F2IV for "F2 IV"
            /// </summary>
            [EnumMember(Value = "F2 IV")]
            F2IV,
            
            /// <summary>
            /// Enum G3VI for "G3 VI"
            /// </summary>
            [EnumMember(Value = "G3 VI")]
            G3VI,
            
            /// <summary>
            /// Enum M8V for "M8 V"
            /// </summary>
            [EnumMember(Value = "M8 V")]
            M8V,
            
            /// <summary>
            /// Enum F1VI for "F1 VI"
            /// </summary>
            [EnumMember(Value = "F1 VI")]
            F1VI,
            
            /// <summary>
            /// Enum K1IV for "K1 IV"
            /// </summary>
            [EnumMember(Value = "K1 IV")]
            K1IV,
            
            /// <summary>
            /// Enum F7V for "F7 V"
            /// </summary>
            [EnumMember(Value = "F7 V")]
            F7V,
            
            /// <summary>
            /// Enum G5VI for "G5 VI"
            /// </summary>
            [EnumMember(Value = "G5 VI")]
            G5VI,
            
            /// <summary>
            /// Enum M5V for "M5 V"
            /// </summary>
            [EnumMember(Value = "M5 V")]
            M5V,
            
            /// <summary>
            /// Enum G7VI for "G7 VI"
            /// </summary>
            [EnumMember(Value = "G7 VI")]
            G7VI,
            
            /// <summary>
            /// Enum F5V for "F5 V"
            /// </summary>
            [EnumMember(Value = "F5 V")]
            F5V,
            
            /// <summary>
            /// Enum F4VI for "F4 VI"
            /// </summary>
            [EnumMember(Value = "F4 VI")]
            F4VI,
            
            /// <summary>
            /// Enum F8VI for "F8 VI"
            /// </summary>
            [EnumMember(Value = "F8 VI")]
            F8VI,
            
            /// <summary>
            /// Enum K3IV for "K3 IV"
            /// </summary>
            [EnumMember(Value = "K3 IV")]
            K3IV,
            
            /// <summary>
            /// Enum F4IV for "F4 IV"
            /// </summary>
            [EnumMember(Value = "F4 IV")]
            F4IV,
            
            /// <summary>
            /// Enum F0V for "F0 V"
            /// </summary>
            [EnumMember(Value = "F0 V")]
            F0V,
            
            /// <summary>
            /// Enum G7IV for "G7 IV"
            /// </summary>
            [EnumMember(Value = "G7 IV")]
            G7IV,
            
            /// <summary>
            /// Enum G8VI for "G8 VI"
            /// </summary>
            [EnumMember(Value = "G8 VI")]
            G8VI,
            
            /// <summary>
            /// Enum F2VI for "F2 VI"
            /// </summary>
            [EnumMember(Value = "F2 VI")]
            F2VI,
            
            /// <summary>
            /// Enum F4V for "F4 V"
            /// </summary>
            [EnumMember(Value = "F4 V")]
            F4V,
            
            /// <summary>
            /// Enum F7VI for "F7 VI"
            /// </summary>
            [EnumMember(Value = "F7 VI")]
            F7VI,
            
            /// <summary>
            /// Enum F3V for "F3 V"
            /// </summary>
            [EnumMember(Value = "F3 V")]
            F3V,
            
            /// <summary>
            /// Enum G1V for "G1 V"
            /// </summary>
            [EnumMember(Value = "G1 V")]
            G1V,
            
            /// <summary>
            /// Enum G9VI for "G9 VI"
            /// </summary>
            [EnumMember(Value = "G9 VI")]
            G9VI,
            
            /// <summary>
            /// Enum F3IV for "F3 IV"
            /// </summary>
            [EnumMember(Value = "F3 IV")]
            F3IV,
            
            /// <summary>
            /// Enum F9VI for "F9 VI"
            /// </summary>
            [EnumMember(Value = "F9 VI")]
            F9VI,
            
            /// <summary>
            /// Enum M9V for "M9 V"
            /// </summary>
            [EnumMember(Value = "M9 V")]
            M9V,
            
            /// <summary>
            /// Enum K0IV for "K0 IV"
            /// </summary>
            [EnumMember(Value = "K0 IV")]
            K0IV,
            
            /// <summary>
            /// Enum F1IV for "F1 IV"
            /// </summary>
            [EnumMember(Value = "F1 IV")]
            F1IV,
            
            /// <summary>
            /// Enum G4IV for "G4 IV"
            /// </summary>
            [EnumMember(Value = "G4 IV")]
            G4IV,
            
            /// <summary>
            /// Enum F3VI for "F3 VI"
            /// </summary>
            [EnumMember(Value = "F3 VI")]
            F3VI,
            
            /// <summary>
            /// Enum K4IV for "K4 IV"
            /// </summary>
            [EnumMember(Value = "K4 IV")]
            K4IV,
            
            /// <summary>
            /// Enum G5IV for "G5 IV"
            /// </summary>
            [EnumMember(Value = "G5 IV")]
            G5IV,
            
            /// <summary>
            /// Enum G3IV for "G3 IV"
            /// </summary>
            [EnumMember(Value = "G3 IV")]
            G3IV,
            
            /// <summary>
            /// Enum G1IV for "G1 IV"
            /// </summary>
            [EnumMember(Value = "G1 IV")]
            G1IV,
            
            /// <summary>
            /// Enum K7IV for "K7 IV"
            /// </summary>
            [EnumMember(Value = "K7 IV")]
            K7IV,
            
            /// <summary>
            /// Enum G0IV for "G0 IV"
            /// </summary>
            [EnumMember(Value = "G0 IV")]
            G0IV,
            
            /// <summary>
            /// Enum K6IV for "K6 IV"
            /// </summary>
            [EnumMember(Value = "K6 IV")]
            K6IV,
            
            /// <summary>
            /// Enum K9IV for "K9 IV"
            /// </summary>
            [EnumMember(Value = "K9 IV")]
            K9IV,
            
            /// <summary>
            /// Enum G2IV for "G2 IV"
            /// </summary>
            [EnumMember(Value = "G2 IV")]
            G2IV,
            
            /// <summary>
            /// Enum F9IV for "F9 IV"
            /// </summary>
            [EnumMember(Value = "F9 IV")]
            F9IV,
            
            /// <summary>
            /// Enum F0IV for "F0 IV"
            /// </summary>
            [EnumMember(Value = "F0 IV")]
            F0IV,
            
            /// <summary>
            /// Enum K8IV for "K8 IV"
            /// </summary>
            [EnumMember(Value = "K8 IV")]
            K8IV,
            
            /// <summary>
            /// Enum G8IV for "G8 IV"
            /// </summary>
            [EnumMember(Value = "G8 IV")]
            G8IV,
            
            /// <summary>
            /// Enum F6IV for "F6 IV"
            /// </summary>
            [EnumMember(Value = "F6 IV")]
            F6IV,
            
            /// <summary>
            /// Enum F5IV for "F5 IV"
            /// </summary>
            [EnumMember(Value = "F5 IV")]
            F5IV,
            
            /// <summary>
            /// Enum A0 for "A0"
            /// </summary>
            [EnumMember(Value = "A0")]
            A0,
            
            /// <summary>
            /// Enum A0IV for "A0IV"
            /// </summary>
            [EnumMember(Value = "A0IV")]
            A0IV,
            
            /// <summary>
            /// Enum A0IV2 for "A0IV2"
            /// </summary>
            [EnumMember(Value = "A0IV2")]
            A0IV2
        }

        /// <summary>
        /// spectral_class string
        /// </summary>
        /// <value>spectral_class string</value>
        [DataMember(Name="spectral_class", EmitDefaultValue=false)]
        public SpectralClassEnum? SpectralClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStarsStarIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseStarsStarIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStarsStarIdOk" /> class.
        /// </summary>
        /// <param name="Age">Age of star in years (required).</param>
        /// <param name="Luminosity">luminosity number (required).</param>
        /// <param name="Name">name string (required).</param>
        /// <param name="Radius">radius integer (required).</param>
        /// <param name="SolarSystemId">solar_system_id integer (required).</param>
        /// <param name="SpectralClass">spectral_class string (required).</param>
        /// <param name="Temperature">temperature integer (required).</param>
        /// <param name="TypeId">type_id integer (required).</param>
        public GetUniverseStarsStarIdOk(long? Age = default(long?), float? Luminosity = default(float?), string Name = default(string), long? Radius = default(long?), int? SolarSystemId = default(int?), SpectralClassEnum? SpectralClass = default(SpectralClassEnum?), int? Temperature = default(int?), int? TypeId = default(int?))
        {
            // to ensure "Age" is required (not null)
            if (Age == null)
            {
                throw new InvalidDataException("Age is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Age = Age;
            }
            // to ensure "Luminosity" is required (not null)
            if (Luminosity == null)
            {
                throw new InvalidDataException("Luminosity is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Luminosity = Luminosity;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Radius" is required (not null)
            if (Radius == null)
            {
                throw new InvalidDataException("Radius is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Radius = Radius;
            }
            // to ensure "SolarSystemId" is required (not null)
            if (SolarSystemId == null)
            {
                throw new InvalidDataException("SolarSystemId is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.SolarSystemId = SolarSystemId;
            }
            // to ensure "SpectralClass" is required (not null)
            if (SpectralClass == null)
            {
                throw new InvalidDataException("SpectralClass is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.SpectralClass = SpectralClass;
            }
            // to ensure "Temperature" is required (not null)
            if (Temperature == null)
            {
                throw new InvalidDataException("Temperature is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Temperature = Temperature;
            }
            // to ensure "TypeId" is required (not null)
            if (TypeId == null)
            {
                throw new InvalidDataException("TypeId is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.TypeId = TypeId;
            }
        }
        
        /// <summary>
        /// Age of star in years
        /// </summary>
        /// <value>Age of star in years</value>
        [DataMember(Name="age", EmitDefaultValue=false)]
        public long? Age { get; set; }

        /// <summary>
        /// luminosity number
        /// </summary>
        /// <value>luminosity number</value>
        [DataMember(Name="luminosity", EmitDefaultValue=false)]
        public float? Luminosity { get; set; }

        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// radius integer
        /// </summary>
        /// <value>radius integer</value>
        [DataMember(Name="radius", EmitDefaultValue=false)]
        public long? Radius { get; set; }

        /// <summary>
        /// solar_system_id integer
        /// </summary>
        /// <value>solar_system_id integer</value>
        [DataMember(Name="solar_system_id", EmitDefaultValue=false)]
        public int? SolarSystemId { get; set; }


        /// <summary>
        /// temperature integer
        /// </summary>
        /// <value>temperature integer</value>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public int? Temperature { get; set; }

        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseStarsStarIdOk {\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Luminosity: ").Append(Luminosity).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  SpectralClass: ").Append(SpectralClass).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseStarsStarIdOk);
        }

        /// <summary>
        /// Returns true if GetUniverseStarsStarIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseStarsStarIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseStarsStarIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.Luminosity == input.Luminosity ||
                    (this.Luminosity != null &&
                    this.Luminosity.Equals(input.Luminosity))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Radius == input.Radius ||
                    (this.Radius != null &&
                    this.Radius.Equals(input.Radius))
                ) && 
                (
                    this.SolarSystemId == input.SolarSystemId ||
                    (this.SolarSystemId != null &&
                    this.SolarSystemId.Equals(input.SolarSystemId))
                ) && 
                (
                    this.SpectralClass == input.SpectralClass ||
                    (this.SpectralClass != null &&
                    this.SpectralClass.Equals(input.SpectralClass))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.Luminosity != null)
                    hashCode = hashCode * 59 + this.Luminosity.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Radius != null)
                    hashCode = hashCode * 59 + this.Radius.GetHashCode();
                if (this.SolarSystemId != null)
                    hashCode = hashCode * 59 + this.SolarSystemId.GetHashCode();
                if (this.SpectralClass != null)
                    hashCode = hashCode * 59 + this.SpectralClass.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
