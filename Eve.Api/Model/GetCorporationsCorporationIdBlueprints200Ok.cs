/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdBlueprints200Ok :  IEquatable<GetCorporationsCorporationIdBlueprints200Ok>, IValidatableObject
    {
        /// <summary>
        /// Type of the location_id
        /// </summary>
        /// <value>Type of the location_id</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LocationFlagEnum
        {
            
            /// <summary>
            /// Enum AssetSafety for "AssetSafety"
            /// </summary>
            [EnumMember(Value = "AssetSafety")]
            AssetSafety,
            
            /// <summary>
            /// Enum AutoFit for "AutoFit"
            /// </summary>
            [EnumMember(Value = "AutoFit")]
            AutoFit,
            
            /// <summary>
            /// Enum Bonus for "Bonus"
            /// </summary>
            [EnumMember(Value = "Bonus")]
            Bonus,
            
            /// <summary>
            /// Enum Booster for "Booster"
            /// </summary>
            [EnumMember(Value = "Booster")]
            Booster,
            
            /// <summary>
            /// Enum BoosterBay for "BoosterBay"
            /// </summary>
            [EnumMember(Value = "BoosterBay")]
            BoosterBay,
            
            /// <summary>
            /// Enum Capsule for "Capsule"
            /// </summary>
            [EnumMember(Value = "Capsule")]
            Capsule,
            
            /// <summary>
            /// Enum Cargo for "Cargo"
            /// </summary>
            [EnumMember(Value = "Cargo")]
            Cargo,
            
            /// <summary>
            /// Enum CorpDeliveries for "CorpDeliveries"
            /// </summary>
            [EnumMember(Value = "CorpDeliveries")]
            CorpDeliveries,
            
            /// <summary>
            /// Enum CorpSAG1 for "CorpSAG1"
            /// </summary>
            [EnumMember(Value = "CorpSAG1")]
            CorpSAG1,
            
            /// <summary>
            /// Enum CorpSAG2 for "CorpSAG2"
            /// </summary>
            [EnumMember(Value = "CorpSAG2")]
            CorpSAG2,
            
            /// <summary>
            /// Enum CorpSAG3 for "CorpSAG3"
            /// </summary>
            [EnumMember(Value = "CorpSAG3")]
            CorpSAG3,
            
            /// <summary>
            /// Enum CorpSAG4 for "CorpSAG4"
            /// </summary>
            [EnumMember(Value = "CorpSAG4")]
            CorpSAG4,
            
            /// <summary>
            /// Enum CorpSAG5 for "CorpSAG5"
            /// </summary>
            [EnumMember(Value = "CorpSAG5")]
            CorpSAG5,
            
            /// <summary>
            /// Enum CorpSAG6 for "CorpSAG6"
            /// </summary>
            [EnumMember(Value = "CorpSAG6")]
            CorpSAG6,
            
            /// <summary>
            /// Enum CorpSAG7 for "CorpSAG7"
            /// </summary>
            [EnumMember(Value = "CorpSAG7")]
            CorpSAG7,
            
            /// <summary>
            /// Enum CrateLoot for "CrateLoot"
            /// </summary>
            [EnumMember(Value = "CrateLoot")]
            CrateLoot,
            
            /// <summary>
            /// Enum Deliveries for "Deliveries"
            /// </summary>
            [EnumMember(Value = "Deliveries")]
            Deliveries,
            
            /// <summary>
            /// Enum DroneBay for "DroneBay"
            /// </summary>
            [EnumMember(Value = "DroneBay")]
            DroneBay,
            
            /// <summary>
            /// Enum DustBattle for "DustBattle"
            /// </summary>
            [EnumMember(Value = "DustBattle")]
            DustBattle,
            
            /// <summary>
            /// Enum DustDatabank for "DustDatabank"
            /// </summary>
            [EnumMember(Value = "DustDatabank")]
            DustDatabank,
            
            /// <summary>
            /// Enum FighterBay for "FighterBay"
            /// </summary>
            [EnumMember(Value = "FighterBay")]
            FighterBay,
            
            /// <summary>
            /// Enum FighterTube0 for "FighterTube0"
            /// </summary>
            [EnumMember(Value = "FighterTube0")]
            FighterTube0,
            
            /// <summary>
            /// Enum FighterTube1 for "FighterTube1"
            /// </summary>
            [EnumMember(Value = "FighterTube1")]
            FighterTube1,
            
            /// <summary>
            /// Enum FighterTube2 for "FighterTube2"
            /// </summary>
            [EnumMember(Value = "FighterTube2")]
            FighterTube2,
            
            /// <summary>
            /// Enum FighterTube3 for "FighterTube3"
            /// </summary>
            [EnumMember(Value = "FighterTube3")]
            FighterTube3,
            
            /// <summary>
            /// Enum FighterTube4 for "FighterTube4"
            /// </summary>
            [EnumMember(Value = "FighterTube4")]
            FighterTube4,
            
            /// <summary>
            /// Enum FleetHangar for "FleetHangar"
            /// </summary>
            [EnumMember(Value = "FleetHangar")]
            FleetHangar,
            
            /// <summary>
            /// Enum Hangar for "Hangar"
            /// </summary>
            [EnumMember(Value = "Hangar")]
            Hangar,
            
            /// <summary>
            /// Enum HangarAll for "HangarAll"
            /// </summary>
            [EnumMember(Value = "HangarAll")]
            HangarAll,
            
            /// <summary>
            /// Enum HiSlot0 for "HiSlot0"
            /// </summary>
            [EnumMember(Value = "HiSlot0")]
            HiSlot0,
            
            /// <summary>
            /// Enum HiSlot1 for "HiSlot1"
            /// </summary>
            [EnumMember(Value = "HiSlot1")]
            HiSlot1,
            
            /// <summary>
            /// Enum HiSlot2 for "HiSlot2"
            /// </summary>
            [EnumMember(Value = "HiSlot2")]
            HiSlot2,
            
            /// <summary>
            /// Enum HiSlot3 for "HiSlot3"
            /// </summary>
            [EnumMember(Value = "HiSlot3")]
            HiSlot3,
            
            /// <summary>
            /// Enum HiSlot4 for "HiSlot4"
            /// </summary>
            [EnumMember(Value = "HiSlot4")]
            HiSlot4,
            
            /// <summary>
            /// Enum HiSlot5 for "HiSlot5"
            /// </summary>
            [EnumMember(Value = "HiSlot5")]
            HiSlot5,
            
            /// <summary>
            /// Enum HiSlot6 for "HiSlot6"
            /// </summary>
            [EnumMember(Value = "HiSlot6")]
            HiSlot6,
            
            /// <summary>
            /// Enum HiSlot7 for "HiSlot7"
            /// </summary>
            [EnumMember(Value = "HiSlot7")]
            HiSlot7,
            
            /// <summary>
            /// Enum HiddenModifiers for "HiddenModifiers"
            /// </summary>
            [EnumMember(Value = "HiddenModifiers")]
            HiddenModifiers,
            
            /// <summary>
            /// Enum Implant for "Implant"
            /// </summary>
            [EnumMember(Value = "Implant")]
            Implant,
            
            /// <summary>
            /// Enum Impounded for "Impounded"
            /// </summary>
            [EnumMember(Value = "Impounded")]
            Impounded,
            
            /// <summary>
            /// Enum JunkyardReprocessed for "JunkyardReprocessed"
            /// </summary>
            [EnumMember(Value = "JunkyardReprocessed")]
            JunkyardReprocessed,
            
            /// <summary>
            /// Enum JunkyardTrashed for "JunkyardTrashed"
            /// </summary>
            [EnumMember(Value = "JunkyardTrashed")]
            JunkyardTrashed,
            
            /// <summary>
            /// Enum LoSlot0 for "LoSlot0"
            /// </summary>
            [EnumMember(Value = "LoSlot0")]
            LoSlot0,
            
            /// <summary>
            /// Enum LoSlot1 for "LoSlot1"
            /// </summary>
            [EnumMember(Value = "LoSlot1")]
            LoSlot1,
            
            /// <summary>
            /// Enum LoSlot2 for "LoSlot2"
            /// </summary>
            [EnumMember(Value = "LoSlot2")]
            LoSlot2,
            
            /// <summary>
            /// Enum LoSlot3 for "LoSlot3"
            /// </summary>
            [EnumMember(Value = "LoSlot3")]
            LoSlot3,
            
            /// <summary>
            /// Enum LoSlot4 for "LoSlot4"
            /// </summary>
            [EnumMember(Value = "LoSlot4")]
            LoSlot4,
            
            /// <summary>
            /// Enum LoSlot5 for "LoSlot5"
            /// </summary>
            [EnumMember(Value = "LoSlot5")]
            LoSlot5,
            
            /// <summary>
            /// Enum LoSlot6 for "LoSlot6"
            /// </summary>
            [EnumMember(Value = "LoSlot6")]
            LoSlot6,
            
            /// <summary>
            /// Enum LoSlot7 for "LoSlot7"
            /// </summary>
            [EnumMember(Value = "LoSlot7")]
            LoSlot7,
            
            /// <summary>
            /// Enum Locked for "Locked"
            /// </summary>
            [EnumMember(Value = "Locked")]
            Locked,
            
            /// <summary>
            /// Enum MedSlot0 for "MedSlot0"
            /// </summary>
            [EnumMember(Value = "MedSlot0")]
            MedSlot0,
            
            /// <summary>
            /// Enum MedSlot1 for "MedSlot1"
            /// </summary>
            [EnumMember(Value = "MedSlot1")]
            MedSlot1,
            
            /// <summary>
            /// Enum MedSlot2 for "MedSlot2"
            /// </summary>
            [EnumMember(Value = "MedSlot2")]
            MedSlot2,
            
            /// <summary>
            /// Enum MedSlot3 for "MedSlot3"
            /// </summary>
            [EnumMember(Value = "MedSlot3")]
            MedSlot3,
            
            /// <summary>
            /// Enum MedSlot4 for "MedSlot4"
            /// </summary>
            [EnumMember(Value = "MedSlot4")]
            MedSlot4,
            
            /// <summary>
            /// Enum MedSlot5 for "MedSlot5"
            /// </summary>
            [EnumMember(Value = "MedSlot5")]
            MedSlot5,
            
            /// <summary>
            /// Enum MedSlot6 for "MedSlot6"
            /// </summary>
            [EnumMember(Value = "MedSlot6")]
            MedSlot6,
            
            /// <summary>
            /// Enum MedSlot7 for "MedSlot7"
            /// </summary>
            [EnumMember(Value = "MedSlot7")]
            MedSlot7,
            
            /// <summary>
            /// Enum OfficeFolder for "OfficeFolder"
            /// </summary>
            [EnumMember(Value = "OfficeFolder")]
            OfficeFolder,
            
            /// <summary>
            /// Enum Pilot for "Pilot"
            /// </summary>
            [EnumMember(Value = "Pilot")]
            Pilot,
            
            /// <summary>
            /// Enum PlanetSurface for "PlanetSurface"
            /// </summary>
            [EnumMember(Value = "PlanetSurface")]
            PlanetSurface,
            
            /// <summary>
            /// Enum QuafeBay for "QuafeBay"
            /// </summary>
            [EnumMember(Value = "QuafeBay")]
            QuafeBay,
            
            /// <summary>
            /// Enum Reward for "Reward"
            /// </summary>
            [EnumMember(Value = "Reward")]
            Reward,
            
            /// <summary>
            /// Enum RigSlot0 for "RigSlot0"
            /// </summary>
            [EnumMember(Value = "RigSlot0")]
            RigSlot0,
            
            /// <summary>
            /// Enum RigSlot1 for "RigSlot1"
            /// </summary>
            [EnumMember(Value = "RigSlot1")]
            RigSlot1,
            
            /// <summary>
            /// Enum RigSlot2 for "RigSlot2"
            /// </summary>
            [EnumMember(Value = "RigSlot2")]
            RigSlot2,
            
            /// <summary>
            /// Enum RigSlot3 for "RigSlot3"
            /// </summary>
            [EnumMember(Value = "RigSlot3")]
            RigSlot3,
            
            /// <summary>
            /// Enum RigSlot4 for "RigSlot4"
            /// </summary>
            [EnumMember(Value = "RigSlot4")]
            RigSlot4,
            
            /// <summary>
            /// Enum RigSlot5 for "RigSlot5"
            /// </summary>
            [EnumMember(Value = "RigSlot5")]
            RigSlot5,
            
            /// <summary>
            /// Enum RigSlot6 for "RigSlot6"
            /// </summary>
            [EnumMember(Value = "RigSlot6")]
            RigSlot6,
            
            /// <summary>
            /// Enum RigSlot7 for "RigSlot7"
            /// </summary>
            [EnumMember(Value = "RigSlot7")]
            RigSlot7,
            
            /// <summary>
            /// Enum SecondaryStorage for "SecondaryStorage"
            /// </summary>
            [EnumMember(Value = "SecondaryStorage")]
            SecondaryStorage,
            
            /// <summary>
            /// Enum ServiceSlot0 for "ServiceSlot0"
            /// </summary>
            [EnumMember(Value = "ServiceSlot0")]
            ServiceSlot0,
            
            /// <summary>
            /// Enum ServiceSlot1 for "ServiceSlot1"
            /// </summary>
            [EnumMember(Value = "ServiceSlot1")]
            ServiceSlot1,
            
            /// <summary>
            /// Enum ServiceSlot2 for "ServiceSlot2"
            /// </summary>
            [EnumMember(Value = "ServiceSlot2")]
            ServiceSlot2,
            
            /// <summary>
            /// Enum ServiceSlot3 for "ServiceSlot3"
            /// </summary>
            [EnumMember(Value = "ServiceSlot3")]
            ServiceSlot3,
            
            /// <summary>
            /// Enum ServiceSlot4 for "ServiceSlot4"
            /// </summary>
            [EnumMember(Value = "ServiceSlot4")]
            ServiceSlot4,
            
            /// <summary>
            /// Enum ServiceSlot5 for "ServiceSlot5"
            /// </summary>
            [EnumMember(Value = "ServiceSlot5")]
            ServiceSlot5,
            
            /// <summary>
            /// Enum ServiceSlot6 for "ServiceSlot6"
            /// </summary>
            [EnumMember(Value = "ServiceSlot6")]
            ServiceSlot6,
            
            /// <summary>
            /// Enum ServiceSlot7 for "ServiceSlot7"
            /// </summary>
            [EnumMember(Value = "ServiceSlot7")]
            ServiceSlot7,
            
            /// <summary>
            /// Enum ShipHangar for "ShipHangar"
            /// </summary>
            [EnumMember(Value = "ShipHangar")]
            ShipHangar,
            
            /// <summary>
            /// Enum ShipOffline for "ShipOffline"
            /// </summary>
            [EnumMember(Value = "ShipOffline")]
            ShipOffline,
            
            /// <summary>
            /// Enum Skill for "Skill"
            /// </summary>
            [EnumMember(Value = "Skill")]
            Skill,
            
            /// <summary>
            /// Enum SkillInTraining for "SkillInTraining"
            /// </summary>
            [EnumMember(Value = "SkillInTraining")]
            SkillInTraining,
            
            /// <summary>
            /// Enum SpecializedAmmoHold for "SpecializedAmmoHold"
            /// </summary>
            [EnumMember(Value = "SpecializedAmmoHold")]
            SpecializedAmmoHold,
            
            /// <summary>
            /// Enum SpecializedCommandCenterHold for "SpecializedCommandCenterHold"
            /// </summary>
            [EnumMember(Value = "SpecializedCommandCenterHold")]
            SpecializedCommandCenterHold,
            
            /// <summary>
            /// Enum SpecializedFuelBay for "SpecializedFuelBay"
            /// </summary>
            [EnumMember(Value = "SpecializedFuelBay")]
            SpecializedFuelBay,
            
            /// <summary>
            /// Enum SpecializedGasHold for "SpecializedGasHold"
            /// </summary>
            [EnumMember(Value = "SpecializedGasHold")]
            SpecializedGasHold,
            
            /// <summary>
            /// Enum SpecializedIndustrialShipHold for "SpecializedIndustrialShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedIndustrialShipHold")]
            SpecializedIndustrialShipHold,
            
            /// <summary>
            /// Enum SpecializedLargeShipHold for "SpecializedLargeShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedLargeShipHold")]
            SpecializedLargeShipHold,
            
            /// <summary>
            /// Enum SpecializedMaterialBay for "SpecializedMaterialBay"
            /// </summary>
            [EnumMember(Value = "SpecializedMaterialBay")]
            SpecializedMaterialBay,
            
            /// <summary>
            /// Enum SpecializedMediumShipHold for "SpecializedMediumShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedMediumShipHold")]
            SpecializedMediumShipHold,
            
            /// <summary>
            /// Enum SpecializedMineralHold for "SpecializedMineralHold"
            /// </summary>
            [EnumMember(Value = "SpecializedMineralHold")]
            SpecializedMineralHold,
            
            /// <summary>
            /// Enum SpecializedOreHold for "SpecializedOreHold"
            /// </summary>
            [EnumMember(Value = "SpecializedOreHold")]
            SpecializedOreHold,
            
            /// <summary>
            /// Enum SpecializedPlanetaryCommoditiesHold for "SpecializedPlanetaryCommoditiesHold"
            /// </summary>
            [EnumMember(Value = "SpecializedPlanetaryCommoditiesHold")]
            SpecializedPlanetaryCommoditiesHold,
            
            /// <summary>
            /// Enum SpecializedSalvageHold for "SpecializedSalvageHold"
            /// </summary>
            [EnumMember(Value = "SpecializedSalvageHold")]
            SpecializedSalvageHold,
            
            /// <summary>
            /// Enum SpecializedShipHold for "SpecializedShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedShipHold")]
            SpecializedShipHold,
            
            /// <summary>
            /// Enum SpecializedSmallShipHold for "SpecializedSmallShipHold"
            /// </summary>
            [EnumMember(Value = "SpecializedSmallShipHold")]
            SpecializedSmallShipHold,
            
            /// <summary>
            /// Enum StructureActive for "StructureActive"
            /// </summary>
            [EnumMember(Value = "StructureActive")]
            StructureActive,
            
            /// <summary>
            /// Enum StructureFuel for "StructureFuel"
            /// </summary>
            [EnumMember(Value = "StructureFuel")]
            StructureFuel,
            
            /// <summary>
            /// Enum StructureInactive for "StructureInactive"
            /// </summary>
            [EnumMember(Value = "StructureInactive")]
            StructureInactive,
            
            /// <summary>
            /// Enum StructureOffline for "StructureOffline"
            /// </summary>
            [EnumMember(Value = "StructureOffline")]
            StructureOffline,
            
            /// <summary>
            /// Enum SubSystemBay for "SubSystemBay"
            /// </summary>
            [EnumMember(Value = "SubSystemBay")]
            SubSystemBay,
            
            /// <summary>
            /// Enum SubSystemSlot0 for "SubSystemSlot0"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot0")]
            SubSystemSlot0,
            
            /// <summary>
            /// Enum SubSystemSlot1 for "SubSystemSlot1"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot1")]
            SubSystemSlot1,
            
            /// <summary>
            /// Enum SubSystemSlot2 for "SubSystemSlot2"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot2")]
            SubSystemSlot2,
            
            /// <summary>
            /// Enum SubSystemSlot3 for "SubSystemSlot3"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot3")]
            SubSystemSlot3,
            
            /// <summary>
            /// Enum SubSystemSlot4 for "SubSystemSlot4"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot4")]
            SubSystemSlot4,
            
            /// <summary>
            /// Enum SubSystemSlot5 for "SubSystemSlot5"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot5")]
            SubSystemSlot5,
            
            /// <summary>
            /// Enum SubSystemSlot6 for "SubSystemSlot6"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot6")]
            SubSystemSlot6,
            
            /// <summary>
            /// Enum SubSystemSlot7 for "SubSystemSlot7"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot7")]
            SubSystemSlot7,
            
            /// <summary>
            /// Enum Unlocked for "Unlocked"
            /// </summary>
            [EnumMember(Value = "Unlocked")]
            Unlocked,
            
            /// <summary>
            /// Enum Wallet for "Wallet"
            /// </summary>
            [EnumMember(Value = "Wallet")]
            Wallet,
            
            /// <summary>
            /// Enum Wardrobe for "Wardrobe"
            /// </summary>
            [EnumMember(Value = "Wardrobe")]
            Wardrobe
        }

        /// <summary>
        /// Type of the location_id
        /// </summary>
        /// <value>Type of the location_id</value>
        [DataMember(Name="location_flag", EmitDefaultValue=false)]
        public LocationFlagEnum? LocationFlag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdBlueprints200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdBlueprints200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdBlueprints200Ok" /> class.
        /// </summary>
        /// <param name="ItemId">Unique ID for this item. (required).</param>
        /// <param name="LocationFlag">Type of the location_id (required).</param>
        /// <param name="LocationId">References a solar system, station or item_id if this blueprint is located within a container. (required).</param>
        /// <param name="MaterialEfficiency">Material Efficiency Level of the blueprint. (required).</param>
        /// <param name="Quantity">A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet). (required).</param>
        /// <param name="Runs">Number of runs remaining if the blueprint is a copy, -1 if it is an original. (required).</param>
        /// <param name="TimeEfficiency">Time Efficiency Level of the blueprint. (required).</param>
        /// <param name="TypeId">type_id integer (required).</param>
        public GetCorporationsCorporationIdBlueprints200Ok(long? ItemId = default(long?), LocationFlagEnum? LocationFlag = default(LocationFlagEnum?), long? LocationId = default(long?), int? MaterialEfficiency = default(int?), int? Quantity = default(int?), int? Runs = default(int?), int? TimeEfficiency = default(int?), int? TypeId = default(int?))
        {
            // to ensure "ItemId" is required (not null)
            if (ItemId == null)
            {
                throw new InvalidDataException("ItemId is a required property for GetCorporationsCorporationIdBlueprints200Ok and cannot be null");
            }
            else
            {
                this.ItemId = ItemId;
            }
            // to ensure "LocationFlag" is required (not null)
            if (LocationFlag == null)
            {
                throw new InvalidDataException("LocationFlag is a required property for GetCorporationsCorporationIdBlueprints200Ok and cannot be null");
            }
            else
            {
                this.LocationFlag = LocationFlag;
            }
            // to ensure "LocationId" is required (not null)
            if (LocationId == null)
            {
                throw new InvalidDataException("LocationId is a required property for GetCorporationsCorporationIdBlueprints200Ok and cannot be null");
            }
            else
            {
                this.LocationId = LocationId;
            }
            // to ensure "MaterialEfficiency" is required (not null)
            if (MaterialEfficiency == null)
            {
                throw new InvalidDataException("MaterialEfficiency is a required property for GetCorporationsCorporationIdBlueprints200Ok and cannot be null");
            }
            else
            {
                this.MaterialEfficiency = MaterialEfficiency;
            }
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for GetCorporationsCorporationIdBlueprints200Ok and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            // to ensure "Runs" is required (not null)
            if (Runs == null)
            {
                throw new InvalidDataException("Runs is a required property for GetCorporationsCorporationIdBlueprints200Ok and cannot be null");
            }
            else
            {
                this.Runs = Runs;
            }
            // to ensure "TimeEfficiency" is required (not null)
            if (TimeEfficiency == null)
            {
                throw new InvalidDataException("TimeEfficiency is a required property for GetCorporationsCorporationIdBlueprints200Ok and cannot be null");
            }
            else
            {
                this.TimeEfficiency = TimeEfficiency;
            }
            // to ensure "TypeId" is required (not null)
            if (TypeId == null)
            {
                throw new InvalidDataException("TypeId is a required property for GetCorporationsCorporationIdBlueprints200Ok and cannot be null");
            }
            else
            {
                this.TypeId = TypeId;
            }
        }
        
        /// <summary>
        /// Unique ID for this item.
        /// </summary>
        /// <value>Unique ID for this item.</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public long? ItemId { get; set; }


        /// <summary>
        /// References a solar system, station or item_id if this blueprint is located within a container.
        /// </summary>
        /// <value>References a solar system, station or item_id if this blueprint is located within a container.</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public long? LocationId { get; set; }

        /// <summary>
        /// Material Efficiency Level of the blueprint.
        /// </summary>
        /// <value>Material Efficiency Level of the blueprint.</value>
        [DataMember(Name="material_efficiency", EmitDefaultValue=false)]
        public int? MaterialEfficiency { get; set; }

        /// <summary>
        /// A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
        /// </summary>
        /// <value>A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Number of runs remaining if the blueprint is a copy, -1 if it is an original.
        /// </summary>
        /// <value>Number of runs remaining if the blueprint is a copy, -1 if it is an original.</value>
        [DataMember(Name="runs", EmitDefaultValue=false)]
        public int? Runs { get; set; }

        /// <summary>
        /// Time Efficiency Level of the blueprint.
        /// </summary>
        /// <value>Time Efficiency Level of the blueprint.</value>
        [DataMember(Name="time_efficiency", EmitDefaultValue=false)]
        public int? TimeEfficiency { get; set; }

        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdBlueprints200Ok {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  LocationFlag: ").Append(LocationFlag).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MaterialEfficiency: ").Append(MaterialEfficiency).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Runs: ").Append(Runs).Append("\n");
            sb.Append("  TimeEfficiency: ").Append(TimeEfficiency).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdBlueprints200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdBlueprints200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdBlueprints200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdBlueprints200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.LocationFlag == input.LocationFlag ||
                    (this.LocationFlag != null &&
                    this.LocationFlag.Equals(input.LocationFlag))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.MaterialEfficiency == input.MaterialEfficiency ||
                    (this.MaterialEfficiency != null &&
                    this.MaterialEfficiency.Equals(input.MaterialEfficiency))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Runs == input.Runs ||
                    (this.Runs != null &&
                    this.Runs.Equals(input.Runs))
                ) && 
                (
                    this.TimeEfficiency == input.TimeEfficiency ||
                    (this.TimeEfficiency != null &&
                    this.TimeEfficiency.Equals(input.TimeEfficiency))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.LocationFlag != null)
                    hashCode = hashCode * 59 + this.LocationFlag.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.MaterialEfficiency != null)
                    hashCode = hashCode * 59 + this.MaterialEfficiency.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Runs != null)
                    hashCode = hashCode * 59 + this.Runs.GetHashCode();
                if (this.TimeEfficiency != null)
                    hashCode = hashCode * 59 + this.TimeEfficiency.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaterialEfficiency (int?) maximum
            if(this.MaterialEfficiency > (int?)25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaterialEfficiency, must be a value less than or equal to 25.", new [] { "MaterialEfficiency" });
            }

            // MaterialEfficiency (int?) minimum
            if(this.MaterialEfficiency < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaterialEfficiency, must be a value greater than or equal to 0.", new [] { "MaterialEfficiency" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)-2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to -2.", new [] { "Quantity" });
            }

            // Runs (int?) minimum
            if(this.Runs < (int?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Runs, must be a value greater than or equal to -1.", new [] { "Runs" });
            }

            // TimeEfficiency (int?) maximum
            if(this.TimeEfficiency > (int?)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeEfficiency, must be a value less than or equal to 20.", new [] { "TimeEfficiency" });
            }

            // TimeEfficiency (int?) minimum
            if(this.TimeEfficiency < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeEfficiency, must be a value greater than or equal to 0.", new [] { "TimeEfficiency" });
            }

            yield break;
        }
    }

}
