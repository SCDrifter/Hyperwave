/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdNotificationsContacts200Ok :  IEquatable<GetCharactersCharacterIdNotificationsContacts200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdNotificationsContacts200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdNotificationsContacts200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdNotificationsContacts200Ok" /> class.
        /// </summary>
        /// <param name="Message">message string (required).</param>
        /// <param name="NotificationId">notification_id integer (required).</param>
        /// <param name="SendDate">send_date string (required).</param>
        /// <param name="SenderCharacterId">sender_character_id integer (required).</param>
        /// <param name="StandingLevel">A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -&gt; Terrible | -5 -&gt; Bad |  0 -&gt; Neutral |  5 -&gt; Good |  10 -&gt; Excellent (required).</param>
        public GetCharactersCharacterIdNotificationsContacts200Ok(string Message = default(string), int? NotificationId = default(int?), DateTime? SendDate = default(DateTime?), int? SenderCharacterId = default(int?), float? StandingLevel = default(float?))
        {
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for GetCharactersCharacterIdNotificationsContacts200Ok and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            // to ensure "NotificationId" is required (not null)
            if (NotificationId == null)
            {
                throw new InvalidDataException("NotificationId is a required property for GetCharactersCharacterIdNotificationsContacts200Ok and cannot be null");
            }
            else
            {
                this.NotificationId = NotificationId;
            }
            // to ensure "SendDate" is required (not null)
            if (SendDate == null)
            {
                throw new InvalidDataException("SendDate is a required property for GetCharactersCharacterIdNotificationsContacts200Ok and cannot be null");
            }
            else
            {
                this.SendDate = SendDate;
            }
            // to ensure "SenderCharacterId" is required (not null)
            if (SenderCharacterId == null)
            {
                throw new InvalidDataException("SenderCharacterId is a required property for GetCharactersCharacterIdNotificationsContacts200Ok and cannot be null");
            }
            else
            {
                this.SenderCharacterId = SenderCharacterId;
            }
            // to ensure "StandingLevel" is required (not null)
            if (StandingLevel == null)
            {
                throw new InvalidDataException("StandingLevel is a required property for GetCharactersCharacterIdNotificationsContacts200Ok and cannot be null");
            }
            else
            {
                this.StandingLevel = StandingLevel;
            }
        }
        
        /// <summary>
        /// message string
        /// </summary>
        /// <value>message string</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// notification_id integer
        /// </summary>
        /// <value>notification_id integer</value>
        [DataMember(Name="notification_id", EmitDefaultValue=false)]
        public int? NotificationId { get; set; }

        /// <summary>
        /// send_date string
        /// </summary>
        /// <value>send_date string</value>
        [DataMember(Name="send_date", EmitDefaultValue=false)]
        public DateTime? SendDate { get; set; }

        /// <summary>
        /// sender_character_id integer
        /// </summary>
        /// <value>sender_character_id integer</value>
        [DataMember(Name="sender_character_id", EmitDefaultValue=false)]
        public int? SenderCharacterId { get; set; }

        /// <summary>
        /// A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -&gt; Terrible | -5 -&gt; Bad |  0 -&gt; Neutral |  5 -&gt; Good |  10 -&gt; Excellent
        /// </summary>
        /// <value>A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -&gt; Terrible | -5 -&gt; Bad |  0 -&gt; Neutral |  5 -&gt; Good |  10 -&gt; Excellent</value>
        [DataMember(Name="standing_level", EmitDefaultValue=false)]
        public float? StandingLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdNotificationsContacts200Ok {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  SendDate: ").Append(SendDate).Append("\n");
            sb.Append("  SenderCharacterId: ").Append(SenderCharacterId).Append("\n");
            sb.Append("  StandingLevel: ").Append(StandingLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdNotificationsContacts200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdNotificationsContacts200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdNotificationsContacts200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdNotificationsContacts200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.NotificationId == input.NotificationId ||
                    (this.NotificationId != null &&
                    this.NotificationId.Equals(input.NotificationId))
                ) && 
                (
                    this.SendDate == input.SendDate ||
                    (this.SendDate != null &&
                    this.SendDate.Equals(input.SendDate))
                ) && 
                (
                    this.SenderCharacterId == input.SenderCharacterId ||
                    (this.SenderCharacterId != null &&
                    this.SenderCharacterId.Equals(input.SenderCharacterId))
                ) && 
                (
                    this.StandingLevel == input.StandingLevel ||
                    (this.StandingLevel != null &&
                    this.StandingLevel.Equals(input.StandingLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.NotificationId != null)
                    hashCode = hashCode * 59 + this.NotificationId.GetHashCode();
                if (this.SendDate != null)
                    hashCode = hashCode * 59 + this.SendDate.GetHashCode();
                if (this.SenderCharacterId != null)
                    hashCode = hashCode * 59 + this.SenderCharacterId.GetHashCode();
                if (this.StandingLevel != null)
                    hashCode = hashCode * 59 + this.StandingLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
