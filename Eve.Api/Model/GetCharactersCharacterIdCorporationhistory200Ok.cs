/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdCorporationhistory200Ok :  IEquatable<GetCharactersCharacterIdCorporationhistory200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdCorporationhistory200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdCorporationhistory200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdCorporationhistory200Ok" /> class.
        /// </summary>
        /// <param name="CorporationId">corporation_id integer (required).</param>
        /// <param name="IsDeleted">True if the corporation has been deleted.</param>
        /// <param name="RecordId">An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous (required).</param>
        /// <param name="StartDate">start_date string (required).</param>
        public GetCharactersCharacterIdCorporationhistory200Ok(int? CorporationId = default(int?), bool? IsDeleted = default(bool?), int? RecordId = default(int?), DateTime? StartDate = default(DateTime?))
        {
            // to ensure "CorporationId" is required (not null)
            if (CorporationId == null)
            {
                throw new InvalidDataException("CorporationId is a required property for GetCharactersCharacterIdCorporationhistory200Ok and cannot be null");
            }
            else
            {
                this.CorporationId = CorporationId;
            }
            // to ensure "RecordId" is required (not null)
            if (RecordId == null)
            {
                throw new InvalidDataException("RecordId is a required property for GetCharactersCharacterIdCorporationhistory200Ok and cannot be null");
            }
            else
            {
                this.RecordId = RecordId;
            }
            // to ensure "StartDate" is required (not null)
            if (StartDate == null)
            {
                throw new InvalidDataException("StartDate is a required property for GetCharactersCharacterIdCorporationhistory200Ok and cannot be null");
            }
            else
            {
                this.StartDate = StartDate;
            }
            this.IsDeleted = IsDeleted;
        }
        
        /// <summary>
        /// corporation_id integer
        /// </summary>
        /// <value>corporation_id integer</value>
        [DataMember(Name="corporation_id", EmitDefaultValue=false)]
        public int? CorporationId { get; set; }

        /// <summary>
        /// True if the corporation has been deleted
        /// </summary>
        /// <value>True if the corporation has been deleted</value>
        [DataMember(Name="is_deleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
        /// </summary>
        /// <value>An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous</value>
        [DataMember(Name="record_id", EmitDefaultValue=false)]
        public int? RecordId { get; set; }

        /// <summary>
        /// start_date string
        /// </summary>
        /// <value>start_date string</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdCorporationhistory200Ok {\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdCorporationhistory200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdCorporationhistory200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdCorporationhistory200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdCorporationhistory200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorporationId == input.CorporationId ||
                    (this.CorporationId != null &&
                    this.CorporationId.Equals(input.CorporationId))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorporationId != null)
                    hashCode = hashCode * 59 + this.CorporationId.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
