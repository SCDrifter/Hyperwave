/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetFleetsFleetIdMembers200Ok :  IEquatable<GetFleetsFleetIdMembers200Ok>, IValidatableObject
    {
        /// <summary>
        /// Member’s role in fleet
        /// </summary>
        /// <value>Member’s role in fleet</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum Fleetcommander for "fleet_commander"
            /// </summary>
            [EnumMember(Value = "fleet_commander")]
            Fleetcommander,
            
            /// <summary>
            /// Enum Wingcommander for "wing_commander"
            /// </summary>
            [EnumMember(Value = "wing_commander")]
            Wingcommander,
            
            /// <summary>
            /// Enum Squadcommander for "squad_commander"
            /// </summary>
            [EnumMember(Value = "squad_commander")]
            Squadcommander,
            
            /// <summary>
            /// Enum Squadmember for "squad_member"
            /// </summary>
            [EnumMember(Value = "squad_member")]
            Squadmember
        }

        /// <summary>
        /// Member’s role in fleet
        /// </summary>
        /// <value>Member’s role in fleet</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFleetsFleetIdMembers200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetFleetsFleetIdMembers200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFleetsFleetIdMembers200Ok" /> class.
        /// </summary>
        /// <param name="CharacterId">character_id integer (required).</param>
        /// <param name="JoinTime">join_time string (required).</param>
        /// <param name="Role">Member’s role in fleet (required).</param>
        /// <param name="RoleName">Localized role names (required).</param>
        /// <param name="ShipTypeId">ship_type_id integer (required).</param>
        /// <param name="SolarSystemId">Solar system the member is located in (required).</param>
        /// <param name="SquadId">ID of the squad the member is in. If not applicable, will be set to -1 (required).</param>
        /// <param name="StationId">Station in which the member is docked in, if applicable.</param>
        /// <param name="TakesFleetWarp">Whether the member take fleet warps (required).</param>
        /// <param name="WingId">ID of the wing the member is in. If not applicable, will be set to -1 (required).</param>
        public GetFleetsFleetIdMembers200Ok(int? CharacterId = default(int?), DateTime? JoinTime = default(DateTime?), RoleEnum? Role = default(RoleEnum?), string RoleName = default(string), int? ShipTypeId = default(int?), int? SolarSystemId = default(int?), long? SquadId = default(long?), long? StationId = default(long?), bool? TakesFleetWarp = default(bool?), long? WingId = default(long?))
        {
            // to ensure "CharacterId" is required (not null)
            if (CharacterId == null)
            {
                throw new InvalidDataException("CharacterId is a required property for GetFleetsFleetIdMembers200Ok and cannot be null");
            }
            else
            {
                this.CharacterId = CharacterId;
            }
            // to ensure "JoinTime" is required (not null)
            if (JoinTime == null)
            {
                throw new InvalidDataException("JoinTime is a required property for GetFleetsFleetIdMembers200Ok and cannot be null");
            }
            else
            {
                this.JoinTime = JoinTime;
            }
            // to ensure "Role" is required (not null)
            if (Role == null)
            {
                throw new InvalidDataException("Role is a required property for GetFleetsFleetIdMembers200Ok and cannot be null");
            }
            else
            {
                this.Role = Role;
            }
            // to ensure "RoleName" is required (not null)
            if (RoleName == null)
            {
                throw new InvalidDataException("RoleName is a required property for GetFleetsFleetIdMembers200Ok and cannot be null");
            }
            else
            {
                this.RoleName = RoleName;
            }
            // to ensure "ShipTypeId" is required (not null)
            if (ShipTypeId == null)
            {
                throw new InvalidDataException("ShipTypeId is a required property for GetFleetsFleetIdMembers200Ok and cannot be null");
            }
            else
            {
                this.ShipTypeId = ShipTypeId;
            }
            // to ensure "SolarSystemId" is required (not null)
            if (SolarSystemId == null)
            {
                throw new InvalidDataException("SolarSystemId is a required property for GetFleetsFleetIdMembers200Ok and cannot be null");
            }
            else
            {
                this.SolarSystemId = SolarSystemId;
            }
            // to ensure "SquadId" is required (not null)
            if (SquadId == null)
            {
                throw new InvalidDataException("SquadId is a required property for GetFleetsFleetIdMembers200Ok and cannot be null");
            }
            else
            {
                this.SquadId = SquadId;
            }
            // to ensure "TakesFleetWarp" is required (not null)
            if (TakesFleetWarp == null)
            {
                throw new InvalidDataException("TakesFleetWarp is a required property for GetFleetsFleetIdMembers200Ok and cannot be null");
            }
            else
            {
                this.TakesFleetWarp = TakesFleetWarp;
            }
            // to ensure "WingId" is required (not null)
            if (WingId == null)
            {
                throw new InvalidDataException("WingId is a required property for GetFleetsFleetIdMembers200Ok and cannot be null");
            }
            else
            {
                this.WingId = WingId;
            }
            this.StationId = StationId;
        }
        
        /// <summary>
        /// character_id integer
        /// </summary>
        /// <value>character_id integer</value>
        [DataMember(Name="character_id", EmitDefaultValue=false)]
        public int? CharacterId { get; set; }

        /// <summary>
        /// join_time string
        /// </summary>
        /// <value>join_time string</value>
        [DataMember(Name="join_time", EmitDefaultValue=false)]
        public DateTime? JoinTime { get; set; }


        /// <summary>
        /// Localized role names
        /// </summary>
        /// <value>Localized role names</value>
        [DataMember(Name="role_name", EmitDefaultValue=false)]
        public string RoleName { get; set; }

        /// <summary>
        /// ship_type_id integer
        /// </summary>
        /// <value>ship_type_id integer</value>
        [DataMember(Name="ship_type_id", EmitDefaultValue=false)]
        public int? ShipTypeId { get; set; }

        /// <summary>
        /// Solar system the member is located in
        /// </summary>
        /// <value>Solar system the member is located in</value>
        [DataMember(Name="solar_system_id", EmitDefaultValue=false)]
        public int? SolarSystemId { get; set; }

        /// <summary>
        /// ID of the squad the member is in. If not applicable, will be set to -1
        /// </summary>
        /// <value>ID of the squad the member is in. If not applicable, will be set to -1</value>
        [DataMember(Name="squad_id", EmitDefaultValue=false)]
        public long? SquadId { get; set; }

        /// <summary>
        /// Station in which the member is docked in, if applicable
        /// </summary>
        /// <value>Station in which the member is docked in, if applicable</value>
        [DataMember(Name="station_id", EmitDefaultValue=false)]
        public long? StationId { get; set; }

        /// <summary>
        /// Whether the member take fleet warps
        /// </summary>
        /// <value>Whether the member take fleet warps</value>
        [DataMember(Name="takes_fleet_warp", EmitDefaultValue=false)]
        public bool? TakesFleetWarp { get; set; }

        /// <summary>
        /// ID of the wing the member is in. If not applicable, will be set to -1
        /// </summary>
        /// <value>ID of the wing the member is in. If not applicable, will be set to -1</value>
        [DataMember(Name="wing_id", EmitDefaultValue=false)]
        public long? WingId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFleetsFleetIdMembers200Ok {\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  JoinTime: ").Append(JoinTime).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  ShipTypeId: ").Append(ShipTypeId).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  SquadId: ").Append(SquadId).Append("\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  TakesFleetWarp: ").Append(TakesFleetWarp).Append("\n");
            sb.Append("  WingId: ").Append(WingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetFleetsFleetIdMembers200Ok);
        }

        /// <summary>
        /// Returns true if GetFleetsFleetIdMembers200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFleetsFleetIdMembers200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFleetsFleetIdMembers200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.JoinTime == input.JoinTime ||
                    (this.JoinTime != null &&
                    this.JoinTime.Equals(input.JoinTime))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.RoleName == input.RoleName ||
                    (this.RoleName != null &&
                    this.RoleName.Equals(input.RoleName))
                ) && 
                (
                    this.ShipTypeId == input.ShipTypeId ||
                    (this.ShipTypeId != null &&
                    this.ShipTypeId.Equals(input.ShipTypeId))
                ) && 
                (
                    this.SolarSystemId == input.SolarSystemId ||
                    (this.SolarSystemId != null &&
                    this.SolarSystemId.Equals(input.SolarSystemId))
                ) && 
                (
                    this.SquadId == input.SquadId ||
                    (this.SquadId != null &&
                    this.SquadId.Equals(input.SquadId))
                ) && 
                (
                    this.StationId == input.StationId ||
                    (this.StationId != null &&
                    this.StationId.Equals(input.StationId))
                ) && 
                (
                    this.TakesFleetWarp == input.TakesFleetWarp ||
                    (this.TakesFleetWarp != null &&
                    this.TakesFleetWarp.Equals(input.TakesFleetWarp))
                ) && 
                (
                    this.WingId == input.WingId ||
                    (this.WingId != null &&
                    this.WingId.Equals(input.WingId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.JoinTime != null)
                    hashCode = hashCode * 59 + this.JoinTime.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.RoleName != null)
                    hashCode = hashCode * 59 + this.RoleName.GetHashCode();
                if (this.ShipTypeId != null)
                    hashCode = hashCode * 59 + this.ShipTypeId.GetHashCode();
                if (this.SolarSystemId != null)
                    hashCode = hashCode * 59 + this.SolarSystemId.GetHashCode();
                if (this.SquadId != null)
                    hashCode = hashCode * 59 + this.SquadId.GetHashCode();
                if (this.StationId != null)
                    hashCode = hashCode * 59 + this.StationId.GetHashCode();
                if (this.TakesFleetWarp != null)
                    hashCode = hashCode * 59 + this.TakesFleetWarp.GetHashCode();
                if (this.WingId != null)
                    hashCode = hashCode * 59 + this.WingId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
