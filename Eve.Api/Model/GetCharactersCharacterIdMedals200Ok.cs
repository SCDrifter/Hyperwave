/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdMedals200Ok :  IEquatable<GetCharactersCharacterIdMedals200Ok>, IValidatableObject
    {
        /// <summary>
        /// status string
        /// </summary>
        /// <value>status string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Public for "public"
            /// </summary>
            [EnumMember(Value = "public")]
            Public,
            
            /// <summary>
            /// Enum Private for "private"
            /// </summary>
            [EnumMember(Value = "private")]
            Private
        }

        /// <summary>
        /// status string
        /// </summary>
        /// <value>status string</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdMedals200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdMedals200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdMedals200Ok" /> class.
        /// </summary>
        /// <param name="CorporationId">corporation_id integer (required).</param>
        /// <param name="Date">date string (required).</param>
        /// <param name="Description">description string (required).</param>
        /// <param name="Graphics">graphics array (required).</param>
        /// <param name="IssuerId">issuer_id integer (required).</param>
        /// <param name="MedalId">medal_id integer (required).</param>
        /// <param name="Reason">reason string (required).</param>
        /// <param name="Status">status string (required).</param>
        /// <param name="Title">title string (required).</param>
        public GetCharactersCharacterIdMedals200Ok(int? CorporationId = default(int?), DateTime? Date = default(DateTime?), string Description = default(string), List<GetCharactersCharacterIdMedalsGraphic> Graphics = default(List<GetCharactersCharacterIdMedalsGraphic>), int? IssuerId = default(int?), int? MedalId = default(int?), string Reason = default(string), StatusEnum? Status = default(StatusEnum?), string Title = default(string))
        {
            // to ensure "CorporationId" is required (not null)
            if (CorporationId == null)
            {
                throw new InvalidDataException("CorporationId is a required property for GetCharactersCharacterIdMedals200Ok and cannot be null");
            }
            else
            {
                this.CorporationId = CorporationId;
            }
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for GetCharactersCharacterIdMedals200Ok and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for GetCharactersCharacterIdMedals200Ok and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "Graphics" is required (not null)
            if (Graphics == null)
            {
                throw new InvalidDataException("Graphics is a required property for GetCharactersCharacterIdMedals200Ok and cannot be null");
            }
            else
            {
                this.Graphics = Graphics;
            }
            // to ensure "IssuerId" is required (not null)
            if (IssuerId == null)
            {
                throw new InvalidDataException("IssuerId is a required property for GetCharactersCharacterIdMedals200Ok and cannot be null");
            }
            else
            {
                this.IssuerId = IssuerId;
            }
            // to ensure "MedalId" is required (not null)
            if (MedalId == null)
            {
                throw new InvalidDataException("MedalId is a required property for GetCharactersCharacterIdMedals200Ok and cannot be null");
            }
            else
            {
                this.MedalId = MedalId;
            }
            // to ensure "Reason" is required (not null)
            if (Reason == null)
            {
                throw new InvalidDataException("Reason is a required property for GetCharactersCharacterIdMedals200Ok and cannot be null");
            }
            else
            {
                this.Reason = Reason;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for GetCharactersCharacterIdMedals200Ok and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for GetCharactersCharacterIdMedals200Ok and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
        }
        
        /// <summary>
        /// corporation_id integer
        /// </summary>
        /// <value>corporation_id integer</value>
        [DataMember(Name="corporation_id", EmitDefaultValue=false)]
        public int? CorporationId { get; set; }

        /// <summary>
        /// date string
        /// </summary>
        /// <value>date string</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// description string
        /// </summary>
        /// <value>description string</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// graphics array
        /// </summary>
        /// <value>graphics array</value>
        [DataMember(Name="graphics", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdMedalsGraphic> Graphics { get; set; }

        /// <summary>
        /// issuer_id integer
        /// </summary>
        /// <value>issuer_id integer</value>
        [DataMember(Name="issuer_id", EmitDefaultValue=false)]
        public int? IssuerId { get; set; }

        /// <summary>
        /// medal_id integer
        /// </summary>
        /// <value>medal_id integer</value>
        [DataMember(Name="medal_id", EmitDefaultValue=false)]
        public int? MedalId { get; set; }

        /// <summary>
        /// reason string
        /// </summary>
        /// <value>reason string</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }


        /// <summary>
        /// title string
        /// </summary>
        /// <value>title string</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdMedals200Ok {\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Graphics: ").Append(Graphics).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  MedalId: ").Append(MedalId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdMedals200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdMedals200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdMedals200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdMedals200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorporationId == input.CorporationId ||
                    (this.CorporationId != null &&
                    this.CorporationId.Equals(input.CorporationId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Graphics == input.Graphics ||
                    (this.Graphics != null &&
                    this.Graphics.SequenceEqual(input.Graphics))
                ) && 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.MedalId == input.MedalId ||
                    (this.MedalId != null &&
                    this.MedalId.Equals(input.MedalId))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorporationId != null)
                    hashCode = hashCode * 59 + this.CorporationId.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Graphics != null)
                    hashCode = hashCode * 59 + this.Graphics.GetHashCode();
                if (this.IssuerId != null)
                    hashCode = hashCode * 59 + this.IssuerId.GetHashCode();
                if (this.MedalId != null)
                    hashCode = hashCode * 59 + this.MedalId.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
