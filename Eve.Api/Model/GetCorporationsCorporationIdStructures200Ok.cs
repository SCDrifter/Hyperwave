/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdStructures200Ok :  IEquatable<GetCorporationsCorporationIdStructures200Ok>, IValidatableObject
    {
        /// <summary>
        /// state string
        /// </summary>
        /// <value>state string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Anchorvulnerable for "anchor_vulnerable"
            /// </summary>
            [EnumMember(Value = "anchor_vulnerable")]
            Anchorvulnerable,
            
            /// <summary>
            /// Enum Anchoring for "anchoring"
            /// </summary>
            [EnumMember(Value = "anchoring")]
            Anchoring,
            
            /// <summary>
            /// Enum Armorreinforce for "armor_reinforce"
            /// </summary>
            [EnumMember(Value = "armor_reinforce")]
            Armorreinforce,
            
            /// <summary>
            /// Enum Armorvulnerable for "armor_vulnerable"
            /// </summary>
            [EnumMember(Value = "armor_vulnerable")]
            Armorvulnerable,
            
            /// <summary>
            /// Enum Deployvulnerable for "deploy_vulnerable"
            /// </summary>
            [EnumMember(Value = "deploy_vulnerable")]
            Deployvulnerable,
            
            /// <summary>
            /// Enum Fittinginvulnerable for "fitting_invulnerable"
            /// </summary>
            [EnumMember(Value = "fitting_invulnerable")]
            Fittinginvulnerable,
            
            /// <summary>
            /// Enum Hullreinforce for "hull_reinforce"
            /// </summary>
            [EnumMember(Value = "hull_reinforce")]
            Hullreinforce,
            
            /// <summary>
            /// Enum Hullvulnerable for "hull_vulnerable"
            /// </summary>
            [EnumMember(Value = "hull_vulnerable")]
            Hullvulnerable,
            
            /// <summary>
            /// Enum Onlinedeprecated for "online_deprecated"
            /// </summary>
            [EnumMember(Value = "online_deprecated")]
            Onlinedeprecated,
            
            /// <summary>
            /// Enum Onliningvulnerable for "onlining_vulnerable"
            /// </summary>
            [EnumMember(Value = "onlining_vulnerable")]
            Onliningvulnerable,
            
            /// <summary>
            /// Enum Shieldvulnerable for "shield_vulnerable"
            /// </summary>
            [EnumMember(Value = "shield_vulnerable")]
            Shieldvulnerable,
            
            /// <summary>
            /// Enum Unanchored for "unanchored"
            /// </summary>
            [EnumMember(Value = "unanchored")]
            Unanchored,
            
            /// <summary>
            /// Enum Unknown for "unknown"
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown
        }

        /// <summary>
        /// state string
        /// </summary>
        /// <value>state string</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdStructures200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdStructures200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdStructures200Ok" /> class.
        /// </summary>
        /// <param name="CorporationId">ID of the corporation that owns the structure (required).</param>
        /// <param name="FuelExpires">Date on which the structure will run out of fuel.</param>
        /// <param name="NextReinforceApply">The date and time when the structure&#39;s newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect.</param>
        /// <param name="NextReinforceHour">The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply.</param>
        /// <param name="NextReinforceWeekday">The requested change to reinforce_weekday that will take effect at the time shown by next_reinforce_apply.</param>
        /// <param name="ProfileId">The id of the ACL profile for this citadel (required).</param>
        /// <param name="ReinforceHour">The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property (required).</param>
        /// <param name="ReinforceWeekday">The day of the week when the structure exits its final reinforcement period and becomes vulnerable to attack against its hull. Monday is 0 and Sunday is 6.</param>
        /// <param name="Services">Contains a list of service upgrades, and their state.</param>
        /// <param name="State">state string (required).</param>
        /// <param name="StateTimerEnd">Date at which the structure will move to it&#39;s next state.</param>
        /// <param name="StateTimerStart">Date at which the structure entered it&#39;s current state.</param>
        /// <param name="StructureId">The Item ID of the structure (required).</param>
        /// <param name="SystemId">The solar system the structure is in (required).</param>
        /// <param name="TypeId">The type id of the structure (required).</param>
        /// <param name="UnanchorsAt">Date at which the structure will unanchor.</param>
        public GetCorporationsCorporationIdStructures200Ok(int? CorporationId = default(int?), DateTime? FuelExpires = default(DateTime?), DateTime? NextReinforceApply = default(DateTime?), int? NextReinforceHour = default(int?), int? NextReinforceWeekday = default(int?), int? ProfileId = default(int?), int? ReinforceHour = default(int?), int? ReinforceWeekday = default(int?), List<GetCorporationsCorporationIdStructuresService> Services = default(List<GetCorporationsCorporationIdStructuresService>), StateEnum? State = default(StateEnum?), DateTime? StateTimerEnd = default(DateTime?), DateTime? StateTimerStart = default(DateTime?), long? StructureId = default(long?), int? SystemId = default(int?), int? TypeId = default(int?), DateTime? UnanchorsAt = default(DateTime?))
        {
            // to ensure "CorporationId" is required (not null)
            if (CorporationId == null)
            {
                throw new InvalidDataException("CorporationId is a required property for GetCorporationsCorporationIdStructures200Ok and cannot be null");
            }
            else
            {
                this.CorporationId = CorporationId;
            }
            // to ensure "ProfileId" is required (not null)
            if (ProfileId == null)
            {
                throw new InvalidDataException("ProfileId is a required property for GetCorporationsCorporationIdStructures200Ok and cannot be null");
            }
            else
            {
                this.ProfileId = ProfileId;
            }
            // to ensure "ReinforceHour" is required (not null)
            if (ReinforceHour == null)
            {
                throw new InvalidDataException("ReinforceHour is a required property for GetCorporationsCorporationIdStructures200Ok and cannot be null");
            }
            else
            {
                this.ReinforceHour = ReinforceHour;
            }
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for GetCorporationsCorporationIdStructures200Ok and cannot be null");
            }
            else
            {
                this.State = State;
            }
            // to ensure "StructureId" is required (not null)
            if (StructureId == null)
            {
                throw new InvalidDataException("StructureId is a required property for GetCorporationsCorporationIdStructures200Ok and cannot be null");
            }
            else
            {
                this.StructureId = StructureId;
            }
            // to ensure "SystemId" is required (not null)
            if (SystemId == null)
            {
                throw new InvalidDataException("SystemId is a required property for GetCorporationsCorporationIdStructures200Ok and cannot be null");
            }
            else
            {
                this.SystemId = SystemId;
            }
            // to ensure "TypeId" is required (not null)
            if (TypeId == null)
            {
                throw new InvalidDataException("TypeId is a required property for GetCorporationsCorporationIdStructures200Ok and cannot be null");
            }
            else
            {
                this.TypeId = TypeId;
            }
            this.FuelExpires = FuelExpires;
            this.NextReinforceApply = NextReinforceApply;
            this.NextReinforceHour = NextReinforceHour;
            this.NextReinforceWeekday = NextReinforceWeekday;
            this.ReinforceWeekday = ReinforceWeekday;
            this.Services = Services;
            this.StateTimerEnd = StateTimerEnd;
            this.StateTimerStart = StateTimerStart;
            this.UnanchorsAt = UnanchorsAt;
        }
        
        /// <summary>
        /// ID of the corporation that owns the structure
        /// </summary>
        /// <value>ID of the corporation that owns the structure</value>
        [DataMember(Name="corporation_id", EmitDefaultValue=false)]
        public int? CorporationId { get; set; }

        /// <summary>
        /// Date on which the structure will run out of fuel
        /// </summary>
        /// <value>Date on which the structure will run out of fuel</value>
        [DataMember(Name="fuel_expires", EmitDefaultValue=false)]
        public DateTime? FuelExpires { get; set; }

        /// <summary>
        /// The date and time when the structure&#39;s newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
        /// </summary>
        /// <value>The date and time when the structure&#39;s newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect</value>
        [DataMember(Name="next_reinforce_apply", EmitDefaultValue=false)]
        public DateTime? NextReinforceApply { get; set; }

        /// <summary>
        /// The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply
        /// </summary>
        /// <value>The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply</value>
        [DataMember(Name="next_reinforce_hour", EmitDefaultValue=false)]
        public int? NextReinforceHour { get; set; }

        /// <summary>
        /// The requested change to reinforce_weekday that will take effect at the time shown by next_reinforce_apply
        /// </summary>
        /// <value>The requested change to reinforce_weekday that will take effect at the time shown by next_reinforce_apply</value>
        [DataMember(Name="next_reinforce_weekday", EmitDefaultValue=false)]
        public int? NextReinforceWeekday { get; set; }

        /// <summary>
        /// The id of the ACL profile for this citadel
        /// </summary>
        /// <value>The id of the ACL profile for this citadel</value>
        [DataMember(Name="profile_id", EmitDefaultValue=false)]
        public int? ProfileId { get; set; }

        /// <summary>
        /// The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property
        /// </summary>
        /// <value>The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property</value>
        [DataMember(Name="reinforce_hour", EmitDefaultValue=false)]
        public int? ReinforceHour { get; set; }

        /// <summary>
        /// The day of the week when the structure exits its final reinforcement period and becomes vulnerable to attack against its hull. Monday is 0 and Sunday is 6
        /// </summary>
        /// <value>The day of the week when the structure exits its final reinforcement period and becomes vulnerable to attack against its hull. Monday is 0 and Sunday is 6</value>
        [DataMember(Name="reinforce_weekday", EmitDefaultValue=false)]
        public int? ReinforceWeekday { get; set; }

        /// <summary>
        /// Contains a list of service upgrades, and their state
        /// </summary>
        /// <value>Contains a list of service upgrades, and their state</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<GetCorporationsCorporationIdStructuresService> Services { get; set; }


        /// <summary>
        /// Date at which the structure will move to it&#39;s next state
        /// </summary>
        /// <value>Date at which the structure will move to it&#39;s next state</value>
        [DataMember(Name="state_timer_end", EmitDefaultValue=false)]
        public DateTime? StateTimerEnd { get; set; }

        /// <summary>
        /// Date at which the structure entered it&#39;s current state
        /// </summary>
        /// <value>Date at which the structure entered it&#39;s current state</value>
        [DataMember(Name="state_timer_start", EmitDefaultValue=false)]
        public DateTime? StateTimerStart { get; set; }

        /// <summary>
        /// The Item ID of the structure
        /// </summary>
        /// <value>The Item ID of the structure</value>
        [DataMember(Name="structure_id", EmitDefaultValue=false)]
        public long? StructureId { get; set; }

        /// <summary>
        /// The solar system the structure is in
        /// </summary>
        /// <value>The solar system the structure is in</value>
        [DataMember(Name="system_id", EmitDefaultValue=false)]
        public int? SystemId { get; set; }

        /// <summary>
        /// The type id of the structure
        /// </summary>
        /// <value>The type id of the structure</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Date at which the structure will unanchor
        /// </summary>
        /// <value>Date at which the structure will unanchor</value>
        [DataMember(Name="unanchors_at", EmitDefaultValue=false)]
        public DateTime? UnanchorsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdStructures200Ok {\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  FuelExpires: ").Append(FuelExpires).Append("\n");
            sb.Append("  NextReinforceApply: ").Append(NextReinforceApply).Append("\n");
            sb.Append("  NextReinforceHour: ").Append(NextReinforceHour).Append("\n");
            sb.Append("  NextReinforceWeekday: ").Append(NextReinforceWeekday).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ReinforceHour: ").Append(ReinforceHour).Append("\n");
            sb.Append("  ReinforceWeekday: ").Append(ReinforceWeekday).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateTimerEnd: ").Append(StateTimerEnd).Append("\n");
            sb.Append("  StateTimerStart: ").Append(StateTimerStart).Append("\n");
            sb.Append("  StructureId: ").Append(StructureId).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  UnanchorsAt: ").Append(UnanchorsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdStructures200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdStructures200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdStructures200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdStructures200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorporationId == input.CorporationId ||
                    (this.CorporationId != null &&
                    this.CorporationId.Equals(input.CorporationId))
                ) && 
                (
                    this.FuelExpires == input.FuelExpires ||
                    (this.FuelExpires != null &&
                    this.FuelExpires.Equals(input.FuelExpires))
                ) && 
                (
                    this.NextReinforceApply == input.NextReinforceApply ||
                    (this.NextReinforceApply != null &&
                    this.NextReinforceApply.Equals(input.NextReinforceApply))
                ) && 
                (
                    this.NextReinforceHour == input.NextReinforceHour ||
                    (this.NextReinforceHour != null &&
                    this.NextReinforceHour.Equals(input.NextReinforceHour))
                ) && 
                (
                    this.NextReinforceWeekday == input.NextReinforceWeekday ||
                    (this.NextReinforceWeekday != null &&
                    this.NextReinforceWeekday.Equals(input.NextReinforceWeekday))
                ) && 
                (
                    this.ProfileId == input.ProfileId ||
                    (this.ProfileId != null &&
                    this.ProfileId.Equals(input.ProfileId))
                ) && 
                (
                    this.ReinforceHour == input.ReinforceHour ||
                    (this.ReinforceHour != null &&
                    this.ReinforceHour.Equals(input.ReinforceHour))
                ) && 
                (
                    this.ReinforceWeekday == input.ReinforceWeekday ||
                    (this.ReinforceWeekday != null &&
                    this.ReinforceWeekday.Equals(input.ReinforceWeekday))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.SequenceEqual(input.Services))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateTimerEnd == input.StateTimerEnd ||
                    (this.StateTimerEnd != null &&
                    this.StateTimerEnd.Equals(input.StateTimerEnd))
                ) && 
                (
                    this.StateTimerStart == input.StateTimerStart ||
                    (this.StateTimerStart != null &&
                    this.StateTimerStart.Equals(input.StateTimerStart))
                ) && 
                (
                    this.StructureId == input.StructureId ||
                    (this.StructureId != null &&
                    this.StructureId.Equals(input.StructureId))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.UnanchorsAt == input.UnanchorsAt ||
                    (this.UnanchorsAt != null &&
                    this.UnanchorsAt.Equals(input.UnanchorsAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorporationId != null)
                    hashCode = hashCode * 59 + this.CorporationId.GetHashCode();
                if (this.FuelExpires != null)
                    hashCode = hashCode * 59 + this.FuelExpires.GetHashCode();
                if (this.NextReinforceApply != null)
                    hashCode = hashCode * 59 + this.NextReinforceApply.GetHashCode();
                if (this.NextReinforceHour != null)
                    hashCode = hashCode * 59 + this.NextReinforceHour.GetHashCode();
                if (this.NextReinforceWeekday != null)
                    hashCode = hashCode * 59 + this.NextReinforceWeekday.GetHashCode();
                if (this.ProfileId != null)
                    hashCode = hashCode * 59 + this.ProfileId.GetHashCode();
                if (this.ReinforceHour != null)
                    hashCode = hashCode * 59 + this.ReinforceHour.GetHashCode();
                if (this.ReinforceWeekday != null)
                    hashCode = hashCode * 59 + this.ReinforceWeekday.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StateTimerEnd != null)
                    hashCode = hashCode * 59 + this.StateTimerEnd.GetHashCode();
                if (this.StateTimerStart != null)
                    hashCode = hashCode * 59 + this.StateTimerStart.GetHashCode();
                if (this.StructureId != null)
                    hashCode = hashCode * 59 + this.StructureId.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.UnanchorsAt != null)
                    hashCode = hashCode * 59 + this.UnanchorsAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NextReinforceHour (int?) maximum
            if(this.NextReinforceHour > (int?)23)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextReinforceHour, must be a value less than or equal to 23.", new [] { "NextReinforceHour" });
            }

            // NextReinforceHour (int?) minimum
            if(this.NextReinforceHour < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextReinforceHour, must be a value greater than or equal to 0.", new [] { "NextReinforceHour" });
            }

            // NextReinforceWeekday (int?) maximum
            if(this.NextReinforceWeekday > (int?)6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextReinforceWeekday, must be a value less than or equal to 6.", new [] { "NextReinforceWeekday" });
            }

            // NextReinforceWeekday (int?) minimum
            if(this.NextReinforceWeekday < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextReinforceWeekday, must be a value greater than or equal to 0.", new [] { "NextReinforceWeekday" });
            }

            // ReinforceHour (int?) maximum
            if(this.ReinforceHour > (int?)23)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReinforceHour, must be a value less than or equal to 23.", new [] { "ReinforceHour" });
            }

            // ReinforceHour (int?) minimum
            if(this.ReinforceHour < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReinforceHour, must be a value greater than or equal to 0.", new [] { "ReinforceHour" });
            }

            // ReinforceWeekday (int?) maximum
            if(this.ReinforceWeekday > (int?)6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReinforceWeekday, must be a value less than or equal to 6.", new [] { "ReinforceWeekday" });
            }

            // ReinforceWeekday (int?) minimum
            if(this.ReinforceWeekday < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReinforceWeekday, must be a value greater than or equal to 0.", new [] { "ReinforceWeekday" });
            }

            yield break;
        }
    }

}
