/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdNotifications200Ok :  IEquatable<GetCharactersCharacterIdNotifications200Ok>, IValidatableObject
    {
        /// <summary>
        /// sender_type string
        /// </summary>
        /// <value>sender_type string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SenderTypeEnum
        {
            
            /// <summary>
            /// Enum Character for "character"
            /// </summary>
            [EnumMember(Value = "character")]
            Character,
            
            /// <summary>
            /// Enum Corporation for "corporation"
            /// </summary>
            [EnumMember(Value = "corporation")]
            Corporation,
            
            /// <summary>
            /// Enum Alliance for "alliance"
            /// </summary>
            [EnumMember(Value = "alliance")]
            Alliance,
            
            /// <summary>
            /// Enum Faction for "faction"
            /// </summary>
            [EnumMember(Value = "faction")]
            Faction,
            
            /// <summary>
            /// Enum Other for "other"
            /// </summary>
            [EnumMember(Value = "other")]
            Other
        }

        /// <summary>
        /// type string
        /// </summary>
        /// <value>type string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum AcceptedAlly for "AcceptedAlly"
            /// </summary>
            [EnumMember(Value = "AcceptedAlly")]
            AcceptedAlly,
            
            /// <summary>
            /// Enum AcceptedSurrender for "AcceptedSurrender"
            /// </summary>
            [EnumMember(Value = "AcceptedSurrender")]
            AcceptedSurrender,
            
            /// <summary>
            /// Enum AllAnchoringMsg for "AllAnchoringMsg"
            /// </summary>
            [EnumMember(Value = "AllAnchoringMsg")]
            AllAnchoringMsg,
            
            /// <summary>
            /// Enum AllMaintenanceBillMsg for "AllMaintenanceBillMsg"
            /// </summary>
            [EnumMember(Value = "AllMaintenanceBillMsg")]
            AllMaintenanceBillMsg,
            
            /// <summary>
            /// Enum AllStrucInvulnerableMsg for "AllStrucInvulnerableMsg"
            /// </summary>
            [EnumMember(Value = "AllStrucInvulnerableMsg")]
            AllStrucInvulnerableMsg,
            
            /// <summary>
            /// Enum AllStructVulnerableMsg for "AllStructVulnerableMsg"
            /// </summary>
            [EnumMember(Value = "AllStructVulnerableMsg")]
            AllStructVulnerableMsg,
            
            /// <summary>
            /// Enum AllWarCorpJoinedAllianceMsg for "AllWarCorpJoinedAllianceMsg"
            /// </summary>
            [EnumMember(Value = "AllWarCorpJoinedAllianceMsg")]
            AllWarCorpJoinedAllianceMsg,
            
            /// <summary>
            /// Enum AllWarDeclaredMsg for "AllWarDeclaredMsg"
            /// </summary>
            [EnumMember(Value = "AllWarDeclaredMsg")]
            AllWarDeclaredMsg,
            
            /// <summary>
            /// Enum AllWarInvalidatedMsg for "AllWarInvalidatedMsg"
            /// </summary>
            [EnumMember(Value = "AllWarInvalidatedMsg")]
            AllWarInvalidatedMsg,
            
            /// <summary>
            /// Enum AllWarRetractedMsg for "AllWarRetractedMsg"
            /// </summary>
            [EnumMember(Value = "AllWarRetractedMsg")]
            AllWarRetractedMsg,
            
            /// <summary>
            /// Enum AllWarSurrenderMsg for "AllWarSurrenderMsg"
            /// </summary>
            [EnumMember(Value = "AllWarSurrenderMsg")]
            AllWarSurrenderMsg,
            
            /// <summary>
            /// Enum AllianceCapitalChanged for "AllianceCapitalChanged"
            /// </summary>
            [EnumMember(Value = "AllianceCapitalChanged")]
            AllianceCapitalChanged,
            
            /// <summary>
            /// Enum AllianceWarDeclaredV2 for "AllianceWarDeclaredV2"
            /// </summary>
            [EnumMember(Value = "AllianceWarDeclaredV2")]
            AllianceWarDeclaredV2,
            
            /// <summary>
            /// Enum AllyContractCancelled for "AllyContractCancelled"
            /// </summary>
            [EnumMember(Value = "AllyContractCancelled")]
            AllyContractCancelled,
            
            /// <summary>
            /// Enum AllyJoinedWarAggressorMsg for "AllyJoinedWarAggressorMsg"
            /// </summary>
            [EnumMember(Value = "AllyJoinedWarAggressorMsg")]
            AllyJoinedWarAggressorMsg,
            
            /// <summary>
            /// Enum AllyJoinedWarAllyMsg for "AllyJoinedWarAllyMsg"
            /// </summary>
            [EnumMember(Value = "AllyJoinedWarAllyMsg")]
            AllyJoinedWarAllyMsg,
            
            /// <summary>
            /// Enum AllyJoinedWarDefenderMsg for "AllyJoinedWarDefenderMsg"
            /// </summary>
            [EnumMember(Value = "AllyJoinedWarDefenderMsg")]
            AllyJoinedWarDefenderMsg,
            
            /// <summary>
            /// Enum BattlePunishFriendlyFire for "BattlePunishFriendlyFire"
            /// </summary>
            [EnumMember(Value = "BattlePunishFriendlyFire")]
            BattlePunishFriendlyFire,
            
            /// <summary>
            /// Enum BillOutOfMoneyMsg for "BillOutOfMoneyMsg"
            /// </summary>
            [EnumMember(Value = "BillOutOfMoneyMsg")]
            BillOutOfMoneyMsg,
            
            /// <summary>
            /// Enum BillPaidCorpAllMsg for "BillPaidCorpAllMsg"
            /// </summary>
            [EnumMember(Value = "BillPaidCorpAllMsg")]
            BillPaidCorpAllMsg,
            
            /// <summary>
            /// Enum BountyClaimMsg for "BountyClaimMsg"
            /// </summary>
            [EnumMember(Value = "BountyClaimMsg")]
            BountyClaimMsg,
            
            /// <summary>
            /// Enum BountyESSShared for "BountyESSShared"
            /// </summary>
            [EnumMember(Value = "BountyESSShared")]
            BountyESSShared,
            
            /// <summary>
            /// Enum BountyESSTaken for "BountyESSTaken"
            /// </summary>
            [EnumMember(Value = "BountyESSTaken")]
            BountyESSTaken,
            
            /// <summary>
            /// Enum BountyPlacedAlliance for "BountyPlacedAlliance"
            /// </summary>
            [EnumMember(Value = "BountyPlacedAlliance")]
            BountyPlacedAlliance,
            
            /// <summary>
            /// Enum BountyPlacedChar for "BountyPlacedChar"
            /// </summary>
            [EnumMember(Value = "BountyPlacedChar")]
            BountyPlacedChar,
            
            /// <summary>
            /// Enum BountyPlacedCorp for "BountyPlacedCorp"
            /// </summary>
            [EnumMember(Value = "BountyPlacedCorp")]
            BountyPlacedCorp,
            
            /// <summary>
            /// Enum BountyYourBountyClaimed for "BountyYourBountyClaimed"
            /// </summary>
            [EnumMember(Value = "BountyYourBountyClaimed")]
            BountyYourBountyClaimed,
            
            /// <summary>
            /// Enum BuddyConnectContactAdd for "BuddyConnectContactAdd"
            /// </summary>
            [EnumMember(Value = "BuddyConnectContactAdd")]
            BuddyConnectContactAdd,
            
            /// <summary>
            /// Enum CharAppAcceptMsg for "CharAppAcceptMsg"
            /// </summary>
            [EnumMember(Value = "CharAppAcceptMsg")]
            CharAppAcceptMsg,
            
            /// <summary>
            /// Enum CharAppRejectMsg for "CharAppRejectMsg"
            /// </summary>
            [EnumMember(Value = "CharAppRejectMsg")]
            CharAppRejectMsg,
            
            /// <summary>
            /// Enum CharAppWithdrawMsg for "CharAppWithdrawMsg"
            /// </summary>
            [EnumMember(Value = "CharAppWithdrawMsg")]
            CharAppWithdrawMsg,
            
            /// <summary>
            /// Enum CharLeftCorpMsg for "CharLeftCorpMsg"
            /// </summary>
            [EnumMember(Value = "CharLeftCorpMsg")]
            CharLeftCorpMsg,
            
            /// <summary>
            /// Enum CharMedalMsg for "CharMedalMsg"
            /// </summary>
            [EnumMember(Value = "CharMedalMsg")]
            CharMedalMsg,
            
            /// <summary>
            /// Enum CharTerminationMsg for "CharTerminationMsg"
            /// </summary>
            [EnumMember(Value = "CharTerminationMsg")]
            CharTerminationMsg,
            
            /// <summary>
            /// Enum CloneActivationMsg for "CloneActivationMsg"
            /// </summary>
            [EnumMember(Value = "CloneActivationMsg")]
            CloneActivationMsg,
            
            /// <summary>
            /// Enum CloneActivationMsg2 for "CloneActivationMsg2"
            /// </summary>
            [EnumMember(Value = "CloneActivationMsg2")]
            CloneActivationMsg2,
            
            /// <summary>
            /// Enum CloneMovedMsg for "CloneMovedMsg"
            /// </summary>
            [EnumMember(Value = "CloneMovedMsg")]
            CloneMovedMsg,
            
            /// <summary>
            /// Enum CloneRevokedMsg1 for "CloneRevokedMsg1"
            /// </summary>
            [EnumMember(Value = "CloneRevokedMsg1")]
            CloneRevokedMsg1,
            
            /// <summary>
            /// Enum CloneRevokedMsg2 for "CloneRevokedMsg2"
            /// </summary>
            [EnumMember(Value = "CloneRevokedMsg2")]
            CloneRevokedMsg2,
            
            /// <summary>
            /// Enum CombatOperationFinished for "CombatOperationFinished"
            /// </summary>
            [EnumMember(Value = "CombatOperationFinished")]
            CombatOperationFinished,
            
            /// <summary>
            /// Enum ContactAdd for "ContactAdd"
            /// </summary>
            [EnumMember(Value = "ContactAdd")]
            ContactAdd,
            
            /// <summary>
            /// Enum ContactEdit for "ContactEdit"
            /// </summary>
            [EnumMember(Value = "ContactEdit")]
            ContactEdit,
            
            /// <summary>
            /// Enum ContainerPasswordMsg for "ContainerPasswordMsg"
            /// </summary>
            [EnumMember(Value = "ContainerPasswordMsg")]
            ContainerPasswordMsg,
            
            /// <summary>
            /// Enum CorpAllBillMsg for "CorpAllBillMsg"
            /// </summary>
            [EnumMember(Value = "CorpAllBillMsg")]
            CorpAllBillMsg,
            
            /// <summary>
            /// Enum CorpAppAcceptMsg for "CorpAppAcceptMsg"
            /// </summary>
            [EnumMember(Value = "CorpAppAcceptMsg")]
            CorpAppAcceptMsg,
            
            /// <summary>
            /// Enum CorpAppInvitedMsg for "CorpAppInvitedMsg"
            /// </summary>
            [EnumMember(Value = "CorpAppInvitedMsg")]
            CorpAppInvitedMsg,
            
            /// <summary>
            /// Enum CorpAppNewMsg for "CorpAppNewMsg"
            /// </summary>
            [EnumMember(Value = "CorpAppNewMsg")]
            CorpAppNewMsg,
            
            /// <summary>
            /// Enum CorpAppRejectCustomMsg for "CorpAppRejectCustomMsg"
            /// </summary>
            [EnumMember(Value = "CorpAppRejectCustomMsg")]
            CorpAppRejectCustomMsg,
            
            /// <summary>
            /// Enum CorpAppRejectMsg for "CorpAppRejectMsg"
            /// </summary>
            [EnumMember(Value = "CorpAppRejectMsg")]
            CorpAppRejectMsg,
            
            /// <summary>
            /// Enum CorpBecameWarEligible for "CorpBecameWarEligible"
            /// </summary>
            [EnumMember(Value = "CorpBecameWarEligible")]
            CorpBecameWarEligible,
            
            /// <summary>
            /// Enum CorpDividendMsg for "CorpDividendMsg"
            /// </summary>
            [EnumMember(Value = "CorpDividendMsg")]
            CorpDividendMsg,
            
            /// <summary>
            /// Enum CorpFriendlyFireDisableTimerCompleted for "CorpFriendlyFireDisableTimerCompleted"
            /// </summary>
            [EnumMember(Value = "CorpFriendlyFireDisableTimerCompleted")]
            CorpFriendlyFireDisableTimerCompleted,
            
            /// <summary>
            /// Enum CorpFriendlyFireDisableTimerStarted for "CorpFriendlyFireDisableTimerStarted"
            /// </summary>
            [EnumMember(Value = "CorpFriendlyFireDisableTimerStarted")]
            CorpFriendlyFireDisableTimerStarted,
            
            /// <summary>
            /// Enum CorpFriendlyFireEnableTimerCompleted for "CorpFriendlyFireEnableTimerCompleted"
            /// </summary>
            [EnumMember(Value = "CorpFriendlyFireEnableTimerCompleted")]
            CorpFriendlyFireEnableTimerCompleted,
            
            /// <summary>
            /// Enum CorpFriendlyFireEnableTimerStarted for "CorpFriendlyFireEnableTimerStarted"
            /// </summary>
            [EnumMember(Value = "CorpFriendlyFireEnableTimerStarted")]
            CorpFriendlyFireEnableTimerStarted,
            
            /// <summary>
            /// Enum CorpKicked for "CorpKicked"
            /// </summary>
            [EnumMember(Value = "CorpKicked")]
            CorpKicked,
            
            /// <summary>
            /// Enum CorpLiquidationMsg for "CorpLiquidationMsg"
            /// </summary>
            [EnumMember(Value = "CorpLiquidationMsg")]
            CorpLiquidationMsg,
            
            /// <summary>
            /// Enum CorpNewCEOMsg for "CorpNewCEOMsg"
            /// </summary>
            [EnumMember(Value = "CorpNewCEOMsg")]
            CorpNewCEOMsg,
            
            /// <summary>
            /// Enum CorpNewsMsg for "CorpNewsMsg"
            /// </summary>
            [EnumMember(Value = "CorpNewsMsg")]
            CorpNewsMsg,
            
            /// <summary>
            /// Enum CorpNoLongerWarEligible for "CorpNoLongerWarEligible"
            /// </summary>
            [EnumMember(Value = "CorpNoLongerWarEligible")]
            CorpNoLongerWarEligible,
            
            /// <summary>
            /// Enum CorpOfficeExpirationMsg for "CorpOfficeExpirationMsg"
            /// </summary>
            [EnumMember(Value = "CorpOfficeExpirationMsg")]
            CorpOfficeExpirationMsg,
            
            /// <summary>
            /// Enum CorpStructLostMsg for "CorpStructLostMsg"
            /// </summary>
            [EnumMember(Value = "CorpStructLostMsg")]
            CorpStructLostMsg,
            
            /// <summary>
            /// Enum CorpTaxChangeMsg for "CorpTaxChangeMsg"
            /// </summary>
            [EnumMember(Value = "CorpTaxChangeMsg")]
            CorpTaxChangeMsg,
            
            /// <summary>
            /// Enum CorpVoteCEORevokedMsg for "CorpVoteCEORevokedMsg"
            /// </summary>
            [EnumMember(Value = "CorpVoteCEORevokedMsg")]
            CorpVoteCEORevokedMsg,
            
            /// <summary>
            /// Enum CorpVoteMsg for "CorpVoteMsg"
            /// </summary>
            [EnumMember(Value = "CorpVoteMsg")]
            CorpVoteMsg,
            
            /// <summary>
            /// Enum CorpWarDeclaredMsg for "CorpWarDeclaredMsg"
            /// </summary>
            [EnumMember(Value = "CorpWarDeclaredMsg")]
            CorpWarDeclaredMsg,
            
            /// <summary>
            /// Enum CorpWarDeclaredV2 for "CorpWarDeclaredV2"
            /// </summary>
            [EnumMember(Value = "CorpWarDeclaredV2")]
            CorpWarDeclaredV2,
            
            /// <summary>
            /// Enum CorpWarFightingLegalMsg for "CorpWarFightingLegalMsg"
            /// </summary>
            [EnumMember(Value = "CorpWarFightingLegalMsg")]
            CorpWarFightingLegalMsg,
            
            /// <summary>
            /// Enum CorpWarInvalidatedMsg for "CorpWarInvalidatedMsg"
            /// </summary>
            [EnumMember(Value = "CorpWarInvalidatedMsg")]
            CorpWarInvalidatedMsg,
            
            /// <summary>
            /// Enum CorpWarRetractedMsg for "CorpWarRetractedMsg"
            /// </summary>
            [EnumMember(Value = "CorpWarRetractedMsg")]
            CorpWarRetractedMsg,
            
            /// <summary>
            /// Enum CorpWarSurrenderMsg for "CorpWarSurrenderMsg"
            /// </summary>
            [EnumMember(Value = "CorpWarSurrenderMsg")]
            CorpWarSurrenderMsg,
            
            /// <summary>
            /// Enum CustomsMsg for "CustomsMsg"
            /// </summary>
            [EnumMember(Value = "CustomsMsg")]
            CustomsMsg,
            
            /// <summary>
            /// Enum DeclareWar for "DeclareWar"
            /// </summary>
            [EnumMember(Value = "DeclareWar")]
            DeclareWar,
            
            /// <summary>
            /// Enum DistrictAttacked for "DistrictAttacked"
            /// </summary>
            [EnumMember(Value = "DistrictAttacked")]
            DistrictAttacked,
            
            /// <summary>
            /// Enum DustAppAcceptedMsg for "DustAppAcceptedMsg"
            /// </summary>
            [EnumMember(Value = "DustAppAcceptedMsg")]
            DustAppAcceptedMsg,
            
            /// <summary>
            /// Enum EntosisCaptureStarted for "EntosisCaptureStarted"
            /// </summary>
            [EnumMember(Value = "EntosisCaptureStarted")]
            EntosisCaptureStarted,
            
            /// <summary>
            /// Enum FWAllianceKickMsg for "FWAllianceKickMsg"
            /// </summary>
            [EnumMember(Value = "FWAllianceKickMsg")]
            FWAllianceKickMsg,
            
            /// <summary>
            /// Enum FWAllianceWarningMsg for "FWAllianceWarningMsg"
            /// </summary>
            [EnumMember(Value = "FWAllianceWarningMsg")]
            FWAllianceWarningMsg,
            
            /// <summary>
            /// Enum FWCharKickMsg for "FWCharKickMsg"
            /// </summary>
            [EnumMember(Value = "FWCharKickMsg")]
            FWCharKickMsg,
            
            /// <summary>
            /// Enum FWCharRankGainMsg for "FWCharRankGainMsg"
            /// </summary>
            [EnumMember(Value = "FWCharRankGainMsg")]
            FWCharRankGainMsg,
            
            /// <summary>
            /// Enum FWCharRankLossMsg for "FWCharRankLossMsg"
            /// </summary>
            [EnumMember(Value = "FWCharRankLossMsg")]
            FWCharRankLossMsg,
            
            /// <summary>
            /// Enum FWCharWarningMsg for "FWCharWarningMsg"
            /// </summary>
            [EnumMember(Value = "FWCharWarningMsg")]
            FWCharWarningMsg,
            
            /// <summary>
            /// Enum FWCorpJoinMsg for "FWCorpJoinMsg"
            /// </summary>
            [EnumMember(Value = "FWCorpJoinMsg")]
            FWCorpJoinMsg,
            
            /// <summary>
            /// Enum FWCorpKickMsg for "FWCorpKickMsg"
            /// </summary>
            [EnumMember(Value = "FWCorpKickMsg")]
            FWCorpKickMsg,
            
            /// <summary>
            /// Enum FWCorpLeaveMsg for "FWCorpLeaveMsg"
            /// </summary>
            [EnumMember(Value = "FWCorpLeaveMsg")]
            FWCorpLeaveMsg,
            
            /// <summary>
            /// Enum FWCorpWarningMsg for "FWCorpWarningMsg"
            /// </summary>
            [EnumMember(Value = "FWCorpWarningMsg")]
            FWCorpWarningMsg,
            
            /// <summary>
            /// Enum FacWarCorpJoinRequestMsg for "FacWarCorpJoinRequestMsg"
            /// </summary>
            [EnumMember(Value = "FacWarCorpJoinRequestMsg")]
            FacWarCorpJoinRequestMsg,
            
            /// <summary>
            /// Enum FacWarCorpJoinWithdrawMsg for "FacWarCorpJoinWithdrawMsg"
            /// </summary>
            [EnumMember(Value = "FacWarCorpJoinWithdrawMsg")]
            FacWarCorpJoinWithdrawMsg,
            
            /// <summary>
            /// Enum FacWarCorpLeaveRequestMsg for "FacWarCorpLeaveRequestMsg"
            /// </summary>
            [EnumMember(Value = "FacWarCorpLeaveRequestMsg")]
            FacWarCorpLeaveRequestMsg,
            
            /// <summary>
            /// Enum FacWarCorpLeaveWithdrawMsg for "FacWarCorpLeaveWithdrawMsg"
            /// </summary>
            [EnumMember(Value = "FacWarCorpLeaveWithdrawMsg")]
            FacWarCorpLeaveWithdrawMsg,
            
            /// <summary>
            /// Enum FacWarLPDisqualifiedEvent for "FacWarLPDisqualifiedEvent"
            /// </summary>
            [EnumMember(Value = "FacWarLPDisqualifiedEvent")]
            FacWarLPDisqualifiedEvent,
            
            /// <summary>
            /// Enum FacWarLPDisqualifiedKill for "FacWarLPDisqualifiedKill"
            /// </summary>
            [EnumMember(Value = "FacWarLPDisqualifiedKill")]
            FacWarLPDisqualifiedKill,
            
            /// <summary>
            /// Enum FacWarLPPayoutEvent for "FacWarLPPayoutEvent"
            /// </summary>
            [EnumMember(Value = "FacWarLPPayoutEvent")]
            FacWarLPPayoutEvent,
            
            /// <summary>
            /// Enum FacWarLPPayoutKill for "FacWarLPPayoutKill"
            /// </summary>
            [EnumMember(Value = "FacWarLPPayoutKill")]
            FacWarLPPayoutKill,
            
            /// <summary>
            /// Enum GameTimeAdded for "GameTimeAdded"
            /// </summary>
            [EnumMember(Value = "GameTimeAdded")]
            GameTimeAdded,
            
            /// <summary>
            /// Enum GameTimeReceived for "GameTimeReceived"
            /// </summary>
            [EnumMember(Value = "GameTimeReceived")]
            GameTimeReceived,
            
            /// <summary>
            /// Enum GameTimeSent for "GameTimeSent"
            /// </summary>
            [EnumMember(Value = "GameTimeSent")]
            GameTimeSent,
            
            /// <summary>
            /// Enum GiftReceived for "GiftReceived"
            /// </summary>
            [EnumMember(Value = "GiftReceived")]
            GiftReceived,
            
            /// <summary>
            /// Enum IHubDestroyedByBillFailure for "IHubDestroyedByBillFailure"
            /// </summary>
            [EnumMember(Value = "IHubDestroyedByBillFailure")]
            IHubDestroyedByBillFailure,
            
            /// <summary>
            /// Enum IncursionCompletedMsg for "IncursionCompletedMsg"
            /// </summary>
            [EnumMember(Value = "IncursionCompletedMsg")]
            IncursionCompletedMsg,
            
            /// <summary>
            /// Enum IndustryOperationFinished for "IndustryOperationFinished"
            /// </summary>
            [EnumMember(Value = "IndustryOperationFinished")]
            IndustryOperationFinished,
            
            /// <summary>
            /// Enum IndustryTeamAuctionLost for "IndustryTeamAuctionLost"
            /// </summary>
            [EnumMember(Value = "IndustryTeamAuctionLost")]
            IndustryTeamAuctionLost,
            
            /// <summary>
            /// Enum IndustryTeamAuctionWon for "IndustryTeamAuctionWon"
            /// </summary>
            [EnumMember(Value = "IndustryTeamAuctionWon")]
            IndustryTeamAuctionWon,
            
            /// <summary>
            /// Enum InfrastructureHubBillAboutToExpire for "InfrastructureHubBillAboutToExpire"
            /// </summary>
            [EnumMember(Value = "InfrastructureHubBillAboutToExpire")]
            InfrastructureHubBillAboutToExpire,
            
            /// <summary>
            /// Enum InsuranceExpirationMsg for "InsuranceExpirationMsg"
            /// </summary>
            [EnumMember(Value = "InsuranceExpirationMsg")]
            InsuranceExpirationMsg,
            
            /// <summary>
            /// Enum InsuranceFirstShipMsg for "InsuranceFirstShipMsg"
            /// </summary>
            [EnumMember(Value = "InsuranceFirstShipMsg")]
            InsuranceFirstShipMsg,
            
            /// <summary>
            /// Enum InsuranceInvalidatedMsg for "InsuranceInvalidatedMsg"
            /// </summary>
            [EnumMember(Value = "InsuranceInvalidatedMsg")]
            InsuranceInvalidatedMsg,
            
            /// <summary>
            /// Enum InsuranceIssuedMsg for "InsuranceIssuedMsg"
            /// </summary>
            [EnumMember(Value = "InsuranceIssuedMsg")]
            InsuranceIssuedMsg,
            
            /// <summary>
            /// Enum InsurancePayoutMsg for "InsurancePayoutMsg"
            /// </summary>
            [EnumMember(Value = "InsurancePayoutMsg")]
            InsurancePayoutMsg,
            
            /// <summary>
            /// Enum InvasionSystemLogin for "InvasionSystemLogin"
            /// </summary>
            [EnumMember(Value = "InvasionSystemLogin")]
            InvasionSystemLogin,
            
            /// <summary>
            /// Enum JumpCloneDeletedMsg1 for "JumpCloneDeletedMsg1"
            /// </summary>
            [EnumMember(Value = "JumpCloneDeletedMsg1")]
            JumpCloneDeletedMsg1,
            
            /// <summary>
            /// Enum JumpCloneDeletedMsg2 for "JumpCloneDeletedMsg2"
            /// </summary>
            [EnumMember(Value = "JumpCloneDeletedMsg2")]
            JumpCloneDeletedMsg2,
            
            /// <summary>
            /// Enum KillReportFinalBlow for "KillReportFinalBlow"
            /// </summary>
            [EnumMember(Value = "KillReportFinalBlow")]
            KillReportFinalBlow,
            
            /// <summary>
            /// Enum KillReportVictim for "KillReportVictim"
            /// </summary>
            [EnumMember(Value = "KillReportVictim")]
            KillReportVictim,
            
            /// <summary>
            /// Enum KillRightAvailable for "KillRightAvailable"
            /// </summary>
            [EnumMember(Value = "KillRightAvailable")]
            KillRightAvailable,
            
            /// <summary>
            /// Enum KillRightAvailableOpen for "KillRightAvailableOpen"
            /// </summary>
            [EnumMember(Value = "KillRightAvailableOpen")]
            KillRightAvailableOpen,
            
            /// <summary>
            /// Enum KillRightEarned for "KillRightEarned"
            /// </summary>
            [EnumMember(Value = "KillRightEarned")]
            KillRightEarned,
            
            /// <summary>
            /// Enum KillRightUnavailable for "KillRightUnavailable"
            /// </summary>
            [EnumMember(Value = "KillRightUnavailable")]
            KillRightUnavailable,
            
            /// <summary>
            /// Enum KillRightUnavailableOpen for "KillRightUnavailableOpen"
            /// </summary>
            [EnumMember(Value = "KillRightUnavailableOpen")]
            KillRightUnavailableOpen,
            
            /// <summary>
            /// Enum KillRightUsed for "KillRightUsed"
            /// </summary>
            [EnumMember(Value = "KillRightUsed")]
            KillRightUsed,
            
            /// <summary>
            /// Enum LocateCharMsg for "LocateCharMsg"
            /// </summary>
            [EnumMember(Value = "LocateCharMsg")]
            LocateCharMsg,
            
            /// <summary>
            /// Enum MadeWarMutual for "MadeWarMutual"
            /// </summary>
            [EnumMember(Value = "MadeWarMutual")]
            MadeWarMutual,
            
            /// <summary>
            /// Enum MercOfferRetractedMsg for "MercOfferRetractedMsg"
            /// </summary>
            [EnumMember(Value = "MercOfferRetractedMsg")]
            MercOfferRetractedMsg,
            
            /// <summary>
            /// Enum MercOfferedNegotiationMsg for "MercOfferedNegotiationMsg"
            /// </summary>
            [EnumMember(Value = "MercOfferedNegotiationMsg")]
            MercOfferedNegotiationMsg,
            
            /// <summary>
            /// Enum MissionOfferExpirationMsg for "MissionOfferExpirationMsg"
            /// </summary>
            [EnumMember(Value = "MissionOfferExpirationMsg")]
            MissionOfferExpirationMsg,
            
            /// <summary>
            /// Enum MissionTimeoutMsg for "MissionTimeoutMsg"
            /// </summary>
            [EnumMember(Value = "MissionTimeoutMsg")]
            MissionTimeoutMsg,
            
            /// <summary>
            /// Enum MoonminingAutomaticFracture for "MoonminingAutomaticFracture"
            /// </summary>
            [EnumMember(Value = "MoonminingAutomaticFracture")]
            MoonminingAutomaticFracture,
            
            /// <summary>
            /// Enum MoonminingExtractionCancelled for "MoonminingExtractionCancelled"
            /// </summary>
            [EnumMember(Value = "MoonminingExtractionCancelled")]
            MoonminingExtractionCancelled,
            
            /// <summary>
            /// Enum MoonminingExtractionFinished for "MoonminingExtractionFinished"
            /// </summary>
            [EnumMember(Value = "MoonminingExtractionFinished")]
            MoonminingExtractionFinished,
            
            /// <summary>
            /// Enum MoonminingExtractionStarted for "MoonminingExtractionStarted"
            /// </summary>
            [EnumMember(Value = "MoonminingExtractionStarted")]
            MoonminingExtractionStarted,
            
            /// <summary>
            /// Enum MoonminingLaserFired for "MoonminingLaserFired"
            /// </summary>
            [EnumMember(Value = "MoonminingLaserFired")]
            MoonminingLaserFired,
            
            /// <summary>
            /// Enum MutualWarExpired for "MutualWarExpired"
            /// </summary>
            [EnumMember(Value = "MutualWarExpired")]
            MutualWarExpired,
            
            /// <summary>
            /// Enum MutualWarInviteAccepted for "MutualWarInviteAccepted"
            /// </summary>
            [EnumMember(Value = "MutualWarInviteAccepted")]
            MutualWarInviteAccepted,
            
            /// <summary>
            /// Enum MutualWarInviteRejected for "MutualWarInviteRejected"
            /// </summary>
            [EnumMember(Value = "MutualWarInviteRejected")]
            MutualWarInviteRejected,
            
            /// <summary>
            /// Enum MutualWarInviteSent for "MutualWarInviteSent"
            /// </summary>
            [EnumMember(Value = "MutualWarInviteSent")]
            MutualWarInviteSent,
            
            /// <summary>
            /// Enum NPCStandingsGained for "NPCStandingsGained"
            /// </summary>
            [EnumMember(Value = "NPCStandingsGained")]
            NPCStandingsGained,
            
            /// <summary>
            /// Enum NPCStandingsLost for "NPCStandingsLost"
            /// </summary>
            [EnumMember(Value = "NPCStandingsLost")]
            NPCStandingsLost,
            
            /// <summary>
            /// Enum OfferToAllyRetracted for "OfferToAllyRetracted"
            /// </summary>
            [EnumMember(Value = "OfferToAllyRetracted")]
            OfferToAllyRetracted,
            
            /// <summary>
            /// Enum OfferedSurrender for "OfferedSurrender"
            /// </summary>
            [EnumMember(Value = "OfferedSurrender")]
            OfferedSurrender,
            
            /// <summary>
            /// Enum OfferedToAlly for "OfferedToAlly"
            /// </summary>
            [EnumMember(Value = "OfferedToAlly")]
            OfferedToAlly,
            
            /// <summary>
            /// Enum OldLscMessages for "OldLscMessages"
            /// </summary>
            [EnumMember(Value = "OldLscMessages")]
            OldLscMessages,
            
            /// <summary>
            /// Enum OperationFinished for "OperationFinished"
            /// </summary>
            [EnumMember(Value = "OperationFinished")]
            OperationFinished,
            
            /// <summary>
            /// Enum OrbitalAttacked for "OrbitalAttacked"
            /// </summary>
            [EnumMember(Value = "OrbitalAttacked")]
            OrbitalAttacked,
            
            /// <summary>
            /// Enum OrbitalReinforced for "OrbitalReinforced"
            /// </summary>
            [EnumMember(Value = "OrbitalReinforced")]
            OrbitalReinforced,
            
            /// <summary>
            /// Enum OwnershipTransferred for "OwnershipTransferred"
            /// </summary>
            [EnumMember(Value = "OwnershipTransferred")]
            OwnershipTransferred,
            
            /// <summary>
            /// Enum ReimbursementMsg for "ReimbursementMsg"
            /// </summary>
            [EnumMember(Value = "ReimbursementMsg")]
            ReimbursementMsg,
            
            /// <summary>
            /// Enum ResearchMissionAvailableMsg for "ResearchMissionAvailableMsg"
            /// </summary>
            [EnumMember(Value = "ResearchMissionAvailableMsg")]
            ResearchMissionAvailableMsg,
            
            /// <summary>
            /// Enum RetractsWar for "RetractsWar"
            /// </summary>
            [EnumMember(Value = "RetractsWar")]
            RetractsWar,
            
            /// <summary>
            /// Enum SeasonalChallengeCompleted for "SeasonalChallengeCompleted"
            /// </summary>
            [EnumMember(Value = "SeasonalChallengeCompleted")]
            SeasonalChallengeCompleted,
            
            /// <summary>
            /// Enum SovAllClaimAquiredMsg for "SovAllClaimAquiredMsg"
            /// </summary>
            [EnumMember(Value = "SovAllClaimAquiredMsg")]
            SovAllClaimAquiredMsg,
            
            /// <summary>
            /// Enum SovAllClaimLostMsg for "SovAllClaimLostMsg"
            /// </summary>
            [EnumMember(Value = "SovAllClaimLostMsg")]
            SovAllClaimLostMsg,
            
            /// <summary>
            /// Enum SovCommandNodeEventStarted for "SovCommandNodeEventStarted"
            /// </summary>
            [EnumMember(Value = "SovCommandNodeEventStarted")]
            SovCommandNodeEventStarted,
            
            /// <summary>
            /// Enum SovCorpBillLateMsg for "SovCorpBillLateMsg"
            /// </summary>
            [EnumMember(Value = "SovCorpBillLateMsg")]
            SovCorpBillLateMsg,
            
            /// <summary>
            /// Enum SovCorpClaimFailMsg for "SovCorpClaimFailMsg"
            /// </summary>
            [EnumMember(Value = "SovCorpClaimFailMsg")]
            SovCorpClaimFailMsg,
            
            /// <summary>
            /// Enum SovDisruptorMsg for "SovDisruptorMsg"
            /// </summary>
            [EnumMember(Value = "SovDisruptorMsg")]
            SovDisruptorMsg,
            
            /// <summary>
            /// Enum SovStationEnteredFreeport for "SovStationEnteredFreeport"
            /// </summary>
            [EnumMember(Value = "SovStationEnteredFreeport")]
            SovStationEnteredFreeport,
            
            /// <summary>
            /// Enum SovStructureDestroyed for "SovStructureDestroyed"
            /// </summary>
            [EnumMember(Value = "SovStructureDestroyed")]
            SovStructureDestroyed,
            
            /// <summary>
            /// Enum SovStructureReinforced for "SovStructureReinforced"
            /// </summary>
            [EnumMember(Value = "SovStructureReinforced")]
            SovStructureReinforced,
            
            /// <summary>
            /// Enum SovStructureSelfDestructCancel for "SovStructureSelfDestructCancel"
            /// </summary>
            [EnumMember(Value = "SovStructureSelfDestructCancel")]
            SovStructureSelfDestructCancel,
            
            /// <summary>
            /// Enum SovStructureSelfDestructFinished for "SovStructureSelfDestructFinished"
            /// </summary>
            [EnumMember(Value = "SovStructureSelfDestructFinished")]
            SovStructureSelfDestructFinished,
            
            /// <summary>
            /// Enum SovStructureSelfDestructRequested for "SovStructureSelfDestructRequested"
            /// </summary>
            [EnumMember(Value = "SovStructureSelfDestructRequested")]
            SovStructureSelfDestructRequested,
            
            /// <summary>
            /// Enum SovereigntyIHDamageMsg for "SovereigntyIHDamageMsg"
            /// </summary>
            [EnumMember(Value = "SovereigntyIHDamageMsg")]
            SovereigntyIHDamageMsg,
            
            /// <summary>
            /// Enum SovereigntySBUDamageMsg for "SovereigntySBUDamageMsg"
            /// </summary>
            [EnumMember(Value = "SovereigntySBUDamageMsg")]
            SovereigntySBUDamageMsg,
            
            /// <summary>
            /// Enum SovereigntyTCUDamageMsg for "SovereigntyTCUDamageMsg"
            /// </summary>
            [EnumMember(Value = "SovereigntyTCUDamageMsg")]
            SovereigntyTCUDamageMsg,
            
            /// <summary>
            /// Enum StationAggressionMsg1 for "StationAggressionMsg1"
            /// </summary>
            [EnumMember(Value = "StationAggressionMsg1")]
            StationAggressionMsg1,
            
            /// <summary>
            /// Enum StationAggressionMsg2 for "StationAggressionMsg2"
            /// </summary>
            [EnumMember(Value = "StationAggressionMsg2")]
            StationAggressionMsg2,
            
            /// <summary>
            /// Enum StationConquerMsg for "StationConquerMsg"
            /// </summary>
            [EnumMember(Value = "StationConquerMsg")]
            StationConquerMsg,
            
            /// <summary>
            /// Enum StationServiceDisabled for "StationServiceDisabled"
            /// </summary>
            [EnumMember(Value = "StationServiceDisabled")]
            StationServiceDisabled,
            
            /// <summary>
            /// Enum StationServiceEnabled for "StationServiceEnabled"
            /// </summary>
            [EnumMember(Value = "StationServiceEnabled")]
            StationServiceEnabled,
            
            /// <summary>
            /// Enum StationStateChangeMsg for "StationStateChangeMsg"
            /// </summary>
            [EnumMember(Value = "StationStateChangeMsg")]
            StationStateChangeMsg,
            
            /// <summary>
            /// Enum StoryLineMissionAvailableMsg for "StoryLineMissionAvailableMsg"
            /// </summary>
            [EnumMember(Value = "StoryLineMissionAvailableMsg")]
            StoryLineMissionAvailableMsg,
            
            /// <summary>
            /// Enum StructureAnchoring for "StructureAnchoring"
            /// </summary>
            [EnumMember(Value = "StructureAnchoring")]
            StructureAnchoring,
            
            /// <summary>
            /// Enum StructureCourierContractChanged for "StructureCourierContractChanged"
            /// </summary>
            [EnumMember(Value = "StructureCourierContractChanged")]
            StructureCourierContractChanged,
            
            /// <summary>
            /// Enum StructureDestroyed for "StructureDestroyed"
            /// </summary>
            [EnumMember(Value = "StructureDestroyed")]
            StructureDestroyed,
            
            /// <summary>
            /// Enum StructureFuelAlert for "StructureFuelAlert"
            /// </summary>
            [EnumMember(Value = "StructureFuelAlert")]
            StructureFuelAlert,
            
            /// <summary>
            /// Enum StructureItemsDelivered for "StructureItemsDelivered"
            /// </summary>
            [EnumMember(Value = "StructureItemsDelivered")]
            StructureItemsDelivered,
            
            /// <summary>
            /// Enum StructureItemsMovedToSafety for "StructureItemsMovedToSafety"
            /// </summary>
            [EnumMember(Value = "StructureItemsMovedToSafety")]
            StructureItemsMovedToSafety,
            
            /// <summary>
            /// Enum StructureLostArmor for "StructureLostArmor"
            /// </summary>
            [EnumMember(Value = "StructureLostArmor")]
            StructureLostArmor,
            
            /// <summary>
            /// Enum StructureLostShields for "StructureLostShields"
            /// </summary>
            [EnumMember(Value = "StructureLostShields")]
            StructureLostShields,
            
            /// <summary>
            /// Enum StructureOnline for "StructureOnline"
            /// </summary>
            [EnumMember(Value = "StructureOnline")]
            StructureOnline,
            
            /// <summary>
            /// Enum StructureServicesOffline for "StructureServicesOffline"
            /// </summary>
            [EnumMember(Value = "StructureServicesOffline")]
            StructureServicesOffline,
            
            /// <summary>
            /// Enum StructureUnanchoring for "StructureUnanchoring"
            /// </summary>
            [EnumMember(Value = "StructureUnanchoring")]
            StructureUnanchoring,
            
            /// <summary>
            /// Enum StructureUnderAttack for "StructureUnderAttack"
            /// </summary>
            [EnumMember(Value = "StructureUnderAttack")]
            StructureUnderAttack,
            
            /// <summary>
            /// Enum StructureWentHighPower for "StructureWentHighPower"
            /// </summary>
            [EnumMember(Value = "StructureWentHighPower")]
            StructureWentHighPower,
            
            /// <summary>
            /// Enum StructureWentLowPower for "StructureWentLowPower"
            /// </summary>
            [EnumMember(Value = "StructureWentLowPower")]
            StructureWentLowPower,
            
            /// <summary>
            /// Enum StructuresJobsCancelled for "StructuresJobsCancelled"
            /// </summary>
            [EnumMember(Value = "StructuresJobsCancelled")]
            StructuresJobsCancelled,
            
            /// <summary>
            /// Enum StructuresJobsPaused for "StructuresJobsPaused"
            /// </summary>
            [EnumMember(Value = "StructuresJobsPaused")]
            StructuresJobsPaused,
            
            /// <summary>
            /// Enum StructuresReinforcementChanged for "StructuresReinforcementChanged"
            /// </summary>
            [EnumMember(Value = "StructuresReinforcementChanged")]
            StructuresReinforcementChanged,
            
            /// <summary>
            /// Enum TowerAlertMsg for "TowerAlertMsg"
            /// </summary>
            [EnumMember(Value = "TowerAlertMsg")]
            TowerAlertMsg,
            
            /// <summary>
            /// Enum TowerResourceAlertMsg for "TowerResourceAlertMsg"
            /// </summary>
            [EnumMember(Value = "TowerResourceAlertMsg")]
            TowerResourceAlertMsg,
            
            /// <summary>
            /// Enum TransactionReversalMsg for "TransactionReversalMsg"
            /// </summary>
            [EnumMember(Value = "TransactionReversalMsg")]
            TransactionReversalMsg,
            
            /// <summary>
            /// Enum TutorialMsg for "TutorialMsg"
            /// </summary>
            [EnumMember(Value = "TutorialMsg")]
            TutorialMsg,
            
            /// <summary>
            /// Enum WarAdopted for "WarAdopted "
            /// </summary>
            [EnumMember(Value = "WarAdopted ")]
            WarAdopted,
            
            /// <summary>
            /// Enum WarAllyInherited for "WarAllyInherited"
            /// </summary>
            [EnumMember(Value = "WarAllyInherited")]
            WarAllyInherited,
            
            /// <summary>
            /// Enum WarAllyOfferDeclinedMsg for "WarAllyOfferDeclinedMsg"
            /// </summary>
            [EnumMember(Value = "WarAllyOfferDeclinedMsg")]
            WarAllyOfferDeclinedMsg,
            
            /// <summary>
            /// Enum WarConcordInvalidates for "WarConcordInvalidates"
            /// </summary>
            [EnumMember(Value = "WarConcordInvalidates")]
            WarConcordInvalidates,
            
            /// <summary>
            /// Enum WarDeclared for "WarDeclared"
            /// </summary>
            [EnumMember(Value = "WarDeclared")]
            WarDeclared,
            
            /// <summary>
            /// Enum WarHQRemovedFromSpace for "WarHQRemovedFromSpace"
            /// </summary>
            [EnumMember(Value = "WarHQRemovedFromSpace")]
            WarHQRemovedFromSpace,
            
            /// <summary>
            /// Enum WarInherited for "WarInherited"
            /// </summary>
            [EnumMember(Value = "WarInherited")]
            WarInherited,
            
            /// <summary>
            /// Enum WarInvalid for "WarInvalid"
            /// </summary>
            [EnumMember(Value = "WarInvalid")]
            WarInvalid,
            
            /// <summary>
            /// Enum WarRetracted for "WarRetracted"
            /// </summary>
            [EnumMember(Value = "WarRetracted")]
            WarRetracted,
            
            /// <summary>
            /// Enum WarRetractedByConcord for "WarRetractedByConcord"
            /// </summary>
            [EnumMember(Value = "WarRetractedByConcord")]
            WarRetractedByConcord,
            
            /// <summary>
            /// Enum WarSurrenderDeclinedMsg for "WarSurrenderDeclinedMsg"
            /// </summary>
            [EnumMember(Value = "WarSurrenderDeclinedMsg")]
            WarSurrenderDeclinedMsg,
            
            /// <summary>
            /// Enum WarSurrenderOfferMsg for "WarSurrenderOfferMsg"
            /// </summary>
            [EnumMember(Value = "WarSurrenderOfferMsg")]
            WarSurrenderOfferMsg
        }

        /// <summary>
        /// sender_type string
        /// </summary>
        /// <value>sender_type string</value>
        [DataMember(Name="sender_type", EmitDefaultValue=false)]
        public SenderTypeEnum? SenderType { get; set; }
        /// <summary>
        /// type string
        /// </summary>
        /// <value>type string</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdNotifications200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdNotifications200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdNotifications200Ok" /> class.
        /// </summary>
        /// <param name="IsRead">is_read boolean.</param>
        /// <param name="NotificationId">notification_id integer (required).</param>
        /// <param name="SenderId">sender_id integer (required).</param>
        /// <param name="SenderType">sender_type string (required).</param>
        /// <param name="Text">text string.</param>
        /// <param name="Timestamp">timestamp string (required).</param>
        /// <param name="Type">type string (required).</param>
        public GetCharactersCharacterIdNotifications200Ok(bool? IsRead = default(bool?), long? NotificationId = default(long?), int? SenderId = default(int?), SenderTypeEnum? SenderType = default(SenderTypeEnum?), string Text = default(string), DateTime? Timestamp = default(DateTime?), TypeEnum? Type = default(TypeEnum?))
        {
            // to ensure "NotificationId" is required (not null)
            if (NotificationId == null)
            {
                throw new InvalidDataException("NotificationId is a required property for GetCharactersCharacterIdNotifications200Ok and cannot be null");
            }
            else
            {
                this.NotificationId = NotificationId;
            }
            // to ensure "SenderId" is required (not null)
            if (SenderId == null)
            {
                throw new InvalidDataException("SenderId is a required property for GetCharactersCharacterIdNotifications200Ok and cannot be null");
            }
            else
            {
                this.SenderId = SenderId;
            }
            // to ensure "SenderType" is required (not null)
            if (SenderType == null)
            {
                throw new InvalidDataException("SenderType is a required property for GetCharactersCharacterIdNotifications200Ok and cannot be null");
            }
            else
            {
                this.SenderType = SenderType;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for GetCharactersCharacterIdNotifications200Ok and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for GetCharactersCharacterIdNotifications200Ok and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.IsRead = IsRead;
            this.Text = Text;
        }
        
        /// <summary>
        /// is_read boolean
        /// </summary>
        /// <value>is_read boolean</value>
        [DataMember(Name="is_read", EmitDefaultValue=false)]
        public bool? IsRead { get; set; }

        /// <summary>
        /// notification_id integer
        /// </summary>
        /// <value>notification_id integer</value>
        [DataMember(Name="notification_id", EmitDefaultValue=false)]
        public long? NotificationId { get; set; }

        /// <summary>
        /// sender_id integer
        /// </summary>
        /// <value>sender_id integer</value>
        [DataMember(Name="sender_id", EmitDefaultValue=false)]
        public int? SenderId { get; set; }


        /// <summary>
        /// text string
        /// </summary>
        /// <value>text string</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// timestamp string
        /// </summary>
        /// <value>timestamp string</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdNotifications200Ok {\n");
            sb.Append("  IsRead: ").Append(IsRead).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  SenderType: ").Append(SenderType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdNotifications200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdNotifications200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdNotifications200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdNotifications200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsRead == input.IsRead ||
                    (this.IsRead != null &&
                    this.IsRead.Equals(input.IsRead))
                ) && 
                (
                    this.NotificationId == input.NotificationId ||
                    (this.NotificationId != null &&
                    this.NotificationId.Equals(input.NotificationId))
                ) && 
                (
                    this.SenderId == input.SenderId ||
                    (this.SenderId != null &&
                    this.SenderId.Equals(input.SenderId))
                ) && 
                (
                    this.SenderType == input.SenderType ||
                    (this.SenderType != null &&
                    this.SenderType.Equals(input.SenderType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsRead != null)
                    hashCode = hashCode * 59 + this.IsRead.GetHashCode();
                if (this.NotificationId != null)
                    hashCode = hashCode * 59 + this.NotificationId.GetHashCode();
                if (this.SenderId != null)
                    hashCode = hashCode * 59 + this.SenderId.GetHashCode();
                if (this.SenderType != null)
                    hashCode = hashCode * 59 + this.SenderType.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
