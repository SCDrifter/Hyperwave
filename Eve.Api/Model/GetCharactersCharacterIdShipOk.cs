/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdShipOk :  IEquatable<GetCharactersCharacterIdShipOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdShipOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdShipOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdShipOk" /> class.
        /// </summary>
        /// <param name="ShipItemId">Item id&#39;s are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type. (required).</param>
        /// <param name="ShipName">ship_name string (required).</param>
        /// <param name="ShipTypeId">ship_type_id integer (required).</param>
        public GetCharactersCharacterIdShipOk(long? ShipItemId = default(long?), string ShipName = default(string), int? ShipTypeId = default(int?))
        {
            // to ensure "ShipItemId" is required (not null)
            if (ShipItemId == null)
            {
                throw new InvalidDataException("ShipItemId is a required property for GetCharactersCharacterIdShipOk and cannot be null");
            }
            else
            {
                this.ShipItemId = ShipItemId;
            }
            // to ensure "ShipName" is required (not null)
            if (ShipName == null)
            {
                throw new InvalidDataException("ShipName is a required property for GetCharactersCharacterIdShipOk and cannot be null");
            }
            else
            {
                this.ShipName = ShipName;
            }
            // to ensure "ShipTypeId" is required (not null)
            if (ShipTypeId == null)
            {
                throw new InvalidDataException("ShipTypeId is a required property for GetCharactersCharacterIdShipOk and cannot be null");
            }
            else
            {
                this.ShipTypeId = ShipTypeId;
            }
        }
        
        /// <summary>
        /// Item id&#39;s are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.
        /// </summary>
        /// <value>Item id&#39;s are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.</value>
        [DataMember(Name="ship_item_id", EmitDefaultValue=false)]
        public long? ShipItemId { get; set; }

        /// <summary>
        /// ship_name string
        /// </summary>
        /// <value>ship_name string</value>
        [DataMember(Name="ship_name", EmitDefaultValue=false)]
        public string ShipName { get; set; }

        /// <summary>
        /// ship_type_id integer
        /// </summary>
        /// <value>ship_type_id integer</value>
        [DataMember(Name="ship_type_id", EmitDefaultValue=false)]
        public int? ShipTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdShipOk {\n");
            sb.Append("  ShipItemId: ").Append(ShipItemId).Append("\n");
            sb.Append("  ShipName: ").Append(ShipName).Append("\n");
            sb.Append("  ShipTypeId: ").Append(ShipTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdShipOk);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdShipOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdShipOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdShipOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipItemId == input.ShipItemId ||
                    (this.ShipItemId != null &&
                    this.ShipItemId.Equals(input.ShipItemId))
                ) && 
                (
                    this.ShipName == input.ShipName ||
                    (this.ShipName != null &&
                    this.ShipName.Equals(input.ShipName))
                ) && 
                (
                    this.ShipTypeId == input.ShipTypeId ||
                    (this.ShipTypeId != null &&
                    this.ShipTypeId.Equals(input.ShipTypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipItemId != null)
                    hashCode = hashCode * 59 + this.ShipItemId.GetHashCode();
                if (this.ShipName != null)
                    hashCode = hashCode * 59 + this.ShipName.GetHashCode();
                if (this.ShipTypeId != null)
                    hashCode = hashCode * 59 + this.ShipTypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
