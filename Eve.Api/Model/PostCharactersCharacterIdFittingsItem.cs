/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// item object
    /// </summary>
    [DataContract]
    public partial class PostCharactersCharacterIdFittingsItem :  IEquatable<PostCharactersCharacterIdFittingsItem>, IValidatableObject
    {
        /// <summary>
        /// Fitting location for the item. Entries placed in &#39;Invalid&#39; will be discarded. If this leaves the fitting with nothing, it will cause an error.
        /// </summary>
        /// <value>Fitting location for the item. Entries placed in &#39;Invalid&#39; will be discarded. If this leaves the fitting with nothing, it will cause an error.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlagEnum
        {
            
            /// <summary>
            /// Enum Cargo for "Cargo"
            /// </summary>
            [EnumMember(Value = "Cargo")]
            Cargo,
            
            /// <summary>
            /// Enum DroneBay for "DroneBay"
            /// </summary>
            [EnumMember(Value = "DroneBay")]
            DroneBay,
            
            /// <summary>
            /// Enum FighterBay for "FighterBay"
            /// </summary>
            [EnumMember(Value = "FighterBay")]
            FighterBay,
            
            /// <summary>
            /// Enum HiSlot0 for "HiSlot0"
            /// </summary>
            [EnumMember(Value = "HiSlot0")]
            HiSlot0,
            
            /// <summary>
            /// Enum HiSlot1 for "HiSlot1"
            /// </summary>
            [EnumMember(Value = "HiSlot1")]
            HiSlot1,
            
            /// <summary>
            /// Enum HiSlot2 for "HiSlot2"
            /// </summary>
            [EnumMember(Value = "HiSlot2")]
            HiSlot2,
            
            /// <summary>
            /// Enum HiSlot3 for "HiSlot3"
            /// </summary>
            [EnumMember(Value = "HiSlot3")]
            HiSlot3,
            
            /// <summary>
            /// Enum HiSlot4 for "HiSlot4"
            /// </summary>
            [EnumMember(Value = "HiSlot4")]
            HiSlot4,
            
            /// <summary>
            /// Enum HiSlot5 for "HiSlot5"
            /// </summary>
            [EnumMember(Value = "HiSlot5")]
            HiSlot5,
            
            /// <summary>
            /// Enum HiSlot6 for "HiSlot6"
            /// </summary>
            [EnumMember(Value = "HiSlot6")]
            HiSlot6,
            
            /// <summary>
            /// Enum HiSlot7 for "HiSlot7"
            /// </summary>
            [EnumMember(Value = "HiSlot7")]
            HiSlot7,
            
            /// <summary>
            /// Enum Invalid for "Invalid"
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid,
            
            /// <summary>
            /// Enum LoSlot0 for "LoSlot0"
            /// </summary>
            [EnumMember(Value = "LoSlot0")]
            LoSlot0,
            
            /// <summary>
            /// Enum LoSlot1 for "LoSlot1"
            /// </summary>
            [EnumMember(Value = "LoSlot1")]
            LoSlot1,
            
            /// <summary>
            /// Enum LoSlot2 for "LoSlot2"
            /// </summary>
            [EnumMember(Value = "LoSlot2")]
            LoSlot2,
            
            /// <summary>
            /// Enum LoSlot3 for "LoSlot3"
            /// </summary>
            [EnumMember(Value = "LoSlot3")]
            LoSlot3,
            
            /// <summary>
            /// Enum LoSlot4 for "LoSlot4"
            /// </summary>
            [EnumMember(Value = "LoSlot4")]
            LoSlot4,
            
            /// <summary>
            /// Enum LoSlot5 for "LoSlot5"
            /// </summary>
            [EnumMember(Value = "LoSlot5")]
            LoSlot5,
            
            /// <summary>
            /// Enum LoSlot6 for "LoSlot6"
            /// </summary>
            [EnumMember(Value = "LoSlot6")]
            LoSlot6,
            
            /// <summary>
            /// Enum LoSlot7 for "LoSlot7"
            /// </summary>
            [EnumMember(Value = "LoSlot7")]
            LoSlot7,
            
            /// <summary>
            /// Enum MedSlot0 for "MedSlot0"
            /// </summary>
            [EnumMember(Value = "MedSlot0")]
            MedSlot0,
            
            /// <summary>
            /// Enum MedSlot1 for "MedSlot1"
            /// </summary>
            [EnumMember(Value = "MedSlot1")]
            MedSlot1,
            
            /// <summary>
            /// Enum MedSlot2 for "MedSlot2"
            /// </summary>
            [EnumMember(Value = "MedSlot2")]
            MedSlot2,
            
            /// <summary>
            /// Enum MedSlot3 for "MedSlot3"
            /// </summary>
            [EnumMember(Value = "MedSlot3")]
            MedSlot3,
            
            /// <summary>
            /// Enum MedSlot4 for "MedSlot4"
            /// </summary>
            [EnumMember(Value = "MedSlot4")]
            MedSlot4,
            
            /// <summary>
            /// Enum MedSlot5 for "MedSlot5"
            /// </summary>
            [EnumMember(Value = "MedSlot5")]
            MedSlot5,
            
            /// <summary>
            /// Enum MedSlot6 for "MedSlot6"
            /// </summary>
            [EnumMember(Value = "MedSlot6")]
            MedSlot6,
            
            /// <summary>
            /// Enum MedSlot7 for "MedSlot7"
            /// </summary>
            [EnumMember(Value = "MedSlot7")]
            MedSlot7,
            
            /// <summary>
            /// Enum RigSlot0 for "RigSlot0"
            /// </summary>
            [EnumMember(Value = "RigSlot0")]
            RigSlot0,
            
            /// <summary>
            /// Enum RigSlot1 for "RigSlot1"
            /// </summary>
            [EnumMember(Value = "RigSlot1")]
            RigSlot1,
            
            /// <summary>
            /// Enum RigSlot2 for "RigSlot2"
            /// </summary>
            [EnumMember(Value = "RigSlot2")]
            RigSlot2,
            
            /// <summary>
            /// Enum ServiceSlot0 for "ServiceSlot0"
            /// </summary>
            [EnumMember(Value = "ServiceSlot0")]
            ServiceSlot0,
            
            /// <summary>
            /// Enum ServiceSlot1 for "ServiceSlot1"
            /// </summary>
            [EnumMember(Value = "ServiceSlot1")]
            ServiceSlot1,
            
            /// <summary>
            /// Enum ServiceSlot2 for "ServiceSlot2"
            /// </summary>
            [EnumMember(Value = "ServiceSlot2")]
            ServiceSlot2,
            
            /// <summary>
            /// Enum ServiceSlot3 for "ServiceSlot3"
            /// </summary>
            [EnumMember(Value = "ServiceSlot3")]
            ServiceSlot3,
            
            /// <summary>
            /// Enum ServiceSlot4 for "ServiceSlot4"
            /// </summary>
            [EnumMember(Value = "ServiceSlot4")]
            ServiceSlot4,
            
            /// <summary>
            /// Enum ServiceSlot5 for "ServiceSlot5"
            /// </summary>
            [EnumMember(Value = "ServiceSlot5")]
            ServiceSlot5,
            
            /// <summary>
            /// Enum ServiceSlot6 for "ServiceSlot6"
            /// </summary>
            [EnumMember(Value = "ServiceSlot6")]
            ServiceSlot6,
            
            /// <summary>
            /// Enum ServiceSlot7 for "ServiceSlot7"
            /// </summary>
            [EnumMember(Value = "ServiceSlot7")]
            ServiceSlot7,
            
            /// <summary>
            /// Enum SubSystemSlot0 for "SubSystemSlot0"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot0")]
            SubSystemSlot0,
            
            /// <summary>
            /// Enum SubSystemSlot1 for "SubSystemSlot1"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot1")]
            SubSystemSlot1,
            
            /// <summary>
            /// Enum SubSystemSlot2 for "SubSystemSlot2"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot2")]
            SubSystemSlot2,
            
            /// <summary>
            /// Enum SubSystemSlot3 for "SubSystemSlot3"
            /// </summary>
            [EnumMember(Value = "SubSystemSlot3")]
            SubSystemSlot3
        }

        /// <summary>
        /// Fitting location for the item. Entries placed in &#39;Invalid&#39; will be discarded. If this leaves the fitting with nothing, it will cause an error.
        /// </summary>
        /// <value>Fitting location for the item. Entries placed in &#39;Invalid&#39; will be discarded. If this leaves the fitting with nothing, it will cause an error.</value>
        [DataMember(Name="flag", EmitDefaultValue=false)]
        public FlagEnum? Flag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostCharactersCharacterIdFittingsItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostCharactersCharacterIdFittingsItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostCharactersCharacterIdFittingsItem" /> class.
        /// </summary>
        /// <param name="Flag">Fitting location for the item. Entries placed in &#39;Invalid&#39; will be discarded. If this leaves the fitting with nothing, it will cause an error. (required).</param>
        /// <param name="Quantity">quantity integer (required).</param>
        /// <param name="TypeId">type_id integer (required).</param>
        public PostCharactersCharacterIdFittingsItem(FlagEnum? Flag = default(FlagEnum?), int? Quantity = default(int?), int? TypeId = default(int?))
        {
            // to ensure "Flag" is required (not null)
            if (Flag == null)
            {
                throw new InvalidDataException("Flag is a required property for PostCharactersCharacterIdFittingsItem and cannot be null");
            }
            else
            {
                this.Flag = Flag;
            }
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for PostCharactersCharacterIdFittingsItem and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            // to ensure "TypeId" is required (not null)
            if (TypeId == null)
            {
                throw new InvalidDataException("TypeId is a required property for PostCharactersCharacterIdFittingsItem and cannot be null");
            }
            else
            {
                this.TypeId = TypeId;
            }
        }
        

        /// <summary>
        /// quantity integer
        /// </summary>
        /// <value>quantity integer</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostCharactersCharacterIdFittingsItem {\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostCharactersCharacterIdFittingsItem);
        }

        /// <summary>
        /// Returns true if PostCharactersCharacterIdFittingsItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PostCharactersCharacterIdFittingsItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostCharactersCharacterIdFittingsItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Flag == input.Flag ||
                    (this.Flag != null &&
                    this.Flag.Equals(input.Flag))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Flag != null)
                    hashCode = hashCode * 59 + this.Flag.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
