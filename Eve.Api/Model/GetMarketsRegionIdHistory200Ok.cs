/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetMarketsRegionIdHistory200Ok :  IEquatable<GetMarketsRegionIdHistory200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketsRegionIdHistory200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMarketsRegionIdHistory200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketsRegionIdHistory200Ok" /> class.
        /// </summary>
        /// <param name="Average">average number (required).</param>
        /// <param name="Date">The date of this historical statistic entry (required).</param>
        /// <param name="Highest">highest number (required).</param>
        /// <param name="Lowest">lowest number (required).</param>
        /// <param name="OrderCount">Total number of orders happened that day (required).</param>
        /// <param name="Volume">Total (required).</param>
        public GetMarketsRegionIdHistory200Ok(double? Average = default(double?), DateTime? Date = default(DateTime?), double? Highest = default(double?), double? Lowest = default(double?), long? OrderCount = default(long?), long? Volume = default(long?))
        {
            // to ensure "Average" is required (not null)
            if (Average == null)
            {
                throw new InvalidDataException("Average is a required property for GetMarketsRegionIdHistory200Ok and cannot be null");
            }
            else
            {
                this.Average = Average;
            }
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for GetMarketsRegionIdHistory200Ok and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "Highest" is required (not null)
            if (Highest == null)
            {
                throw new InvalidDataException("Highest is a required property for GetMarketsRegionIdHistory200Ok and cannot be null");
            }
            else
            {
                this.Highest = Highest;
            }
            // to ensure "Lowest" is required (not null)
            if (Lowest == null)
            {
                throw new InvalidDataException("Lowest is a required property for GetMarketsRegionIdHistory200Ok and cannot be null");
            }
            else
            {
                this.Lowest = Lowest;
            }
            // to ensure "OrderCount" is required (not null)
            if (OrderCount == null)
            {
                throw new InvalidDataException("OrderCount is a required property for GetMarketsRegionIdHistory200Ok and cannot be null");
            }
            else
            {
                this.OrderCount = OrderCount;
            }
            // to ensure "Volume" is required (not null)
            if (Volume == null)
            {
                throw new InvalidDataException("Volume is a required property for GetMarketsRegionIdHistory200Ok and cannot be null");
            }
            else
            {
                this.Volume = Volume;
            }
        }
        
        /// <summary>
        /// average number
        /// </summary>
        /// <value>average number</value>
        [DataMember(Name="average", EmitDefaultValue=false)]
        public double? Average { get; set; }

        /// <summary>
        /// The date of this historical statistic entry
        /// </summary>
        /// <value>The date of this historical statistic entry</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// highest number
        /// </summary>
        /// <value>highest number</value>
        [DataMember(Name="highest", EmitDefaultValue=false)]
        public double? Highest { get; set; }

        /// <summary>
        /// lowest number
        /// </summary>
        /// <value>lowest number</value>
        [DataMember(Name="lowest", EmitDefaultValue=false)]
        public double? Lowest { get; set; }

        /// <summary>
        /// Total number of orders happened that day
        /// </summary>
        /// <value>Total number of orders happened that day</value>
        [DataMember(Name="order_count", EmitDefaultValue=false)]
        public long? OrderCount { get; set; }

        /// <summary>
        /// Total
        /// </summary>
        /// <value>Total</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public long? Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetMarketsRegionIdHistory200Ok {\n");
            sb.Append("  Average: ").Append(Average).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Highest: ").Append(Highest).Append("\n");
            sb.Append("  Lowest: ").Append(Lowest).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetMarketsRegionIdHistory200Ok);
        }

        /// <summary>
        /// Returns true if GetMarketsRegionIdHistory200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetMarketsRegionIdHistory200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMarketsRegionIdHistory200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Average == input.Average ||
                    (this.Average != null &&
                    this.Average.Equals(input.Average))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Highest == input.Highest ||
                    (this.Highest != null &&
                    this.Highest.Equals(input.Highest))
                ) && 
                (
                    this.Lowest == input.Lowest ||
                    (this.Lowest != null &&
                    this.Lowest.Equals(input.Lowest))
                ) && 
                (
                    this.OrderCount == input.OrderCount ||
                    (this.OrderCount != null &&
                    this.OrderCount.Equals(input.OrderCount))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Average != null)
                    hashCode = hashCode * 59 + this.Average.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Highest != null)
                    hashCode = hashCode * 59 + this.Highest.GetHashCode();
                if (this.Lowest != null)
                    hashCode = hashCode * 59 + this.Lowest.GetHashCode();
                if (this.OrderCount != null)
                    hashCode = hashCode * 59 + this.OrderCount.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
