/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdClonesOk :  IEquatable<GetCharactersCharacterIdClonesOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdClonesOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdClonesOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdClonesOk" /> class.
        /// </summary>
        /// <param name="HomeLocation">HomeLocation.</param>
        /// <param name="JumpClones">jump_clones array (required).</param>
        /// <param name="LastCloneJumpDate">last_clone_jump_date string.</param>
        /// <param name="LastStationChangeDate">last_station_change_date string.</param>
        public GetCharactersCharacterIdClonesOk(GetCharactersCharacterIdClonesHomeLocation HomeLocation = default(GetCharactersCharacterIdClonesHomeLocation), List<GetCharactersCharacterIdClonesJumpClone> JumpClones = default(List<GetCharactersCharacterIdClonesJumpClone>), DateTime? LastCloneJumpDate = default(DateTime?), DateTime? LastStationChangeDate = default(DateTime?))
        {
            // to ensure "JumpClones" is required (not null)
            if (JumpClones == null)
            {
                throw new InvalidDataException("JumpClones is a required property for GetCharactersCharacterIdClonesOk and cannot be null");
            }
            else
            {
                this.JumpClones = JumpClones;
            }
            this.HomeLocation = HomeLocation;
            this.LastCloneJumpDate = LastCloneJumpDate;
            this.LastStationChangeDate = LastStationChangeDate;
        }
        
        /// <summary>
        /// Gets or Sets HomeLocation
        /// </summary>
        [DataMember(Name="home_location", EmitDefaultValue=false)]
        public GetCharactersCharacterIdClonesHomeLocation HomeLocation { get; set; }

        /// <summary>
        /// jump_clones array
        /// </summary>
        /// <value>jump_clones array</value>
        [DataMember(Name="jump_clones", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdClonesJumpClone> JumpClones { get; set; }

        /// <summary>
        /// last_clone_jump_date string
        /// </summary>
        /// <value>last_clone_jump_date string</value>
        [DataMember(Name="last_clone_jump_date", EmitDefaultValue=false)]
        public DateTime? LastCloneJumpDate { get; set; }

        /// <summary>
        /// last_station_change_date string
        /// </summary>
        /// <value>last_station_change_date string</value>
        [DataMember(Name="last_station_change_date", EmitDefaultValue=false)]
        public DateTime? LastStationChangeDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdClonesOk {\n");
            sb.Append("  HomeLocation: ").Append(HomeLocation).Append("\n");
            sb.Append("  JumpClones: ").Append(JumpClones).Append("\n");
            sb.Append("  LastCloneJumpDate: ").Append(LastCloneJumpDate).Append("\n");
            sb.Append("  LastStationChangeDate: ").Append(LastStationChangeDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdClonesOk);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdClonesOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdClonesOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdClonesOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HomeLocation == input.HomeLocation ||
                    (this.HomeLocation != null &&
                    this.HomeLocation.Equals(input.HomeLocation))
                ) && 
                (
                    this.JumpClones == input.JumpClones ||
                    (this.JumpClones != null &&
                    this.JumpClones.SequenceEqual(input.JumpClones))
                ) && 
                (
                    this.LastCloneJumpDate == input.LastCloneJumpDate ||
                    (this.LastCloneJumpDate != null &&
                    this.LastCloneJumpDate.Equals(input.LastCloneJumpDate))
                ) && 
                (
                    this.LastStationChangeDate == input.LastStationChangeDate ||
                    (this.LastStationChangeDate != null &&
                    this.LastStationChangeDate.Equals(input.LastStationChangeDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HomeLocation != null)
                    hashCode = hashCode * 59 + this.HomeLocation.GetHashCode();
                if (this.JumpClones != null)
                    hashCode = hashCode * 59 + this.JumpClones.GetHashCode();
                if (this.LastCloneJumpDate != null)
                    hashCode = hashCode * 59 + this.LastCloneJumpDate.GetHashCode();
                if (this.LastStationChangeDate != null)
                    hashCode = hashCode * 59 + this.LastStationChangeDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
