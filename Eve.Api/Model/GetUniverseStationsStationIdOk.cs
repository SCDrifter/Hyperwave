/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Eve.Api.Client.SwaggerDateConverter;

namespace Eve.Api.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseStationsStationIdOk :  IEquatable<GetUniverseStationsStationIdOk>, IValidatableObject
    {

        /// <summary>
        /// service string
        /// </summary>
        /// <value>service string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServicesEnum
        {
            
            /// <summary>
            /// Enum Bountymissions for "bounty-missions"
            /// </summary>
            [EnumMember(Value = "bounty-missions")]
            Bountymissions,
            
            /// <summary>
            /// Enum Assasinationmissions for "assasination-missions"
            /// </summary>
            [EnumMember(Value = "assasination-missions")]
            Assasinationmissions,
            
            /// <summary>
            /// Enum Couriermissions for "courier-missions"
            /// </summary>
            [EnumMember(Value = "courier-missions")]
            Couriermissions,
            
            /// <summary>
            /// Enum Interbus for "interbus"
            /// </summary>
            [EnumMember(Value = "interbus")]
            Interbus,
            
            /// <summary>
            /// Enum Reprocessingplant for "reprocessing-plant"
            /// </summary>
            [EnumMember(Value = "reprocessing-plant")]
            Reprocessingplant,
            
            /// <summary>
            /// Enum Refinery for "refinery"
            /// </summary>
            [EnumMember(Value = "refinery")]
            Refinery,
            
            /// <summary>
            /// Enum Market for "market"
            /// </summary>
            [EnumMember(Value = "market")]
            Market,
            
            /// <summary>
            /// Enum Blackmarket for "black-market"
            /// </summary>
            [EnumMember(Value = "black-market")]
            Blackmarket,
            
            /// <summary>
            /// Enum Stockexchange for "stock-exchange"
            /// </summary>
            [EnumMember(Value = "stock-exchange")]
            Stockexchange,
            
            /// <summary>
            /// Enum Cloning for "cloning"
            /// </summary>
            [EnumMember(Value = "cloning")]
            Cloning,
            
            /// <summary>
            /// Enum Surgery for "surgery"
            /// </summary>
            [EnumMember(Value = "surgery")]
            Surgery,
            
            /// <summary>
            /// Enum Dnatherapy for "dna-therapy"
            /// </summary>
            [EnumMember(Value = "dna-therapy")]
            Dnatherapy,
            
            /// <summary>
            /// Enum Repairfacilities for "repair-facilities"
            /// </summary>
            [EnumMember(Value = "repair-facilities")]
            Repairfacilities,
            
            /// <summary>
            /// Enum Factory for "factory"
            /// </summary>
            [EnumMember(Value = "factory")]
            Factory,
            
            /// <summary>
            /// Enum Labratory for "labratory"
            /// </summary>
            [EnumMember(Value = "labratory")]
            Labratory,
            
            /// <summary>
            /// Enum Gambling for "gambling"
            /// </summary>
            [EnumMember(Value = "gambling")]
            Gambling,
            
            /// <summary>
            /// Enum Fitting for "fitting"
            /// </summary>
            [EnumMember(Value = "fitting")]
            Fitting,
            
            /// <summary>
            /// Enum Paintshop for "paintshop"
            /// </summary>
            [EnumMember(Value = "paintshop")]
            Paintshop,
            
            /// <summary>
            /// Enum News for "news"
            /// </summary>
            [EnumMember(Value = "news")]
            News,
            
            /// <summary>
            /// Enum Storage for "storage"
            /// </summary>
            [EnumMember(Value = "storage")]
            Storage,
            
            /// <summary>
            /// Enum Insurance for "insurance"
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance,
            
            /// <summary>
            /// Enum Docking for "docking"
            /// </summary>
            [EnumMember(Value = "docking")]
            Docking,
            
            /// <summary>
            /// Enum Officerental for "office-rental"
            /// </summary>
            [EnumMember(Value = "office-rental")]
            Officerental,
            
            /// <summary>
            /// Enum Jumpclonefacility for "jump-clone-facility"
            /// </summary>
            [EnumMember(Value = "jump-clone-facility")]
            Jumpclonefacility,
            
            /// <summary>
            /// Enum Loyaltypointstore for "loyalty-point-store"
            /// </summary>
            [EnumMember(Value = "loyalty-point-store")]
            Loyaltypointstore,
            
            /// <summary>
            /// Enum Navyoffices for "navy-offices"
            /// </summary>
            [EnumMember(Value = "navy-offices")]
            Navyoffices,
            
            /// <summary>
            /// Enum Securityoffices for "security-offices"
            /// </summary>
            [EnumMember(Value = "security-offices")]
            Securityoffices
        }

        /// <summary>
        /// services array
        /// </summary>
        /// <value>services array</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<ServicesEnum> Services { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStationsStationIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseStationsStationIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStationsStationIdOk" /> class.
        /// </summary>
        /// <param name="MaxDockableShipVolume">max_dockable_ship_volume number (required).</param>
        /// <param name="Name">name string (required).</param>
        /// <param name="OfficeRentalCost">office_rental_cost number (required).</param>
        /// <param name="Owner">ID of the corporation that controls this station.</param>
        /// <param name="Position">Position.</param>
        /// <param name="RaceId">race_id integer.</param>
        /// <param name="ReprocessingEfficiency">reprocessing_efficiency number (required).</param>
        /// <param name="ReprocessingStationsTake">reprocessing_stations_take number (required).</param>
        /// <param name="Services">services array (required).</param>
        /// <param name="StationId">station_id integer (required).</param>
        /// <param name="SystemId">The solar system this station is in (required).</param>
        /// <param name="TypeId">type_id integer (required).</param>
        public GetUniverseStationsStationIdOk(float? MaxDockableShipVolume = default(float?), string Name = default(string), float? OfficeRentalCost = default(float?), int? Owner = default(int?), GetUniverseStationsStationIdPosition Position = default(GetUniverseStationsStationIdPosition), int? RaceId = default(int?), float? ReprocessingEfficiency = default(float?), float? ReprocessingStationsTake = default(float?), List<ServicesEnum> Services = default(List<ServicesEnum>), int? StationId = default(int?), int? SystemId = default(int?), int? TypeId = default(int?))
        {
            // to ensure "MaxDockableShipVolume" is required (not null)
            if (MaxDockableShipVolume == null)
            {
                throw new InvalidDataException("MaxDockableShipVolume is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.MaxDockableShipVolume = MaxDockableShipVolume;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "OfficeRentalCost" is required (not null)
            if (OfficeRentalCost == null)
            {
                throw new InvalidDataException("OfficeRentalCost is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.OfficeRentalCost = OfficeRentalCost;
            }
            // to ensure "ReprocessingEfficiency" is required (not null)
            if (ReprocessingEfficiency == null)
            {
                throw new InvalidDataException("ReprocessingEfficiency is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.ReprocessingEfficiency = ReprocessingEfficiency;
            }
            // to ensure "ReprocessingStationsTake" is required (not null)
            if (ReprocessingStationsTake == null)
            {
                throw new InvalidDataException("ReprocessingStationsTake is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.ReprocessingStationsTake = ReprocessingStationsTake;
            }
            // to ensure "Services" is required (not null)
            if (Services == null)
            {
                throw new InvalidDataException("Services is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.Services = Services;
            }
            // to ensure "StationId" is required (not null)
            if (StationId == null)
            {
                throw new InvalidDataException("StationId is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.StationId = StationId;
            }
            // to ensure "SystemId" is required (not null)
            if (SystemId == null)
            {
                throw new InvalidDataException("SystemId is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.SystemId = SystemId;
            }
            // to ensure "TypeId" is required (not null)
            if (TypeId == null)
            {
                throw new InvalidDataException("TypeId is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.TypeId = TypeId;
            }
            this.Owner = Owner;
            this.Position = Position;
            this.RaceId = RaceId;
        }
        
        /// <summary>
        /// max_dockable_ship_volume number
        /// </summary>
        /// <value>max_dockable_ship_volume number</value>
        [DataMember(Name="max_dockable_ship_volume", EmitDefaultValue=false)]
        public float? MaxDockableShipVolume { get; set; }

        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// office_rental_cost number
        /// </summary>
        /// <value>office_rental_cost number</value>
        [DataMember(Name="office_rental_cost", EmitDefaultValue=false)]
        public float? OfficeRentalCost { get; set; }

        /// <summary>
        /// ID of the corporation that controls this station
        /// </summary>
        /// <value>ID of the corporation that controls this station</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public int? Owner { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GetUniverseStationsStationIdPosition Position { get; set; }

        /// <summary>
        /// race_id integer
        /// </summary>
        /// <value>race_id integer</value>
        [DataMember(Name="race_id", EmitDefaultValue=false)]
        public int? RaceId { get; set; }

        /// <summary>
        /// reprocessing_efficiency number
        /// </summary>
        /// <value>reprocessing_efficiency number</value>
        [DataMember(Name="reprocessing_efficiency", EmitDefaultValue=false)]
        public float? ReprocessingEfficiency { get; set; }

        /// <summary>
        /// reprocessing_stations_take number
        /// </summary>
        /// <value>reprocessing_stations_take number</value>
        [DataMember(Name="reprocessing_stations_take", EmitDefaultValue=false)]
        public float? ReprocessingStationsTake { get; set; }


        /// <summary>
        /// station_id integer
        /// </summary>
        /// <value>station_id integer</value>
        [DataMember(Name="station_id", EmitDefaultValue=false)]
        public int? StationId { get; set; }

        /// <summary>
        /// The solar system this station is in
        /// </summary>
        /// <value>The solar system this station is in</value>
        [DataMember(Name="system_id", EmitDefaultValue=false)]
        public int? SystemId { get; set; }

        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseStationsStationIdOk {\n");
            sb.Append("  MaxDockableShipVolume: ").Append(MaxDockableShipVolume).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OfficeRentalCost: ").Append(OfficeRentalCost).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  RaceId: ").Append(RaceId).Append("\n");
            sb.Append("  ReprocessingEfficiency: ").Append(ReprocessingEfficiency).Append("\n");
            sb.Append("  ReprocessingStationsTake: ").Append(ReprocessingStationsTake).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseStationsStationIdOk);
        }

        /// <summary>
        /// Returns true if GetUniverseStationsStationIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseStationsStationIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseStationsStationIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxDockableShipVolume == input.MaxDockableShipVolume ||
                    (this.MaxDockableShipVolume != null &&
                    this.MaxDockableShipVolume.Equals(input.MaxDockableShipVolume))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OfficeRentalCost == input.OfficeRentalCost ||
                    (this.OfficeRentalCost != null &&
                    this.OfficeRentalCost.Equals(input.OfficeRentalCost))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.RaceId == input.RaceId ||
                    (this.RaceId != null &&
                    this.RaceId.Equals(input.RaceId))
                ) && 
                (
                    this.ReprocessingEfficiency == input.ReprocessingEfficiency ||
                    (this.ReprocessingEfficiency != null &&
                    this.ReprocessingEfficiency.Equals(input.ReprocessingEfficiency))
                ) && 
                (
                    this.ReprocessingStationsTake == input.ReprocessingStationsTake ||
                    (this.ReprocessingStationsTake != null &&
                    this.ReprocessingStationsTake.Equals(input.ReprocessingStationsTake))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.SequenceEqual(input.Services))
                ) && 
                (
                    this.StationId == input.StationId ||
                    (this.StationId != null &&
                    this.StationId.Equals(input.StationId))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxDockableShipVolume != null)
                    hashCode = hashCode * 59 + this.MaxDockableShipVolume.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OfficeRentalCost != null)
                    hashCode = hashCode * 59 + this.OfficeRentalCost.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.RaceId != null)
                    hashCode = hashCode * 59 + this.RaceId.GetHashCode();
                if (this.ReprocessingEfficiency != null)
                    hashCode = hashCode * 59 + this.ReprocessingEfficiency.GetHashCode();
                if (this.ReprocessingStationsTake != null)
                    hashCode = hashCode * 59 + this.ReprocessingStationsTake.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.StationId != null)
                    hashCode = hashCode * 59 + this.StationId.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
