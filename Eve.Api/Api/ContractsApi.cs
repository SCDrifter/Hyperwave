/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.2.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Eve.Api.Client;
using Eve.Api.Model;

namespace Eve.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContractsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContracts200Ok&gt;</returns>
        List<GetCharactersCharacterIdContracts200Ok> GetCharactersCharacterIdContracts (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContracts200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdContracts200Ok>> GetCharactersCharacterIdContractsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContractsContractIdBids200Ok&gt;</returns>
        List<GetCharactersCharacterIdContractsContractIdBids200Ok> GetCharactersCharacterIdContractsContractIdBids (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContractsContractIdBids200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdContractsContractIdBids200Ok>> GetCharactersCharacterIdContractsContractIdBidsWithHttpInfo (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContractsContractIdItems200Ok&gt;</returns>
        List<GetCharactersCharacterIdContractsContractIdItems200Ok> GetCharactersCharacterIdContractsContractIdItems (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContractsContractIdItems200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdContractsContractIdItems200Ok>> GetCharactersCharacterIdContractsContractIdItemsWithHttpInfo (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get public contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a public auction contract  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;GetContractsPublicBidsContractId200Ok&gt;</returns>
        List<GetContractsPublicBidsContractId200Ok> GetContractsPublicBidsContractId (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get public contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a public auction contract  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;GetContractsPublicBidsContractId200Ok&gt;</returns>
        ApiResponse<List<GetContractsPublicBidsContractId200Ok>> GetContractsPublicBidsContractIdWithHttpInfo (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get public contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a public contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;GetContractsPublicItemsContractId200Ok&gt;</returns>
        List<GetContractsPublicItemsContractId200Ok> GetContractsPublicItemsContractId (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get public contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a public contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;GetContractsPublicItemsContractId200Ok&gt;</returns>
        ApiResponse<List<GetContractsPublicItemsContractId200Ok>> GetContractsPublicItemsContractIdWithHttpInfo (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get public contracts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all public contracts in the given region  - --  This route is cached for up to 1800 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">An EVE region id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;GetContractsPublicRegionId200Ok&gt;</returns>
        List<GetContractsPublicRegionId200Ok> GetContractsPublicRegionId (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get public contracts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all public contracts in the given region  - --  This route is cached for up to 1800 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">An EVE region id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;GetContractsPublicRegionId200Ok&gt;</returns>
        ApiResponse<List<GetContractsPublicRegionId200Ok>> GetContractsPublicRegionIdWithHttpInfo (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get corporation contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContracts200Ok&gt;</returns>
        List<GetCorporationsCorporationIdContracts200Ok> GetCorporationsCorporationIdContracts (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContracts200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdContracts200Ok>> GetCorporationsCorporationIdContractsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;</returns>
        List<GetCorporationsCorporationIdContractsContractIdBids200Ok> GetCorporationsCorporationIdContractsContractIdBids (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdContractsContractIdBids200Ok>> GetCorporationsCorporationIdContractsContractIdBidsWithHttpInfo (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;</returns>
        List<GetCorporationsCorporationIdContractsContractIdItems200Ok> GetCorporationsCorporationIdContractsContractIdItems (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdContractsContractIdItems200Ok>> GetCorporationsCorporationIdContractsContractIdItemsWithHttpInfo (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContracts200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdContracts200Ok>> GetCharactersCharacterIdContractsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContracts200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContracts200Ok>>> GetCharactersCharacterIdContractsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContractsContractIdBids200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdContractsContractIdBids200Ok>> GetCharactersCharacterIdContractsContractIdBidsAsync (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContractsContractIdBids200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContractsContractIdBids200Ok>>> GetCharactersCharacterIdContractsContractIdBidsAsyncWithHttpInfo (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContractsContractIdItems200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdContractsContractIdItems200Ok>> GetCharactersCharacterIdContractsContractIdItemsAsync (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContractsContractIdItems200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContractsContractIdItems200Ok>>> GetCharactersCharacterIdContractsContractIdItemsAsyncWithHttpInfo (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get public contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a public auction contract  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;GetContractsPublicBidsContractId200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetContractsPublicBidsContractId200Ok>> GetContractsPublicBidsContractIdAsync (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get public contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a public auction contract  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;GetContractsPublicBidsContractId200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetContractsPublicBidsContractId200Ok>>> GetContractsPublicBidsContractIdAsyncWithHttpInfo (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get public contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a public contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;GetContractsPublicItemsContractId200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetContractsPublicItemsContractId200Ok>> GetContractsPublicItemsContractIdAsync (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get public contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a public contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;GetContractsPublicItemsContractId200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetContractsPublicItemsContractId200Ok>>> GetContractsPublicItemsContractIdAsyncWithHttpInfo (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get public contracts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all public contracts in the given region  - --  This route is cached for up to 1800 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">An EVE region id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;GetContractsPublicRegionId200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetContractsPublicRegionId200Ok>> GetContractsPublicRegionIdAsync (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get public contracts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all public contracts in the given region  - --  This route is cached for up to 1800 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">An EVE region id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;GetContractsPublicRegionId200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetContractsPublicRegionId200Ok>>> GetContractsPublicRegionIdAsyncWithHttpInfo (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get corporation contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContracts200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContracts200Ok>> GetCorporationsCorporationIdContractsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContracts200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContracts200Ok>>> GetCorporationsCorporationIdContractsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContractsContractIdBids200Ok>> GetCorporationsCorporationIdContractsContractIdBidsAsync (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContractsContractIdBids200Ok>>> GetCorporationsCorporationIdContractsContractIdBidsAsyncWithHttpInfo (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContractsContractIdItems200Ok>> GetCorporationsCorporationIdContractsContractIdItemsAsync (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContractsContractIdItems200Ok>>> GetCorporationsCorporationIdContractsContractIdItemsAsyncWithHttpInfo (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContractsApi : IContractsApi
    {
        private Eve.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContractsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Eve.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContractsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Eve.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Eve.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get contracts Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContracts200Ok&gt;</returns>
        public List<GetCharactersCharacterIdContracts200Ok> GetCharactersCharacterIdContracts (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContracts200Ok>> localVarResponse = GetCharactersCharacterIdContractsWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contracts Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContracts200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdContracts200Ok> > GetCharactersCharacterIdContractsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContractsApi->GetCharactersCharacterIdContracts");

            var localVarPath = "/v1/characters/{character_id}/contracts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContracts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdContracts200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContracts200Ok>)));
        }

        /// <summary>
        /// Get contracts Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContracts200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdContracts200Ok>> GetCharactersCharacterIdContractsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContracts200Ok>> localVarResponse = await GetCharactersCharacterIdContractsAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contracts Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContracts200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContracts200Ok>>> GetCharactersCharacterIdContractsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContractsApi->GetCharactersCharacterIdContracts");

            var localVarPath = "/v1/characters/{character_id}/contracts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContracts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdContracts200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContracts200Ok>)));
        }

        /// <summary>
        /// Get contract bids Lists bids on a particular auction contract  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContractsContractIdBids200Ok&gt;</returns>
        public List<GetCharactersCharacterIdContractsContractIdBids200Ok> GetCharactersCharacterIdContractsContractIdBids (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContractsContractIdBids200Ok>> localVarResponse = GetCharactersCharacterIdContractsContractIdBidsWithHttpInfo(characterId, contractId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract bids Lists bids on a particular auction contract  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContractsContractIdBids200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdContractsContractIdBids200Ok> > GetCharactersCharacterIdContractsContractIdBidsWithHttpInfo (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdBids");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdBids");

            var localVarPath = "/v1/characters/{character_id}/contracts/{contract_id}/bids/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContractsContractIdBids", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContractsContractIdBids200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdContractsContractIdBids200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContractsContractIdBids200Ok>)));
        }

        /// <summary>
        /// Get contract bids Lists bids on a particular auction contract  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContractsContractIdBids200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdContractsContractIdBids200Ok>> GetCharactersCharacterIdContractsContractIdBidsAsync (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContractsContractIdBids200Ok>> localVarResponse = await GetCharactersCharacterIdContractsContractIdBidsAsyncWithHttpInfo(characterId, contractId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contract bids Lists bids on a particular auction contract  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContractsContractIdBids200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContractsContractIdBids200Ok>>> GetCharactersCharacterIdContractsContractIdBidsAsyncWithHttpInfo (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdBids");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdBids");

            var localVarPath = "/v1/characters/{character_id}/contracts/{contract_id}/bids/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContractsContractIdBids", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContractsContractIdBids200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdContractsContractIdBids200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContractsContractIdBids200Ok>)));
        }

        /// <summary>
        /// Get contract items Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContractsContractIdItems200Ok&gt;</returns>
        public List<GetCharactersCharacterIdContractsContractIdItems200Ok> GetCharactersCharacterIdContractsContractIdItems (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContractsContractIdItems200Ok>> localVarResponse = GetCharactersCharacterIdContractsContractIdItemsWithHttpInfo(characterId, contractId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract items Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContractsContractIdItems200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdContractsContractIdItems200Ok> > GetCharactersCharacterIdContractsContractIdItemsWithHttpInfo (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdItems");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdItems");

            var localVarPath = "/v1/characters/{character_id}/contracts/{contract_id}/items/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContractsContractIdItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContractsContractIdItems200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdContractsContractIdItems200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContractsContractIdItems200Ok>)));
        }

        /// <summary>
        /// Get contract items Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContractsContractIdItems200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdContractsContractIdItems200Ok>> GetCharactersCharacterIdContractsContractIdItemsAsync (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContractsContractIdItems200Ok>> localVarResponse = await GetCharactersCharacterIdContractsContractIdItemsAsyncWithHttpInfo(characterId, contractId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contract items Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContractsContractIdItems200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContractsContractIdItems200Ok>>> GetCharactersCharacterIdContractsContractIdItemsAsyncWithHttpInfo (int? characterId, int? contractId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdItems");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdItems");

            var localVarPath = "/v1/characters/{character_id}/contracts/{contract_id}/items/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContractsContractIdItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContractsContractIdItems200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdContractsContractIdItems200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContractsContractIdItems200Ok>)));
        }

        /// <summary>
        /// Get public contract bids Lists bids on a public auction contract  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;GetContractsPublicBidsContractId200Ok&gt;</returns>
        public List<GetContractsPublicBidsContractId200Ok> GetContractsPublicBidsContractId (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<GetContractsPublicBidsContractId200Ok>> localVarResponse = GetContractsPublicBidsContractIdWithHttpInfo(contractId, datasource, ifNoneMatch, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get public contract bids Lists bids on a public auction contract  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;GetContractsPublicBidsContractId200Ok&gt;</returns>
        public ApiResponse< List<GetContractsPublicBidsContractId200Ok> > GetContractsPublicBidsContractIdWithHttpInfo (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetContractsPublicBidsContractId");

            var localVarPath = "/v1/contracts/public/bids/{contract_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractsPublicBidsContractId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetContractsPublicBidsContractId200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetContractsPublicBidsContractId200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetContractsPublicBidsContractId200Ok>)));
        }

        /// <summary>
        /// Get public contract bids Lists bids on a public auction contract  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;GetContractsPublicBidsContractId200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetContractsPublicBidsContractId200Ok>> GetContractsPublicBidsContractIdAsync (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<GetContractsPublicBidsContractId200Ok>> localVarResponse = await GetContractsPublicBidsContractIdAsyncWithHttpInfo(contractId, datasource, ifNoneMatch, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get public contract bids Lists bids on a public auction contract  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;GetContractsPublicBidsContractId200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetContractsPublicBidsContractId200Ok>>> GetContractsPublicBidsContractIdAsyncWithHttpInfo (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetContractsPublicBidsContractId");

            var localVarPath = "/v1/contracts/public/bids/{contract_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractsPublicBidsContractId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetContractsPublicBidsContractId200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetContractsPublicBidsContractId200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetContractsPublicBidsContractId200Ok>)));
        }

        /// <summary>
        /// Get public contract items Lists items of a public contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;GetContractsPublicItemsContractId200Ok&gt;</returns>
        public List<GetContractsPublicItemsContractId200Ok> GetContractsPublicItemsContractId (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<GetContractsPublicItemsContractId200Ok>> localVarResponse = GetContractsPublicItemsContractIdWithHttpInfo(contractId, datasource, ifNoneMatch, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get public contract items Lists items of a public contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;GetContractsPublicItemsContractId200Ok&gt;</returns>
        public ApiResponse< List<GetContractsPublicItemsContractId200Ok> > GetContractsPublicItemsContractIdWithHttpInfo (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetContractsPublicItemsContractId");

            var localVarPath = "/v1/contracts/public/items/{contract_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractsPublicItemsContractId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetContractsPublicItemsContractId200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetContractsPublicItemsContractId200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetContractsPublicItemsContractId200Ok>)));
        }

        /// <summary>
        /// Get public contract items Lists items of a public contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;GetContractsPublicItemsContractId200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetContractsPublicItemsContractId200Ok>> GetContractsPublicItemsContractIdAsync (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<GetContractsPublicItemsContractId200Ok>> localVarResponse = await GetContractsPublicItemsContractIdAsyncWithHttpInfo(contractId, datasource, ifNoneMatch, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get public contract items Lists items of a public contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;GetContractsPublicItemsContractId200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetContractsPublicItemsContractId200Ok>>> GetContractsPublicItemsContractIdAsyncWithHttpInfo (int? contractId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetContractsPublicItemsContractId");

            var localVarPath = "/v1/contracts/public/items/{contract_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractsPublicItemsContractId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetContractsPublicItemsContractId200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetContractsPublicItemsContractId200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetContractsPublicItemsContractId200Ok>)));
        }

        /// <summary>
        /// Get public contracts Returns a paginated list of all public contracts in the given region  - --  This route is cached for up to 1800 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">An EVE region id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;GetContractsPublicRegionId200Ok&gt;</returns>
        public List<GetContractsPublicRegionId200Ok> GetContractsPublicRegionId (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<GetContractsPublicRegionId200Ok>> localVarResponse = GetContractsPublicRegionIdWithHttpInfo(regionId, datasource, ifNoneMatch, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get public contracts Returns a paginated list of all public contracts in the given region  - --  This route is cached for up to 1800 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">An EVE region id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;GetContractsPublicRegionId200Ok&gt;</returns>
        public ApiResponse< List<GetContractsPublicRegionId200Ok> > GetContractsPublicRegionIdWithHttpInfo (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling ContractsApi->GetContractsPublicRegionId");

            var localVarPath = "/v1/contracts/public/{region_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractsPublicRegionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetContractsPublicRegionId200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetContractsPublicRegionId200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetContractsPublicRegionId200Ok>)));
        }

        /// <summary>
        /// Get public contracts Returns a paginated list of all public contracts in the given region  - --  This route is cached for up to 1800 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">An EVE region id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;GetContractsPublicRegionId200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetContractsPublicRegionId200Ok>> GetContractsPublicRegionIdAsync (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<GetContractsPublicRegionId200Ok>> localVarResponse = await GetContractsPublicRegionIdAsyncWithHttpInfo(regionId, datasource, ifNoneMatch, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get public contracts Returns a paginated list of all public contracts in the given region  - --  This route is cached for up to 1800 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">An EVE region id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;GetContractsPublicRegionId200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetContractsPublicRegionId200Ok>>> GetContractsPublicRegionIdAsyncWithHttpInfo (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling ContractsApi->GetContractsPublicRegionId");

            var localVarPath = "/v1/contracts/public/{region_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractsPublicRegionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetContractsPublicRegionId200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetContractsPublicRegionId200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetContractsPublicRegionId200Ok>)));
        }

        /// <summary>
        /// Get corporation contracts Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContracts200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdContracts200Ok> GetCorporationsCorporationIdContracts (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContracts200Ok>> localVarResponse = GetCorporationsCorporationIdContractsWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contracts Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContracts200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdContracts200Ok> > GetCorporationsCorporationIdContractsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContractsApi->GetCorporationsCorporationIdContracts");

            var localVarPath = "/v1/corporations/{corporation_id}/contracts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContracts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdContracts200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContracts200Ok>)));
        }

        /// <summary>
        /// Get corporation contracts Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContracts200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContracts200Ok>> GetCorporationsCorporationIdContractsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContracts200Ok>> localVarResponse = await GetCorporationsCorporationIdContractsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation contracts Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContracts200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContracts200Ok>>> GetCorporationsCorporationIdContractsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContractsApi->GetCorporationsCorporationIdContracts");

            var localVarPath = "/v1/corporations/{corporation_id}/contracts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContracts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdContracts200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContracts200Ok>)));
        }

        /// <summary>
        /// Get corporation contract bids Lists bids on a particular auction contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdContractsContractIdBids200Ok> GetCorporationsCorporationIdContractsContractIdBids (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContractsContractIdBids200Ok>> localVarResponse = GetCorporationsCorporationIdContractsContractIdBidsWithHttpInfo(contractId, corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contract bids Lists bids on a particular auction contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdContractsContractIdBids200Ok> > GetCorporationsCorporationIdContractsContractIdBidsWithHttpInfo (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdBids");
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdBids");

            var localVarPath = "/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContractsContractIdBids", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContractsContractIdBids200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdContractsContractIdBids200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContractsContractIdBids200Ok>)));
        }

        /// <summary>
        /// Get corporation contract bids Lists bids on a particular auction contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContractsContractIdBids200Ok>> GetCorporationsCorporationIdContractsContractIdBidsAsync (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContractsContractIdBids200Ok>> localVarResponse = await GetCorporationsCorporationIdContractsContractIdBidsAsyncWithHttpInfo(contractId, corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation contract bids Lists bids on a particular auction contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContractsContractIdBids200Ok>>> GetCorporationsCorporationIdContractsContractIdBidsAsyncWithHttpInfo (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdBids");
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdBids");

            var localVarPath = "/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContractsContractIdBids", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContractsContractIdBids200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdContractsContractIdBids200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContractsContractIdBids200Ok>)));
        }

        /// <summary>
        /// Get corporation contract items Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdContractsContractIdItems200Ok> GetCorporationsCorporationIdContractsContractIdItems (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContractsContractIdItems200Ok>> localVarResponse = GetCorporationsCorporationIdContractsContractIdItemsWithHttpInfo(contractId, corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contract items Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdContractsContractIdItems200Ok> > GetCorporationsCorporationIdContractsContractIdItemsWithHttpInfo (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdItems");
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdItems");

            var localVarPath = "/v1/corporations/{corporation_id}/contracts/{contract_id}/items/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContractsContractIdItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContractsContractIdItems200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdContractsContractIdItems200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContractsContractIdItems200Ok>)));
        }

        /// <summary>
        /// Get corporation contract items Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContractsContractIdItems200Ok>> GetCorporationsCorporationIdContractsContractIdItemsAsync (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContractsContractIdItems200Ok>> localVarResponse = await GetCorporationsCorporationIdContractsContractIdItemsAsyncWithHttpInfo(contractId, corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation contract items Lists items of a particular contract  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="Eve.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">ID of a contract</param>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContractsContractIdItems200Ok>>> GetCorporationsCorporationIdContractsContractIdItemsAsyncWithHttpInfo (int? contractId, int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdItems");
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdItems");

            var localVarPath = "/v1/corporations/{corporation_id}/contracts/{contract_id}/items/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContractsContractIdItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContractsContractIdItems200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdContractsContractIdItems200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContractsContractIdItems200Ok>)));
        }

    }
}
